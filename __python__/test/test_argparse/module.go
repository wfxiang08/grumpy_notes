package test_argparse
import πg "grumpy"
var Code *πg.Code
func init() {
	Code = πg.NewCode("<module>", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
		var πR *πg.Object; _ = πR
		var πE *πg.BaseException; _ = πE
		ß := πg.InternStr("")
		ß0 := πg.InternStr("0")
		ß1 := πg.InternStr("1")
		ß123 := πg.InternStr("123")
		ß15 := πg.InternStr("15")
		ß2 := πg.InternStr("2")
		ß3 := πg.InternStr("3")
		ß4 := πg.InternStr("4")
		ß42 := πg.InternStr("42")
		ß7 := πg.InternStr("7")
		ß84 := πg.InternStr("84")
		ßA := πg.InternStr("A")
		ßALPHAS := πg.InternStr("ALPHAS")
		ßAction := πg.InternStr("Action")
		ßArgumentDefaultsHelpFormatter := πg.InternStr("ArgumentDefaultsHelpFormatter")
		ßArgumentError := πg.InternStr("ArgumentError")
		ßArgumentParser := πg.InternStr("ArgumentParser")
		ßArgumentParserError := πg.InternStr("ArgumentParserError")
		ßArgumentTypeError := πg.InternStr("ArgumentTypeError")
		ßAssertionError := πg.InternStr("AssertionError")
		ßAttributeError := πg.InternStr("AttributeError")
		ßB := πg.InternStr("B")
		ßBADGER := πg.InternStr("BADGER")
		ßBAR := πg.InternStr("BAR")
		ßBBB := πg.InternStr("BBB")
		ßC := πg.InternStr("C")
		ßCOLUMNS := πg.InternStr("COLUMNS")
		ßDESCRIPTION := πg.InternStr("DESCRIPTION")
		ßEPILOG := πg.InternStr("EPILOG")
		ßEXPECTED_MESSAGE := πg.InternStr("EXPECTED_MESSAGE")
		ßEnvironmentVarGuard := πg.InternStr("EnvironmentVarGuard")
		ßErrorRaisingArgumentParser := πg.InternStr("ErrorRaisingArgumentParser")
		ßException := πg.InternStr("Exception")
		ßF := πg.InternStr("F")
		ßFOO := πg.InternStr("FOO")
		ßFalse := πg.InternStr("False")
		ßFileType := πg.InternStr("FileType")
		ßHELP := πg.InternStr("HELP")
		ßHelpFormatter := πg.InternStr("HelpFormatter")
		ßHelpTestCase := πg.InternStr("HelpTestCase")
		ßMEMixin := πg.InternStr("MEMixin")
		ßMEPBase := πg.InternStr("MEPBase")
		ßMETAVAR := πg.InternStr("METAVAR")
		ßMyAction := πg.InternStr("MyAction")
		ßMyType := πg.InternStr("MyType")
		ßNEW_SPAM := πg.InternStr("NEW_SPAM")
		ßNS := πg.InternStr("NS")
		ßNamespace := πg.InternStr("Namespace")
		ßNone := πg.InternStr("None")
		ßNotImplemented := πg.InternStr("NotImplemented")
		ßOLD_SPAM := πg.InternStr("OLD_SPAM")
		ßOptionalAction := πg.InternStr("OptionalAction")
		ßP := πg.InternStr("P")
		ßPARSER := πg.InternStr("PARSER")
		ßPPP := πg.InternStr("PPP")
		ßPROG := πg.InternStr("PROG")
		ßParserTestCase := πg.InternStr("ParserTestCase")
		ßParserTesterMetaclass := πg.InternStr("ParserTesterMetaclass")
		ßPositionalAction := πg.InternStr("PositionalAction")
		ßRFile := πg.InternStr("RFile")
		ßRawDescriptionHelpFormatter := πg.InternStr("RawDescriptionHelpFormatter")
		ßRawTextHelpFormatter := πg.InternStr("RawTextHelpFormatter")
		ßS := πg.InternStr("S")
		ßSPAM := πg.InternStr("SPAM")
		ßSUPPRESS := πg.InternStr("SUPPRESS")
		ßSig := πg.InternStr("Sig")
		ßStdIOBuffer := πg.InternStr("StdIOBuffer")
		ßStringIO := πg.InternStr("StringIO")
		ßSystemExit := πg.InternStr("SystemExit")
		ßTestActionRegistration := πg.InternStr("TestActionRegistration")
		ßTestActionUserDefined := πg.InternStr("TestActionUserDefined")
		ßTestActionsReturned := πg.InternStr("TestActionsReturned")
		ßTestAddArgumentMetavar := πg.InternStr("TestAddArgumentMetavar")
		ßTestAddSubparsers := πg.InternStr("TestAddSubparsers")
		ßTestArgumentError := πg.InternStr("TestArgumentError")
		ßTestArgumentTypeError := πg.InternStr("TestArgumentTypeError")
		ßTestCase := πg.InternStr("TestCase")
		ßTestConflictHandling := πg.InternStr("TestConflictHandling")
		ßTestDefaultSuppress := πg.InternStr("TestDefaultSuppress")
		ßTestEmptyAndSpaceContainingArguments := πg.InternStr("TestEmptyAndSpaceContainingArguments")
		ßTestFileTypeRepr := πg.InternStr("TestFileTypeRepr")
		ßTestGetDefault := πg.InternStr("TestGetDefault")
		ßTestHelpAlternatePrefixChars := πg.InternStr("TestHelpAlternatePrefixChars")
		ßTestHelpArgumentDefaults := πg.InternStr("TestHelpArgumentDefaults")
		ßTestHelpBiggerOptionalGroups := πg.InternStr("TestHelpBiggerOptionalGroups")
		ßTestHelpBiggerOptionals := πg.InternStr("TestHelpBiggerOptionals")
		ßTestHelpBiggerPositionals := πg.InternStr("TestHelpBiggerPositionals")
		ßTestHelpFormattingMetaclass := πg.InternStr("TestHelpFormattingMetaclass")
		ßTestHelpNoHelpOptional := πg.InternStr("TestHelpNoHelpOptional")
		ßTestHelpNone := πg.InternStr("TestHelpNone")
		ßTestHelpOnlyUserGroups := πg.InternStr("TestHelpOnlyUserGroups")
		ßTestHelpRawDescription := πg.InternStr("TestHelpRawDescription")
		ßTestHelpRawText := πg.InternStr("TestHelpRawText")
		ßTestHelpReformatting := πg.InternStr("TestHelpReformatting")
		ßTestHelpRequiredOptional := πg.InternStr("TestHelpRequiredOptional")
		ßTestHelpSubparsersOrdering := πg.InternStr("TestHelpSubparsersOrdering")
		ßTestHelpSuppressOptional := πg.InternStr("TestHelpSuppressOptional")
		ßTestHelpSuppressOptionalGroup := πg.InternStr("TestHelpSuppressOptionalGroup")
		ßTestHelpSuppressPositional := πg.InternStr("TestHelpSuppressPositional")
		ßTestHelpSuppressUsage := πg.InternStr("TestHelpSuppressUsage")
		ßTestHelpTupleMetavar := πg.InternStr("TestHelpTupleMetavar")
		ßTestHelpUsage := πg.InternStr("TestHelpUsage")
		ßTestHelpUsageLongProg := πg.InternStr("TestHelpUsageLongProg")
		ßTestHelpUsageLongProgOptionsWrap := πg.InternStr("TestHelpUsageLongProgOptionsWrap")
		ßTestHelpUsageLongProgPositionalsWrap := πg.InternStr("TestHelpUsageLongProgPositionalsWrap")
		ßTestHelpUsageOptionalsOnlyWrap := πg.InternStr("TestHelpUsageOptionalsOnlyWrap")
		ßTestHelpUsageOptionalsPositionalsWrap := πg.InternStr("TestHelpUsageOptionalsPositionalsWrap")
		ßTestHelpUsageOptionalsWrap := πg.InternStr("TestHelpUsageOptionalsWrap")
		ßTestHelpUsagePositionalsOnlyWrap := πg.InternStr("TestHelpUsagePositionalsOnlyWrap")
		ßTestHelpUsagePositionalsWrap := πg.InternStr("TestHelpUsagePositionalsWrap")
		ßTestHelpVariableExpansion := πg.InternStr("TestHelpVariableExpansion")
		ßTestHelpVariableExpansionNoArguments := πg.InternStr("TestHelpVariableExpansionNoArguments")
		ßTestHelpVariableExpansionUsageSupplied := πg.InternStr("TestHelpVariableExpansionUsageSupplied")
		ßTestHelpVersionAction := πg.InternStr("TestHelpVersionAction")
		ßTestHelpVersionOptional := πg.InternStr("TestHelpVersionOptional")
		ßTestHelpWrappingLongNames := πg.InternStr("TestHelpWrappingLongNames")
		ßTestHelpWrappingShortNames := πg.InternStr("TestHelpWrappingShortNames")
		ßTestInvalidArgumentConstructors := πg.InternStr("TestInvalidArgumentConstructors")
		ßTestMutuallyExclusiveFirstSuppressed := πg.InternStr("TestMutuallyExclusiveFirstSuppressed")
		ßTestMutuallyExclusiveFirstSuppressedParent := πg.InternStr("TestMutuallyExclusiveFirstSuppressedParent")
		ßTestMutuallyExclusiveGroupErrors := πg.InternStr("TestMutuallyExclusiveGroupErrors")
		ßTestMutuallyExclusiveGroupErrorsParent := πg.InternStr("TestMutuallyExclusiveGroupErrorsParent")
		ßTestMutuallyExclusiveInGroup := πg.InternStr("TestMutuallyExclusiveInGroup")
		ßTestMutuallyExclusiveLong := πg.InternStr("TestMutuallyExclusiveLong")
		ßTestMutuallyExclusiveLongParent := πg.InternStr("TestMutuallyExclusiveLongParent")
		ßTestMutuallyExclusiveManySuppressed := πg.InternStr("TestMutuallyExclusiveManySuppressed")
		ßTestMutuallyExclusiveManySuppressedParent := πg.InternStr("TestMutuallyExclusiveManySuppressedParent")
		ßTestMutuallyExclusiveOptionalAndPositional := πg.InternStr("TestMutuallyExclusiveOptionalAndPositional")
		ßTestMutuallyExclusiveOptionalAndPositionalParent := πg.InternStr("TestMutuallyExclusiveOptionalAndPositionalParent")
		ßTestMutuallyExclusiveOptionalsAndPositionalsMixed := πg.InternStr("TestMutuallyExclusiveOptionalsAndPositionalsMixed")
		ßTestMutuallyExclusiveOptionalsAndPositionalsMixedParent := πg.InternStr("TestMutuallyExclusiveOptionalsAndPositionalsMixedParent")
		ßTestMutuallyExclusiveOptionalsMixed := πg.InternStr("TestMutuallyExclusiveOptionalsMixed")
		ßTestMutuallyExclusiveOptionalsMixedParent := πg.InternStr("TestMutuallyExclusiveOptionalsMixedParent")
		ßTestMutuallyExclusiveSimple := πg.InternStr("TestMutuallyExclusiveSimple")
		ßTestMutuallyExclusiveSimpleParent := πg.InternStr("TestMutuallyExclusiveSimpleParent")
		ßTestNamespace := πg.InternStr("TestNamespace")
		ßTestNamespaceContainsSimple := πg.InternStr("TestNamespaceContainsSimple")
		ßTestNargsRemainder := πg.InternStr("TestNargsRemainder")
		ßTestNargsZeroOrMore := πg.InternStr("TestNargsZeroOrMore")
		ßTestOptionLike := πg.InternStr("TestOptionLike")
		ßTestOptionalsActionAppend := πg.InternStr("TestOptionalsActionAppend")
		ßTestOptionalsActionAppendConst := πg.InternStr("TestOptionalsActionAppendConst")
		ßTestOptionalsActionAppendConstWithDefault := πg.InternStr("TestOptionalsActionAppendConstWithDefault")
		ßTestOptionalsActionAppendWithDefault := πg.InternStr("TestOptionalsActionAppendWithDefault")
		ßTestOptionalsActionCount := πg.InternStr("TestOptionalsActionCount")
		ßTestOptionalsActionStore := πg.InternStr("TestOptionalsActionStore")
		ßTestOptionalsActionStoreConst := πg.InternStr("TestOptionalsActionStoreConst")
		ßTestOptionalsActionStoreFalse := πg.InternStr("TestOptionalsActionStoreFalse")
		ßTestOptionalsActionStoreTrue := πg.InternStr("TestOptionalsActionStoreTrue")
		ßTestOptionalsAlmostNumericAndPositionals := πg.InternStr("TestOptionalsAlmostNumericAndPositionals")
		ßTestOptionalsAlternatePrefixChars := πg.InternStr("TestOptionalsAlternatePrefixChars")
		ßTestOptionalsAlternatePrefixCharsAddedHelp := πg.InternStr("TestOptionalsAlternatePrefixCharsAddedHelp")
		ßTestOptionalsAlternatePrefixCharsMultipleShortArgs := πg.InternStr("TestOptionalsAlternatePrefixCharsMultipleShortArgs")
		ßTestOptionalsChoices := πg.InternStr("TestOptionalsChoices")
		ßTestOptionalsDefault := πg.InternStr("TestOptionalsDefault")
		ßTestOptionalsDest := πg.InternStr("TestOptionalsDest")
		ßTestOptionalsDoubleDash := πg.InternStr("TestOptionalsDoubleDash")
		ßTestOptionalsDoubleDashPartialMatch := πg.InternStr("TestOptionalsDoubleDashPartialMatch")
		ßTestOptionalsDoubleDashPrefixMatch := πg.InternStr("TestOptionalsDoubleDashPrefixMatch")
		ßTestOptionalsHelpVersionActions := πg.InternStr("TestOptionalsHelpVersionActions")
		ßTestOptionalsNargs1 := πg.InternStr("TestOptionalsNargs1")
		ßTestOptionalsNargs3 := πg.InternStr("TestOptionalsNargs3")
		ßTestOptionalsNargsDefault := πg.InternStr("TestOptionalsNargsDefault")
		ßTestOptionalsNargsOneOrMore := πg.InternStr("TestOptionalsNargsOneOrMore")
		ßTestOptionalsNargsOptional := πg.InternStr("TestOptionalsNargsOptional")
		ßTestOptionalsNargsZeroOrMore := πg.InternStr("TestOptionalsNargsZeroOrMore")
		ßTestOptionalsNumeric := πg.InternStr("TestOptionalsNumeric")
		ßTestOptionalsNumericAndPositionals := πg.InternStr("TestOptionalsNumericAndPositionals")
		ßTestOptionalsRequired := πg.InternStr("TestOptionalsRequired")
		ßTestOptionalsShortLong := πg.InternStr("TestOptionalsShortLong")
		ßTestOptionalsSingleDash := πg.InternStr("TestOptionalsSingleDash")
		ßTestOptionalsSingleDashAmbiguous := πg.InternStr("TestOptionalsSingleDashAmbiguous")
		ßTestOptionalsSingleDashCombined := πg.InternStr("TestOptionalsSingleDashCombined")
		ßTestOptionalsSingleDashLong := πg.InternStr("TestOptionalsSingleDashLong")
		ßTestOptionalsSingleDashSubsetAmbiguous := πg.InternStr("TestOptionalsSingleDashSubsetAmbiguous")
		ßTestOptionalsSingleDoubleDash := πg.InternStr("TestOptionalsSingleDoubleDash")
		ßTestParentParsers := πg.InternStr("TestParentParsers")
		ßTestParseKnownArgs := πg.InternStr("TestParseKnownArgs")
		ßTestParserDefault42 := πg.InternStr("TestParserDefault42")
		ßTestParserDefaultSuppress := πg.InternStr("TestParserDefaultSuppress")
		ßTestPositionalsActionAppend := πg.InternStr("TestPositionalsActionAppend")
		ßTestPositionalsChoicesInt := πg.InternStr("TestPositionalsChoicesInt")
		ßTestPositionalsChoicesString := πg.InternStr("TestPositionalsChoicesString")
		ßTestPositionalsGroups := πg.InternStr("TestPositionalsGroups")
		ßTestPositionalsNargs1 := πg.InternStr("TestPositionalsNargs1")
		ßTestPositionalsNargs2 := πg.InternStr("TestPositionalsNargs2")
		ßTestPositionalsNargs2None := πg.InternStr("TestPositionalsNargs2None")
		ßTestPositionalsNargs2OneOrMore := πg.InternStr("TestPositionalsNargs2OneOrMore")
		ßTestPositionalsNargs2Optional := πg.InternStr("TestPositionalsNargs2Optional")
		ßTestPositionalsNargs2ZeroOrMore := πg.InternStr("TestPositionalsNargs2ZeroOrMore")
		ßTestPositionalsNargsNone := πg.InternStr("TestPositionalsNargsNone")
		ßTestPositionalsNargsNone1 := πg.InternStr("TestPositionalsNargsNone1")
		ßTestPositionalsNargsNoneNone := πg.InternStr("TestPositionalsNargsNoneNone")
		ßTestPositionalsNargsNoneOneOrMore := πg.InternStr("TestPositionalsNargsNoneOneOrMore")
		ßTestPositionalsNargsNoneOneOrMore1 := πg.InternStr("TestPositionalsNargsNoneOneOrMore1")
		ßTestPositionalsNargsNoneOptional := πg.InternStr("TestPositionalsNargsNoneOptional")
		ßTestPositionalsNargsNoneOptional1 := πg.InternStr("TestPositionalsNargsNoneOptional1")
		ßTestPositionalsNargsNoneZeroOrMore := πg.InternStr("TestPositionalsNargsNoneZeroOrMore")
		ßTestPositionalsNargsNoneZeroOrMore1 := πg.InternStr("TestPositionalsNargsNoneZeroOrMore1")
		ßTestPositionalsNargsOneOrMore := πg.InternStr("TestPositionalsNargsOneOrMore")
		ßTestPositionalsNargsOneOrMore1 := πg.InternStr("TestPositionalsNargsOneOrMore1")
		ßTestPositionalsNargsOneOrMoreNone := πg.InternStr("TestPositionalsNargsOneOrMoreNone")
		ßTestPositionalsNargsOptional := πg.InternStr("TestPositionalsNargsOptional")
		ßTestPositionalsNargsOptional1 := πg.InternStr("TestPositionalsNargsOptional1")
		ßTestPositionalsNargsOptionalConvertedDefault := πg.InternStr("TestPositionalsNargsOptionalConvertedDefault")
		ßTestPositionalsNargsOptionalDefault := πg.InternStr("TestPositionalsNargsOptionalDefault")
		ßTestPositionalsNargsOptionalNone := πg.InternStr("TestPositionalsNargsOptionalNone")
		ßTestPositionalsNargsOptionalOneOrMore := πg.InternStr("TestPositionalsNargsOptionalOneOrMore")
		ßTestPositionalsNargsOptionalOptional := πg.InternStr("TestPositionalsNargsOptionalOptional")
		ßTestPositionalsNargsOptionalZeroOrMore := πg.InternStr("TestPositionalsNargsOptionalZeroOrMore")
		ßTestPositionalsNargsZeroOrMore := πg.InternStr("TestPositionalsNargsZeroOrMore")
		ßTestPositionalsNargsZeroOrMore1 := πg.InternStr("TestPositionalsNargsZeroOrMore1")
		ßTestPositionalsNargsZeroOrMoreDefault := πg.InternStr("TestPositionalsNargsZeroOrMoreDefault")
		ßTestPositionalsNargsZeroOrMoreNone := πg.InternStr("TestPositionalsNargsZeroOrMoreNone")
		ßTestPrefixCharacterOnlyArguments := πg.InternStr("TestPrefixCharacterOnlyArguments")
		ßTestSetDefaults := πg.InternStr("TestSetDefaults")
		ßTestShortColumns := πg.InternStr("TestShortColumns")
		ßTestStrings := πg.InternStr("TestStrings")
		ßTestTypeClassicClass := πg.InternStr("TestTypeClassicClass")
		ßTestTypeFunctionCallOnlyOnce := πg.InternStr("TestTypeFunctionCallOnlyOnce")
		ßTestTypeFunctionCalledOnDefault := πg.InternStr("TestTypeFunctionCalledOnDefault")
		ßTestTypeRegistration := πg.InternStr("TestTypeRegistration")
		ßTestTypeUserDefined := πg.InternStr("TestTypeUserDefined")
		ßTrue := πg.InternStr("True")
		ßTypeError := πg.InternStr("TypeError")
		ßUSAGE := πg.InternStr("USAGE")
		ßValueError := πg.InternStr("ValueError")
		ßW := πg.InternStr("W")
		ßW1 := πg.InternStr("W1")
		ßW2 := πg.InternStr("W2")
		ßWFile := πg.InternStr("WFile")
		ßWW := πg.InternStr("WW")
		ßX := πg.InternStr("X")
		ßX1 := πg.InternStr("X1")
		ßX2 := πg.InternStr("X2")
		ßXX := πg.InternStr("XX")
		ßXXX := πg.InternStr("XXX")
		ßY := πg.InternStr("Y")
		ßY1 := πg.InternStr("Y1")
		ßY2 := πg.InternStr("Y2")
		ßY3 := πg.InternStr("Y3")
		ßYY := πg.InternStr("YY")
		ßZ := πg.InternStr("Z")
		ßZ1 := πg.InternStr("Z1")
		ßZZ := πg.InternStr("ZZ")
		ß_ := πg.InternStr("_")
		ß_StringIO := πg.InternStr("_StringIO")
		ß__call__ := πg.InternStr("__call__")
		ß__dict__ := πg.InternStr("__dict__")
		ß__enter__ := πg.InternStr("__enter__")
		ß__eq__ := πg.InternStr("__eq__")
		ß__exit__ := πg.InternStr("__exit__")
		ß__hash__ := πg.InternStr("__hash__")
		ß__init__ := πg.InternStr("__init__")
		ß__main__ := πg.InternStr("__main__")
		ß__metaclass__ := πg.InternStr("__metaclass__")
		ß__module__ := πg.InternStr("__module__")
		ß__name__ := πg.InternStr("__name__")
		ß__ne__ := πg.InternStr("__ne__")
		ß__repr__ := πg.InternStr("__repr__")
		ß_add_arguments := πg.InternStr("_add_arguments")
		ß_get_error := πg.InternStr("_get_error")
		ß_get_parser := πg.InternStr("_get_parser")
		ß_parse_args := πg.InternStr("_parse_args")
		ß_test := πg.InternStr("_test")
		ß_test_mutex_ab := πg.InternStr("_test_mutex_ab")
		ß_test_subparser_help := πg.InternStr("_test_subparser_help")
		ßa := πg.InternStr("a")
		ßab := πg.InternStr("ab")
		ßab_mutex_parent := πg.InternStr("ab_mutex_parent")
		ßabc := πg.InternStr("abc")
		ßabcd_parent := πg.InternStr("abcd_parent")
		ßabcdefg := πg.InternStr("abcdefg")
		ßaction := πg.InternStr("action")
		ßadd := πg.InternStr("add")
		ßaddCleanup := πg.InternStr("addCleanup")
		ßadd_argument := πg.InternStr("add_argument")
		ßadd_argument_group := πg.InternStr("add_argument_group")
		ßadd_mutually_exclusive_group := πg.InternStr("add_mutually_exclusive_group")
		ßadd_parser := πg.InternStr("add_parser")
		ßadd_subparsers := πg.InternStr("add_subparsers")
		ßappend := πg.InternStr("append")
		ßappend_const := πg.InternStr("append_const")
		ßargparse := πg.InternStr("argparse")
		ßargs := πg.InternStr("args")
		ßargument_group_signatures := πg.InternStr("argument_group_signatures")
		ßargument_signatures := πg.InternStr("argument_signatures")
		ßargv := πg.InternStr("argv")
		ßascii := πg.InternStr("ascii")
		ßassertArgumentParserError := πg.InternStr("assertArgumentParserError")
		ßassertEqual := πg.InternStr("assertEqual")
		ßassertIs := πg.InternStr("assertIs")
		ßassertNotEqual := πg.InternStr("assertNotEqual")
		ßassertPrintHelpExit := πg.InternStr("assertPrintHelpExit")
		ßassertPrintVersionExit := πg.InternStr("assertPrintVersionExit")
		ßassertRaises := πg.InternStr("assertRaises")
		ßassertStringEqual := πg.InternStr("assertStringEqual")
		ßassertTrue := πg.InternStr("assertTrue")
		ßassertTypeError := πg.InternStr("assertTypeError")
		ßassertValueError := πg.InternStr("assertValueError")
		ßb := πg.InternStr("b")
		ßbadger := πg.InternStr("badger")
		ßbar := πg.InternStr("bar")
		ßbasename := πg.InternStr("basename")
		ßbases := πg.InternStr("bases")
		ßbaz := πg.InternStr("baz")
		ßc := πg.InternStr("c")
		ßc_group := πg.InternStr("c_group")
		ßchoices := πg.InternStr("choices")
		ßclose := πg.InternStr("close")
		ßcode := πg.InternStr("code")
		ßcommand := πg.InternStr("command")
		ßcommand_help_parser := πg.InternStr("command_help_parser")
		ßconst := πg.InternStr("const")
		ßcount := πg.InternStr("count")
		ßd := πg.InternStr("d")
		ßdecode := πg.InternStr("decode")
		ßdedent := πg.InternStr("dedent")
		ßdefault := πg.InternStr("default")
		ßdescription := πg.InternStr("description")
		ßdest := πg.InternStr("dest")
		ßdict := πg.InternStr("dict")
		ßdo_test_exception := πg.InternStr("do_test_exception")
		ßdo_test_no_exception := πg.InternStr("do_test_no_exception")
		ße := πg.InternStr("e")
		ßef := πg.InternStr("ef")
		ßekiekiekifekang := πg.InternStr("ekiekiekifekang")
		ßencode := πg.InternStr("encode")
		ßenumerate := πg.InternStr("enumerate")
		ßerror := πg.InternStr("error")
		ßerror_code := πg.InternStr("error_code")
		ßexc_info := πg.InternStr("exc_info")
		ßexception := πg.InternStr("exception")
		ßexit := πg.InternStr("exit")
		ßexpectedFailure := πg.InternStr("expectedFailure")
		ßf := πg.InternStr("f")
		ßfail := πg.InternStr("fail")
		ßfailures := πg.InternStr("failures")
		ßfloat := πg.InternStr("float")
		ßfoo := πg.InternStr("foo")
		ßfoo_converted := πg.InternStr("foo_converted")
		ßformat_help := πg.InternStr("format_help")
		ßformat_usage := πg.InternStr("format_usage")
		ßformat_version := πg.InternStr("format_version")
		ßfrell := πg.InternStr("frell")
		ßfunc_suffix := πg.InternStr("func_suffix")
		ßg := πg.InternStr("g")
		ßgd := πg.InternStr("gd")
		ßget_default := πg.InternStr("get_default")
		ßget_parser := πg.InternStr("get_parser")
		ßgetattr := πg.InternStr("getattr")
		ßgetvalue := πg.InternStr("getvalue")
		ßgroup := πg.InternStr("group")
		ßh := πg.InternStr("h")
		ßhasattr := πg.InternStr("hasattr")
		ßhelp := πg.InternStr("help")
		ßi := πg.InternStr("i")
		ßint := πg.InternStr("int")
		ßisinstance := πg.InternStr("isinstance")
		ßitems := πg.InternStr("items")
		ßj := πg.InternStr("j")
		ßjoin := πg.InternStr("join")
		ßk := πg.InternStr("k")
		ßkwargs := πg.InternStr("kwargs")
		ßmain_program := πg.InternStr("main_program")
		ßmessage := πg.InternStr("message")
		ßmetavar := πg.InternStr("metavar")
		ßmode := πg.InternStr("mode")
		ßmy_action := πg.InternStr("my_action")
		ßmy_type := πg.InternStr("my_type")
		ßname := πg.InternStr("name")
		ßnargs := πg.InternStr("nargs")
		ßoa := πg.InternStr("oa")
		ßobject := πg.InternStr("object")
		ßone := πg.InternStr("one")
		ßooa := πg.InternStr("ooa")
		ßos := πg.InternStr("os")
		ßparse_args := πg.InternStr("parse_args")
		ßparse_known_args := πg.InternStr("parse_known_args")
		ßparser := πg.InternStr("parser")
		ßparser_class := πg.InternStr("parser_class")
		ßparser_signature := πg.InternStr("parser_signature")
		ßparsers := πg.InternStr("parsers")
		ßpath := πg.InternStr("path")
		ßprog := πg.InternStr("prog")
		ßr := πg.InternStr("r")
		ßrange := πg.InternStr("range")
		ßread := πg.InternStr("read")
		ßregister := πg.InternStr("register")
		ßrepr := πg.InternStr("repr")
		ßresolve := πg.InternStr("resolve")
		ßrun_unittest := πg.InternStr("run_unittest")
		ßseen := πg.InternStr("seen")
		ßset := πg.InternStr("set")
		ßsetUp := πg.InternStr("setUp")
		ßset_defaults := πg.InternStr("set_defaults")
		ßsetattr := πg.InternStr("setattr")
		ßsorted := πg.InternStr("sorted")
		ßspam := πg.InternStr("spam")
		ßsplit := πg.InternStr("split")
		ßstd_name := πg.InternStr("std_name")
		ßstderr := πg.InternStr("stderr")
		ßstderr_to_parser_error := πg.InternStr("stderr_to_parser_error")
		ßstdout := πg.InternStr("stdout")
		ßstore := πg.InternStr("store")
		ßstore_const := πg.InternStr("store_const")
		ßstore_false := πg.InternStr("store_false")
		ßstore_true := πg.InternStr("store_true")
		ßstr := πg.InternStr("str")
		ßsubcommands := πg.InternStr("subcommands")
		ßsubparsers_signatures := πg.InternStr("subparsers_signatures")
		ßsuccesses := πg.InternStr("successes")
		ßsuccesses_when_not_required := πg.InternStr("successes_when_not_required")
		ßsuper := πg.InternStr("super")
		ßsys := πg.InternStr("sys")
		ßt := πg.InternStr("t")
		ßtest := πg.InternStr("test")
		ßtest_alternate_help_version := πg.InternStr("test_alternate_help_version")
		ßtest_argument := πg.InternStr("test_argument")
		ßtest_argument_error := πg.InternStr("test_argument_error")
		ßtest_argument_type_error := πg.InternStr("test_argument_type_error")
		ßtest_arguments_list := πg.InternStr("test_arguments_list")
		ßtest_arguments_list_positional := πg.InternStr("test_arguments_list_positional")
		ßtest_arguments_tuple := πg.InternStr("test_arguments_tuple")
		ßtest_arguments_tuple_positional := πg.InternStr("test_arguments_tuple_positional")
		ßtest_bad_type := πg.InternStr("test_bad_type")
		ßtest_conflict_error := πg.InternStr("test_conflict_error")
		ßtest_conflicting_parents := πg.InternStr("test_conflicting_parents")
		ßtest_conflicting_parents_mutex := πg.InternStr("test_conflicting_parents_mutex")
		ßtest_constructor := πg.InternStr("test_constructor")
		ßtest_dest := πg.InternStr("test_dest")
		ßtest_empty := πg.InternStr("test_empty")
		ßtest_equality := πg.InternStr("test_equality")
		ßtest_equality_returns_notimplemeted := πg.InternStr("test_equality_returns_notimplemeted")
		ßtest_failures := πg.InternStr("test_failures")
		ßtest_failures_when_not_required := πg.InternStr("test_failures_when_not_required")
		ßtest_failures_when_required := πg.InternStr("test_failures_when_required")
		ßtest_format := πg.InternStr("test_format")
		ßtest_get_default := πg.InternStr("test_get_default")
		ßtest_group_first := πg.InternStr("test_group_first")
		ßtest_groups_parents := πg.InternStr("test_groups_parents")
		ßtest_help := πg.InternStr("test_help")
		ßtest_help_alternate_prefix_chars := πg.InternStr("test_help_alternate_prefix_chars")
		ßtest_help_extra_prefix_chars := πg.InternStr("test_help_extra_prefix_chars")
		ßtest_help_version_extra_arguments := πg.InternStr("test_help_version_extra_arguments")
		ßtest_help_when_not_required := πg.InternStr("test_help_when_not_required")
		ßtest_help_when_required := πg.InternStr("test_help_when_required")
		ßtest_interleaved_groups := πg.InternStr("test_interleaved_groups")
		ßtest_invalid_action := πg.InternStr("test_invalid_action")
		ßtest_invalid_add_argument := πg.InternStr("test_invalid_add_argument")
		ßtest_invalid_add_argument_group := πg.InternStr("test_invalid_add_argument_group")
		ßtest_invalid_keyword_arguments := πg.InternStr("test_invalid_keyword_arguments")
		ßtest_invalid_option_strings := πg.InternStr("test_invalid_option_strings")
		ßtest_invalid_type := πg.InternStr("test_invalid_type")
		ßtest_issue_15906 := πg.InternStr("test_issue_15906")
		ßtest_main := πg.InternStr("test_main")
		ßtest_misc := πg.InternStr("test_misc")
		ßtest_missing_destination := πg.InternStr("test_missing_destination")
		ßtest_mixed := πg.InternStr("test_mixed")
		ßtest_more_than_one_argument_actions := πg.InternStr("test_more_than_one_argument_actions")
		ßtest_multiple_dest := πg.InternStr("test_multiple_dest")
		ßtest_multiple_parents := πg.InternStr("test_multiple_parents")
		ßtest_multiple_parents_mutex := πg.InternStr("test_multiple_parents_mutex")
		ßtest_namespace := πg.InternStr("test_namespace")
		ßtest_nargs_1_metavar_length0 := πg.InternStr("test_nargs_1_metavar_length0")
		ßtest_nargs_1_metavar_length1 := πg.InternStr("test_nargs_1_metavar_length1")
		ßtest_nargs_1_metavar_length2 := πg.InternStr("test_nargs_1_metavar_length2")
		ßtest_nargs_1_metavar_length3 := πg.InternStr("test_nargs_1_metavar_length3")
		ßtest_nargs_1_metavar_string := πg.InternStr("test_nargs_1_metavar_string")
		ßtest_nargs_2_metavar_length0 := πg.InternStr("test_nargs_2_metavar_length0")
		ßtest_nargs_2_metavar_length1 := πg.InternStr("test_nargs_2_metavar_length1")
		ßtest_nargs_2_metavar_length2 := πg.InternStr("test_nargs_2_metavar_length2")
		ßtest_nargs_2_metavar_length3 := πg.InternStr("test_nargs_2_metavar_length3")
		ßtest_nargs_2_metavar_string := πg.InternStr("test_nargs_2_metavar_string")
		ßtest_nargs_3_metavar_length0 := πg.InternStr("test_nargs_3_metavar_length0")
		ßtest_nargs_3_metavar_length1 := πg.InternStr("test_nargs_3_metavar_length1")
		ßtest_nargs_3_metavar_length2 := πg.InternStr("test_nargs_3_metavar_length2")
		ßtest_nargs_3_metavar_length3 := πg.InternStr("test_nargs_3_metavar_length3")
		ßtest_nargs_3_metavar_string := πg.InternStr("test_nargs_3_metavar_string")
		ßtest_nargs_None_metavar_length0 := πg.InternStr("test_nargs_None_metavar_length0")
		ßtest_nargs_None_metavar_length1 := πg.InternStr("test_nargs_None_metavar_length1")
		ßtest_nargs_None_metavar_length2 := πg.InternStr("test_nargs_None_metavar_length2")
		ßtest_nargs_None_metavar_length3 := πg.InternStr("test_nargs_None_metavar_length3")
		ßtest_nargs_None_metavar_string := πg.InternStr("test_nargs_None_metavar_string")
		ßtest_nargs_oneormore_metavar_length0 := πg.InternStr("test_nargs_oneormore_metavar_length0")
		ßtest_nargs_oneormore_metavar_length1 := πg.InternStr("test_nargs_oneormore_metavar_length1")
		ßtest_nargs_oneormore_metavar_length2 := πg.InternStr("test_nargs_oneormore_metavar_length2")
		ßtest_nargs_oneormore_metavar_length3 := πg.InternStr("test_nargs_oneormore_metavar_length3")
		ßtest_nargs_oneormore_metavar_string := πg.InternStr("test_nargs_oneormore_metavar_string")
		ßtest_nargs_optional_metavar_length0 := πg.InternStr("test_nargs_optional_metavar_length0")
		ßtest_nargs_optional_metavar_length1 := πg.InternStr("test_nargs_optional_metavar_length1")
		ßtest_nargs_optional_metavar_length2 := πg.InternStr("test_nargs_optional_metavar_length2")
		ßtest_nargs_optional_metavar_length3 := πg.InternStr("test_nargs_optional_metavar_length3")
		ßtest_nargs_optional_metavar_string := πg.InternStr("test_nargs_optional_metavar_string")
		ßtest_nargs_parser_metavar_length0 := πg.InternStr("test_nargs_parser_metavar_length0")
		ßtest_nargs_parser_metavar_length1 := πg.InternStr("test_nargs_parser_metavar_length1")
		ßtest_nargs_parser_metavar_length2 := πg.InternStr("test_nargs_parser_metavar_length2")
		ßtest_nargs_parser_metavar_length3 := πg.InternStr("test_nargs_parser_metavar_length3")
		ßtest_nargs_parser_metavar_string := πg.InternStr("test_nargs_parser_metavar_string")
		ßtest_nargs_remainder_metavar_length0 := πg.InternStr("test_nargs_remainder_metavar_length0")
		ßtest_nargs_remainder_metavar_length1 := πg.InternStr("test_nargs_remainder_metavar_length1")
		ßtest_nargs_remainder_metavar_length2 := πg.InternStr("test_nargs_remainder_metavar_length2")
		ßtest_nargs_remainder_metavar_length3 := πg.InternStr("test_nargs_remainder_metavar_length3")
		ßtest_nargs_remainder_metavar_string := πg.InternStr("test_nargs_remainder_metavar_string")
		ßtest_nargs_zeroormore_metavar_length0 := πg.InternStr("test_nargs_zeroormore_metavar_length0")
		ßtest_nargs_zeroormore_metavar_length1 := πg.InternStr("test_nargs_zeroormore_metavar_length1")
		ßtest_nargs_zeroormore_metavar_length2 := πg.InternStr("test_nargs_zeroormore_metavar_length2")
		ßtest_nargs_zeroormore_metavar_length3 := πg.InternStr("test_nargs_zeroormore_metavar_length3")
		ßtest_nargs_zeroormore_metavar_string := πg.InternStr("test_nargs_zeroormore_metavar_string")
		ßtest_no_argument_actions := πg.InternStr("test_no_argument_actions")
		ßtest_no_argument_no_const_actions := πg.InternStr("test_no_argument_no_const_actions")
		ßtest_no_double_type_conversion_of_default := πg.InternStr("test_no_double_type_conversion_of_default")
		ßtest_no_help := πg.InternStr("test_no_help")
		ßtest_non_empty := πg.InternStr("test_non_empty")
		ßtest_nongroup_first := πg.InternStr("test_nongroup_first")
		ßtest_optional := πg.InternStr("test_optional")
		ßtest_optionals := πg.InternStr("test_optionals")
		ßtest_parent_help := πg.InternStr("test_parent_help")
		ßtest_parse_args := πg.InternStr("test_parse_args")
		ßtest_parse_args_failures := πg.InternStr("test_parse_args_failures")
		ßtest_parse_known_args := πg.InternStr("test_parse_known_args")
		ßtest_parser := πg.InternStr("test_parser")
		ßtest_parser_command_help := πg.InternStr("test_parser_command_help")
		ßtest_parsers_action_missing_params := πg.InternStr("test_parsers_action_missing_params")
		ßtest_print := πg.InternStr("test_print")
		ßtest_print_file := πg.InternStr("test_print_file")
		ßtest_r := πg.InternStr("test_r")
		ßtest_required_const_actions := πg.InternStr("test_required_const_actions")
		ßtest_required_positional := πg.InternStr("test_required_positional")
		ßtest_resolve_error := πg.InternStr("test_resolve_error")
		ßtest_same_argument_name_parents := πg.InternStr("test_same_argument_name_parents")
		ßtest_set_defaults_no_args := πg.InternStr("test_set_defaults_no_args")
		ßtest_set_defaults_on_parent_and_subparser := πg.InternStr("test_set_defaults_on_parent_and_subparser")
		ßtest_set_defaults_parents := πg.InternStr("test_set_defaults_parents")
		ßtest_set_defaults_same_as_add_argument := πg.InternStr("test_set_defaults_same_as_add_argument")
		ßtest_set_defaults_same_as_add_argument_group := πg.InternStr("test_set_defaults_same_as_add_argument_group")
		ßtest_set_defaults_subparsers := πg.InternStr("test_set_defaults_subparsers")
		ßtest_set_defaults_with_args := πg.InternStr("test_set_defaults_with_args")
		ßtest_single_granparent_mutex := πg.InternStr("test_single_granparent_mutex")
		ßtest_single_parent := πg.InternStr("test_single_parent")
		ßtest_single_parent_mutex := πg.InternStr("test_single_parent_mutex")
		ßtest_subparser1_help := πg.InternStr("test_subparser1_help")
		ßtest_subparser2_help := πg.InternStr("test_subparser2_help")
		ßtest_subparser_parents := πg.InternStr("test_subparser_parents")
		ßtest_subparser_parents_mutex := πg.InternStr("test_subparser_parents_mutex")
		ßtest_subparser_title_help := πg.InternStr("test_subparser_title_help")
		ßtest_successes := πg.InternStr("test_successes")
		ßtest_successes_when_not_required := πg.InternStr("test_successes_when_not_required")
		ßtest_successes_when_required := πg.InternStr("test_successes_when_required")
		ßtest_support := πg.InternStr("test_support")
		ßtest_type_function_call_only_once := πg.InternStr("test_type_function_call_only_once")
		ßtest_type_function_call_with_non_string_default := πg.InternStr("test_type_function_call_with_non_string_default")
		ßtest_type_function_call_with_string_default := πg.InternStr("test_type_function_call_with_string_default")
		ßtest_usage_when_not_required := πg.InternStr("test_usage_when_not_required")
		ßtest_usage_when_required := πg.InternStr("test_usage_when_required")
		ßtest_user_defined_action := πg.InternStr("test_user_defined_action")
		ßtest_version := πg.InternStr("test_version")
		ßtest_version_action := πg.InternStr("test_version_action")
		ßtest_version_format := πg.InternStr("test_version_format")
		ßtest_version_no_help := πg.InternStr("test_version_no_help")
		ßtest_wb_1 := πg.InternStr("test_wb_1")
		ßtextwrap := πg.InternStr("textwrap")
		ßtitle := πg.InternStr("title")
		ßtruncate := πg.InternStr("truncate")
		ßtuple := πg.InternStr("tuple")
		ßtype := πg.InternStr("type")
		ßu := πg.InternStr("u")
		ßunittest := πg.InternStr("unittest")
		ßunset := πg.InternStr("unset")
		ßupdate := πg.InternStr("update")
		ßusage := πg.InternStr("usage")
		ßusage_when_not_required := πg.InternStr("usage_when_not_required")
		ßusage_when_required := πg.InternStr("usage_when_required")
		ßvalue := πg.InternStr("value")
		ßversion := πg.InternStr("version")
		ßw := πg.InternStr("w")
		ßw_parent := πg.InternStr("w_parent")
		ßwb := πg.InternStr("wb")
		ßwooden := πg.InternStr("wooden")
		ßwrite := πg.InternStr("write")
		ßwxyz_parent := πg.InternStr("wxyz_parent")
		ßx := πg.InternStr("x")
		ßxfoox := πg.InternStr("xfoox")
		ßxx := πg.InternStr("xx")
		ßxxx := πg.InternStr("xxx")
		ßxxxx := πg.InternStr("xxxx")
		ßy := πg.InternStr("y")
		ßyyy := πg.InternStr("yyy")
		ßyyyy := πg.InternStr("yyyy")
		ßyz := πg.InternStr("yz")
		ßz := πg.InternStr("z")
		ßz_parent := πg.InternStr("z_parent")
		ßzabbaz := πg.InternStr("zabbaz")
		ßzip := πg.InternStr("zip")
		var πTemp001 *πg.Object
		_ = πTemp001
		var πTemp002 []*πg.Object
		_ = πTemp002
		var πTemp003 *πg.Object
		_ = πTemp003
		var πTemp004 *πg.Dict
		_ = πTemp004
		var πTemp005 *πg.Object
		_ = πTemp005
		var πTemp006 *πg.Object
		_ = πTemp006
		var πTemp007 []πg.Param
		_ = πTemp007
		var πTemp008 *πg.Object
		_ = πTemp008
		var πTemp009 bool
		_ = πTemp009
		for ; πF.State() >= 0; πF.PopCheckpoint() {
			switch πF.State() {
			case 0:
			default: panic("unexpected function state")
			}
			// line 5: import os
			πF.SetLineno(5)
			if πTemp002, πE = πg.ImportModule(πF, "os"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßos.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 8: import sys
			πF.SetLineno(8)
			if πTemp002, πE = πg.ImportModule(πF, "sys"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßsys.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 10: import textwrap
			πF.SetLineno(10)
			if πTemp002, πE = πg.ImportModule(πF, "textwrap"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßtextwrap.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 11: import unittest
			πF.SetLineno(11)
			if πTemp002, πE = πg.ImportModule(πF, "unittest"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßunittest.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 12: import argparse
			πF.SetLineno(12)
			if πTemp002, πE = πg.ImportModule(πF, "argparse"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßargparse.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 15: import StringIO as _StringIO
			πF.SetLineno(15)
			if πTemp002, πE = πg.ImportModule(πF, "StringIO"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ß_StringIO.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 16: StringIO = _StringIO.StringIO
			πF.SetLineno(16)
			if πTemp001, πE = πg.ResolveGlobal(πF, ß_StringIO); πE != nil {
				continue
			}
			if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßStringIO, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßStringIO.ToObject(), πTemp003); πE != nil {
				continue
			}
			// line 18: class StdIOBuffer(StringIO):
			πF.SetLineno(18)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßStringIO); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp004 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("StdIOBuffer", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 19: pass
					πF.SetLineno(19)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("StdIOBuffer").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßStdIOBuffer.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 21: from test import test_support
			πF.SetLineno(21)
			if πTemp002, πE = πg.ImportModule(πF, "test.test_support"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßtest_support.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 23: class TestCase(unittest.TestCase):
			πF.SetLineno(23)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestCase", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 25: def assertEqual(self, obj1, obj2):
					πF.SetLineno(25)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "obj1", Def: nil}
					πTemp002[2] = πg.Param{Name: "obj2", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("assertEqual", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µobj1 *πg.Object = πArgs[1]; _ = µobj1
						var µobj2 *πg.Object = πArgs[2]; _ = µobj2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µobj1, "obj1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µobj2, "obj2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.NE(πF, µobj1, µobj2); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 26: if obj1 != obj2:
							πF.SetLineno(26)
						Label1:
							// line 27: print('')
							πF.SetLineno(27)
							πTemp003 = make([]*πg.Object, 1)
							πTemp003[0] = ß.ToObject()
							if πE = πg.Print(πF, πTemp003, true); πE != nil {
								continue
							}
							// line 28: print(repr(obj1))
							πF.SetLineno(28)
							πTemp003 = make([]*πg.Object, 1)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µobj1, "obj1"); πE != nil {
								continue
							}
							πTemp004[0] = µobj1
							if πTemp001, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[0] = πTemp005
							if πE = πg.Print(πF, πTemp003, true); πE != nil {
								continue
							}
							// line 29: print(repr(obj2))
							πF.SetLineno(29)
							πTemp003 = make([]*πg.Object, 1)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µobj2, "obj2"); πE != nil {
								continue
							}
							πTemp004[0] = µobj2
							if πTemp001, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[0] = πTemp005
							if πE = πg.Print(πF, πTemp003, true); πE != nil {
								continue
							}
							// line 30: print(obj1)
							πF.SetLineno(30)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µobj1, "obj1"); πE != nil {
								continue
							}
							πTemp003[0] = µobj1
							if πE = πg.Print(πF, πTemp003, true); πE != nil {
								continue
							}
							// line 31: print(obj2)
							πF.SetLineno(31)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µobj2, "obj2"); πE != nil {
								continue
							}
							πTemp003[0] = µobj2
							if πE = πg.Print(πF, πTemp003, true); πE != nil {
								continue
							}
							goto Label2
						Label2:
							// line 32: super(TestCase, self).assertEqual(obj1, obj2)
							πF.SetLineno(32)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µobj1, "obj1"); πE != nil {
								continue
							}
							πTemp003[0] = µobj1
							if πE = πg.CheckLocal(πF, µobj2, "obj2"); πE != nil {
								continue
							}
							πTemp003[1] = µobj2
							πTemp004 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp004[1] = µself
							if πTemp001, πE = πg.ResolveGlobal(πF, ßsuper); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp001, πE = πg.GetAttr(πF, πTemp005, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertEqual.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 34: def setUp(self):
					πF.SetLineno(34)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("setUp", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µenv *πg.Object = πg.UnboundLocal; _ = µenv
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 38: env = test_support.EnvironmentVarGuard()
							πF.SetLineno(38)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtest_support); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßEnvironmentVarGuard, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µenv = πTemp001
							// line 39: env.unset("COLUMNS")
							πF.SetLineno(39)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßCOLUMNS.ToObject()
							if πE = πg.CheckLocal(πF, µenv, "env"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µenv, ßunset, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 40: self.addCleanup(env.__exit__)
							πF.SetLineno(40)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µenv, "env"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µenv, ß__exit__, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßaddCleanup, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsetUp.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestCase").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestCase.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 66: class Sig(object):
			πF.SetLineno(66)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp004 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("Sig", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 68: def __init__(self, *args, **kwargs):
					πF.SetLineno(68)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 69: self.args = args
							πF.SetLineno(69)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µargs); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßargs, πTemp001); πE != nil {
								continue
							}
							// line 70: self.kwargs = kwargs
							πF.SetLineno(70)
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µkwargs); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßkwargs, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("Sig").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßSig.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 73: class NS(object):
			πF.SetLineno(73)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp004 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("NS", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 75: def __init__(self, **kwargs):
					πF.SetLineno(75)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µkwargs *πg.Object = πArgs[1]; _ = µkwargs
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 76: self.__dict__.update(kwargs)
							πF.SetLineno(76)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							πTemp001[0] = µkwargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß__dict__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßupdate, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 78: def __repr__(self):
					πF.SetLineno(78)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("__repr__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µsorted_items *πg.Object = πg.UnboundLocal; _ = µsorted_items
						var µkwarg_str *πg.Object = πg.UnboundLocal; _ = µkwarg_str
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []πg.Param
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 79: sorted_items = sorted(self.__dict__.items())
							πF.SetLineno(79)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß__dict__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßitems, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsorted); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µsorted_items = πTemp003
							// line 80: kwarg_str = ', '.join(['%s=%r' % tup for tup in sorted_items])
							πF.SetLineno(80)
							πTemp001 = πF.MakeArgs(1)
							πTemp004 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "build/src/__python__/test/test_argparse.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µtup *πg.Object = πg.UnboundLocal; _ = µtup
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 bool
								_ = πTemp002
								var πTemp003 bool
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1: goto Label1
										case 2: goto Label2
										case 4: goto Label4
										default: panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µsorted_items, "sorted_items"); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, µsorted_items); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp002 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp002 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp003 = !isStop
										} else {
											πTemp003 = true
											µtup = πTemp004
										}
										if πE != nil || !πTemp003 {
											continue
										}
										πF.PushCheckpoint(1)            
										// line 80: kwarg_str = ', '.join(['%s=%r' % tup for tup in sorted_items])
										πF.SetLineno(80)
										if πE = πg.CheckLocal(πF, µtup, "tup"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.Mod(πF, πg.NewStr("%s=%r").ToObject(), µtup); πE != nil {
											continue
										}
										πF.PushCheckpoint(4)
										return πTemp004, nil
									Label4:
										πTemp005 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp005}, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr(", ").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µkwarg_str = πTemp005
							// line 81: return '%s(%s)' % (type(self).__name__, kwarg_str)
							πF.SetLineno(81)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πTemp006, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp006, πE = πg.GetAttr(πF, πTemp007, ß__name__, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwarg_str, "kwarg_str"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(πTemp006, µkwarg_str).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%s(%s)").ToObject(), πTemp005); πE != nil {
								continue
							}
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__repr__.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 83: __hash__ = None
					πF.SetLineno(83)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ß__hash__.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 85: def __eq__(self, other):
					πF.SetLineno(85)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "other", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("__eq__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µother *πg.Object = πArgs[1]; _ = µother
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 87: return self.__dict__ == other.__dict__
							πF.SetLineno(87)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß__dict__, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µother, ß__dict__, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__eq__.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 89: def __ne__(self, other):
					πF.SetLineno(89)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "other", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("__ne__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µother *πg.Object = πArgs[1]; _ = µother
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 90: return not (self == other)
							πF.SetLineno(90)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µself, µother); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__ne__.ToObject(), πTemp005); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("NS").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßNS.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 93: class ArgumentParserError(Exception):
			πF.SetLineno(93)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßException); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp004 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("ArgumentParserError", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 95: def __init__(self, message, stdout=None, stderr=None, error_code=None):
					πF.SetLineno(95)
					πTemp002 = make([]πg.Param, 5)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "message", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "stdout", Def: πTemp003}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[3] = πg.Param{Name: "stderr", Def: πTemp003}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[4] = πg.Param{Name: "error_code", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µmessage *πg.Object = πArgs[1]; _ = µmessage
						var µstdout *πg.Object = πArgs[2]; _ = µstdout
						var µstderr *πg.Object = πArgs[3]; _ = µstderr
						var µerror_code *πg.Object = πArgs[4]; _ = µerror_code
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 96: Exception.__init__(self, message, stdout, stderr)
							πF.SetLineno(96)
							πTemp001 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µmessage, "message"); πE != nil {
								continue
							}
							πTemp001[1] = µmessage
							if πE = πg.CheckLocal(πF, µstdout, "stdout"); πE != nil {
								continue
							}
							πTemp001[2] = µstdout
							if πE = πg.CheckLocal(πF, µstderr, "stderr"); πE != nil {
								continue
							}
							πTemp001[3] = µstderr
							if πTemp002, πE = πg.ResolveGlobal(πF, ßException); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ß__init__, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 97: self.message = message
							πF.SetLineno(97)
							if πE = πg.CheckLocal(πF, µmessage, "message"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µmessage); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßmessage, πTemp002); πE != nil {
								continue
							}
							// line 98: self.stdout = stdout
							πF.SetLineno(98)
							if πE = πg.CheckLocal(πF, µstdout, "stdout"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µstdout); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstdout, πTemp002); πE != nil {
								continue
							}
							// line 99: self.stderr = stderr
							πF.SetLineno(99)
							if πE = πg.CheckLocal(πF, µstderr, "stderr"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µstderr); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstderr, πTemp002); πE != nil {
								continue
							}
							// line 100: self.error_code = error_code
							πF.SetLineno(100)
							if πE = πg.CheckLocal(πF, µerror_code, "error_code"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µerror_code); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßerror_code, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("ArgumentParserError").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßArgumentParserError.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 103: def stderr_to_parser_error(parse_args, *args, **kwargs):
			πF.SetLineno(103)
			πTemp007 = make([]πg.Param, 1)
			πTemp007[0] = πg.Param{Name: "parse_args", Def: nil}
			πTemp001 = πg.NewFunction(πg.NewCode("stderr_to_parser_error", "build/src/__python__/test/test_argparse.py", πTemp007, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µparse_args *πg.Object = πArgs[0]; _ = µparse_args
				var µargs *πg.Object = πArgs[1]; _ = µargs
				var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
				var µstdout *πg.Object = πg.UnboundLocal; _ = µstdout
				var µstderr *πg.Object = πg.UnboundLocal; _ = µstderr
				var µold_stdout *πg.Object = πg.UnboundLocal; _ = µold_stdout
				var µold_stderr *πg.Object = πg.UnboundLocal; _ = µold_stderr
				var µresult *πg.Object = πg.UnboundLocal; _ = µresult
				var µkey *πg.Object = πg.UnboundLocal; _ = µkey
				var µcode *πg.Object = πg.UnboundLocal; _ = µcode
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 bool
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.BaseException
				_ = πTemp006
				var πTemp007 *πg.Traceback
				_ = πTemp007
				var πTemp008 bool
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πR *πg.Object; _ = πR
				var πE *πg.BaseException; _ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					case 15: goto Label15
					case 11: goto Label11
					case 5: goto Label5
					case 14: goto Label14
					case 13: goto Label13
					default: panic("unexpected function state")
					}
					πTemp003 = πF.MakeArgs(2)
					if πTemp004, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßstderr, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp005
					if πTemp004, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
						continue
					}
					πTemp003[1] = πTemp004
					if πTemp004, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					πTemp001 = πTemp005
					if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
						continue
					}
					if πTemp002 {
						goto Label1
					}
					πTemp003 = πF.MakeArgs(2)
					if πTemp004, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßstdout, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp005
					if πTemp004, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
						continue
					}
					πTemp003[1] = πTemp004
					if πTemp004, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					πTemp001 = πTemp005
				Label1:
					if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
						continue
					}
					if πTemp002 {
						goto Label2
					}
					goto Label3
					// line 107: if isinstance(sys.stderr, StdIOBuffer) or isinstance(sys.stdout, StdIOBuffer):
					πF.SetLineno(107)
				Label2:
					// line 109: try:
					πF.SetLineno(109)
					πF.PushCheckpoint(5)
					// line 110: return parse_args(*args, **kwargs)
					πF.SetLineno(110)
					if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Invoke(πF, µparse_args, nil, µargs, nil, µkwargs); πE != nil {
						continue
					}
					πR = πTemp001
					continue
					πF.PopCheckpoint()
					goto Label4
				Label5:
					if πE == nil {
					  continue
					}
					πE = nil
					πTemp006, πTemp007 = πF.ExcInfo()
					if πTemp001, πE = πg.ResolveGlobal(πF, ßSystemExit); πE != nil {
						continue
					}
					if πTemp002, πE = πg.IsInstance(πF, πTemp006.ToObject(), πTemp001); πE != nil {
						continue
					}
					if πTemp002 {
						goto Label6
					}
					πE = πF.Raise(πTemp006.ToObject(), nil, πTemp007.ToObject())
					continue
					// line 111: except SystemExit:
					πF.SetLineno(111)
				Label6:
					// line 112: stdout = stderr = None
					πF.SetLineno(112)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
						continue
					}
					µstdout = πTemp001
					µstderr = πTemp001
					πTemp003 = πF.MakeArgs(2)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstdout, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp004
					if πTemp001, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
						continue
					}
					πTemp003[1] = πTemp001
					if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πTemp002, πE = πg.IsTrue(πF, πTemp004); πE != nil {
						continue
					}
					if πTemp002 {
						goto Label7
					}
					goto Label8
					// line 113: if isinstance(sys.stdout, StdIOBuffer):
					πF.SetLineno(113)
				Label7:
					// line 114: stdout = sys.stdout.getvalue()
					πF.SetLineno(114)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstdout, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßgetvalue, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					µstdout = πTemp004
					// line 115: sys.stdout.truncate(0)
					πF.SetLineno(115)
					πTemp003 = πF.MakeArgs(1)
					πTemp003[0] = πg.NewInt(0).ToObject()
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstdout, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßtruncate, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					goto Label8
				Label8:
					πTemp003 = πF.MakeArgs(2)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstderr, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp004
					if πTemp001, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
						continue
					}
					πTemp003[1] = πTemp001
					if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πTemp002, πE = πg.IsTrue(πF, πTemp004); πE != nil {
						continue
					}
					if πTemp002 {
						goto Label9
					}
					goto Label10
					// line 116: if isinstance(sys.stderr, StdIOBuffer):
					πF.SetLineno(116)
				Label9:
					// line 117: stderr = sys.stderr.getvalue()
					πF.SetLineno(117)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstderr, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßgetvalue, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					µstderr = πTemp004
					// line 118: sys.stderr.truncate(0)
					πF.SetLineno(118)
					πTemp003 = πF.MakeArgs(1)
					πTemp003[0] = πg.NewInt(0).ToObject()
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstderr, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßtruncate, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					goto Label10
				Label10:
					πTemp003 = πF.MakeArgs(3)
					πTemp003[0] = ßSystemExit.ToObject()
					if πE = πg.CheckLocal(πF, µstdout, "stdout"); πE != nil {
						continue
					}
					πTemp003[1] = µstdout
					if πE = πg.CheckLocal(πF, µstderr, "stderr"); πE != nil {
						continue
					}
					πTemp003[2] = µstderr
					if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					// line 119: raise ArgumentParserError("SystemExit", stdout, stderr)
					πF.SetLineno(119)
					πE = πF.Raise(πTemp004, nil, nil)
					continue
					πF.RestoreExc(nil, nil)
					goto Label4
				Label4:
					goto Label3
				Label3:
					// line 123: old_stdout = sys.stdout
					πF.SetLineno(123)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstdout, nil); πE != nil {
						continue
					}
					µold_stdout = πTemp004
					// line 124: old_stderr = sys.stderr
					πF.SetLineno(124)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstderr, nil); πE != nil {
						continue
					}
					µold_stderr = πTemp004
					// line 125: sys.stdout = StdIOBuffer()
					πF.SetLineno(125)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp004); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp005, ßstdout, πTemp001); πE != nil {
						continue
					}
					// line 126: sys.stderr = StdIOBuffer()
					πF.SetLineno(126)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp004); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp005, ßstderr, πTemp001); πE != nil {
						continue
					}
					// line 127: try:
					πF.SetLineno(127)
					πF.PushCheckpoint(11)
					// line 128: try:
					πF.SetLineno(128)
					πF.PushCheckpoint(13)
					// line 129: result = parse_args(*args, **kwargs)
					πF.SetLineno(129)
					if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Invoke(πF, µparse_args, nil, µargs, nil, µkwargs); πE != nil {
						continue
					}
					µresult = πTemp001
					if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, µresult, ß__dict__, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
						continue
					}
					πF.PushCheckpoint(15)
					πTemp002 = false
				Label14:
					if πE != nil || πR != nil {
						continue
					}
					if πTemp002 {
						πF.PopCheckpoint()
						goto Label16
					}
					if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
						isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
						if exc != nil {
							πE = exc
						} else if isStop {
							πE = nil
							πF.RestoreExc(nil, nil)
						}
						πTemp008 = !isStop
					} else {
						πTemp008 = true
						µkey = πTemp004
					}
					if πE != nil || !πTemp008 {
						continue
					}
					πF.PushCheckpoint(14)            
					πTemp003 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
						continue
					}
					πTemp003[0] = µresult
					if πE = πg.CheckLocal(πF, µkey, "key"); πE != nil {
						continue
					}
					πTemp003[1] = µkey
					if πTemp005, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πTemp005, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp005, ßstdout, nil); πE != nil {
						continue
					}
					πTemp004 = πg.GetBool(πTemp009 == πTemp010).ToObject()
					if πTemp008, πE = πg.IsTrue(πF, πTemp004); πE != nil {
						continue
					}
					if πTemp008 {
						goto Label17
					}
					goto Label18
					// line 132: if getattr(result, key) is sys.stdout:
					πF.SetLineno(132)
				Label17:
					// line 133: setattr(result, key, old_stdout)
					πF.SetLineno(133)
					πTemp003 = πF.MakeArgs(3)
					if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
						continue
					}
					πTemp003[0] = µresult
					if πE = πg.CheckLocal(πF, µkey, "key"); πE != nil {
						continue
					}
					πTemp003[1] = µkey
					if πE = πg.CheckLocal(πF, µold_stdout, "old_stdout"); πE != nil {
						continue
					}
					πTemp003[2] = µold_stdout
					if πTemp004, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					goto Label18
				Label18:
					πTemp003 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
						continue
					}
					πTemp003[0] = µresult
					if πE = πg.CheckLocal(πF, µkey, "key"); πE != nil {
						continue
					}
					πTemp003[1] = µkey
					if πTemp005, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πTemp005, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp005, ßstderr, nil); πE != nil {
						continue
					}
					πTemp004 = πg.GetBool(πTemp009 == πTemp010).ToObject()
					if πTemp008, πE = πg.IsTrue(πF, πTemp004); πE != nil {
						continue
					}
					if πTemp008 {
						goto Label19
					}
					goto Label20
					// line 134: if getattr(result, key) is sys.stderr:
					πF.SetLineno(134)
				Label19:
					// line 135: setattr(result, key, old_stderr)
					πF.SetLineno(135)
					πTemp003 = πF.MakeArgs(3)
					if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
						continue
					}
					πTemp003[0] = µresult
					if πE = πg.CheckLocal(πF, µkey, "key"); πE != nil {
						continue
					}
					πTemp003[1] = µkey
					if πE = πg.CheckLocal(πF, µold_stderr, "old_stderr"); πE != nil {
						continue
					}
					πTemp003[2] = µold_stderr
					if πTemp004, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					goto Label20
				Label20:
					continue
				Label15:
					if πE != nil || πR != nil {
						continue
					}
				Label16:
					// line 136: return result
					πF.SetLineno(136)
					if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
						continue
					}
					πR = µresult
					continue
					πF.PopCheckpoint()
					goto Label12
				Label13:
					if πE == nil {
					  continue
					}
					πE = nil
					πTemp006, πTemp007 = πF.ExcInfo()
					if πTemp001, πE = πg.ResolveGlobal(πF, ßSystemExit); πE != nil {
						continue
					}
					if πTemp002, πE = πg.IsInstance(πF, πTemp006.ToObject(), πTemp001); πE != nil {
						continue
					}
					if πTemp002 {
						goto Label21
					}
					πE = πF.Raise(πTemp006.ToObject(), nil, πTemp007.ToObject())
					continue
					// line 137: except SystemExit:
					πF.SetLineno(137)
				Label21:
					// line 138: code = sys.exc_info()[1].code
					πF.SetLineno(138)
					πTemp001 = πg.NewInt(1).ToObject()
					if πTemp005, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp009, πE = πg.GetAttr(πF, πTemp005, ßexc_info, nil); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp009.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßcode, nil); πE != nil {
						continue
					}
					µcode = πTemp001
					// line 139: stdout = sys.stdout.getvalue()
					πF.SetLineno(139)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstdout, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßgetvalue, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					µstdout = πTemp004
					// line 140: stderr = sys.stderr.getvalue()
					πF.SetLineno(140)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßstderr, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßgetvalue, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					µstderr = πTemp004
					πTemp003 = πF.MakeArgs(4)
					πTemp003[0] = ßSystemExit.ToObject()
					if πE = πg.CheckLocal(πF, µstdout, "stdout"); πE != nil {
						continue
					}
					πTemp003[1] = µstdout
					if πE = πg.CheckLocal(πF, µstderr, "stderr"); πE != nil {
						continue
					}
					πTemp003[2] = µstderr
					if πE = πg.CheckLocal(πF, µcode, "code"); πE != nil {
						continue
					}
					πTemp003[3] = µcode
					if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					// line 141: raise ArgumentParserError("SystemExit", stdout, stderr, code)
					πF.SetLineno(141)
					πE = πF.Raise(πTemp004, nil, nil)
					continue
					πF.RestoreExc(nil, nil)
					goto Label12
				Label12:
					πF.PopCheckpoint()
					goto Label11
				Label11:
					πTemp006, πTemp007 = πF.RestoreExc(nil, nil)
					// line 143: sys.stdout = old_stdout
					πF.SetLineno(143)
					if πE = πg.CheckLocal(πF, µold_stdout, "old_stdout"); πE != nil {
						continue
					}
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µold_stdout); πE != nil {
						continue
					}
					if πTemp004, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp004, ßstdout, πTemp001); πE != nil {
						continue
					}
					// line 144: sys.stderr = old_stderr
					πF.SetLineno(144)
					if πE = πg.CheckLocal(πF, µold_stderr, "old_stderr"); πE != nil {
						continue
					}
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µold_stderr); πE != nil {
						continue
					}
					if πTemp004, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp004, ßstderr, πTemp001); πE != nil {
						continue
					}
					if πTemp006 != nil {
						πE = πF.Raise(πTemp006.ToObject(), nil, πTemp007.ToObject())
						continue
					}
					if πR != nil {
						continue
					}
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßstderr_to_parser_error.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 147: class ErrorRaisingArgumentParser(argparse.ArgumentParser):
			πF.SetLineno(147)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
				continue
			}
			if πTemp008, πE = πg.GetAttr(πF, πTemp006, ßArgumentParser, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp008
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("ErrorRaisingArgumentParser", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 149: def parse_args(self, *args, **kwargs):
					πF.SetLineno(149)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("parse_args", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var µparse_args *πg.Object = πg.UnboundLocal; _ = µparse_args
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 150: parse_args = super(ErrorRaisingArgumentParser, self).parse_args
							πF.SetLineno(150)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[1] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsuper); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							µparse_args = πTemp002
							// line 151: return stderr_to_parser_error(parse_args, *args, **kwargs)
							πF.SetLineno(151)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp001[0] = µparse_args
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstderr_to_parser_error); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, πTemp001, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßparse_args.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 153: def exit(self, *args, **kwargs):
					πF.SetLineno(153)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("exit", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var µexit *πg.Object = πg.UnboundLocal; _ = µexit
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 154: exit = super(ErrorRaisingArgumentParser, self).exit
							πF.SetLineno(154)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[1] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsuper); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßexit, nil); πE != nil {
								continue
							}
							µexit = πTemp002
							// line 155: return stderr_to_parser_error(exit, *args, **kwargs)
							πF.SetLineno(155)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µexit, "exit"); πE != nil {
								continue
							}
							πTemp001[0] = µexit
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstderr_to_parser_error); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, πTemp001, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßexit.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 157: def error(self, *args, **kwargs):
					πF.SetLineno(157)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("error", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var µerror *πg.Object = πg.UnboundLocal; _ = µerror
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 158: error = super(ErrorRaisingArgumentParser, self).error
							πF.SetLineno(158)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[1] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsuper); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßerror, nil); πE != nil {
								continue
							}
							µerror = πTemp002
							// line 159: return stderr_to_parser_error(error, *args, **kwargs)
							πF.SetLineno(159)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µerror, "error"); πE != nil {
								continue
							}
							πTemp001[0] = µerror
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstderr_to_parser_error); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, πTemp001, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßerror.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("ErrorRaisingArgumentParser").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßErrorRaisingArgumentParser.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 162: class ParserTesterMetaclass(type):
			πF.SetLineno(162)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("ParserTesterMetaclass", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 163: """Adds parser tests using the class attributes.
					πF.SetLineno(163)
					// line 178: def __init__(cls, name, bases, bodydict):
					πF.SetLineno(178)
					πTemp002 = make([]πg.Param, 4)
					πTemp002[0] = πg.Param{Name: "cls", Def: nil}
					πTemp002[1] = πg.Param{Name: "name", Def: nil}
					πTemp002[2] = πg.Param{Name: "bases", Def: nil}
					πTemp002[3] = πg.Param{Name: "bodydict", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µcls *πg.Object = πArgs[0]; _ = µcls
						var µname *πg.Object = πArgs[1]; _ = µname
						var µbases *πg.Object = πArgs[2]; _ = µbases
						var µbodydict *πg.Object = πArgs[3]; _ = µbodydict
						var µno_groups *πg.Object = πg.UnboundLocal; _ = µno_groups
						var µone_group *πg.Object = πg.UnboundLocal; _ = µone_group
						var µmany_groups *πg.Object = πg.UnboundLocal; _ = µmany_groups
						var µlistargs *πg.Object = πg.UnboundLocal; _ = µlistargs
						var µsysargs *πg.Object = πg.UnboundLocal; _ = µsysargs
						var µAddTests *πg.Object = πg.UnboundLocal; _ = µAddTests
						var µadd_arguments *πg.Object = πg.UnboundLocal; _ = µadd_arguments
						var µparse_args *πg.Object = πg.UnboundLocal; _ = µparse_args
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []πg.Param
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Dict
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πTemp013 bool
						_ = πTemp013
						var πTemp014 bool
						_ = πTemp014
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 8: goto Label8
							case 10: goto Label10
							case 11: goto Label11
							case 7: goto Label7
							default: panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µname, ßParserTestCase.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 179: if name == 'ParserTestCase':
							πF.SetLineno(179)
						Label1:
							// line 180: return
							πF.SetLineno(180)
							πR = πg.None
							continue
							goto Label2
						Label2:
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							πTemp003[0] = µcls
							πTemp003[1] = ßparser_signature.ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßhasattr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp002, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label3
							}
							goto Label4
							// line 183: if not hasattr(cls, 'parser_signature'):
							πF.SetLineno(183)
						Label3:
							// line 184: cls.parser_signature = Sig()
							πF.SetLineno(184)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSig); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µcls, ßparser_signature, πTemp001); πE != nil {
								continue
							}
							goto Label4
						Label4:
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							πTemp003[0] = µcls
							πTemp003[1] = ßparser_class.ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßhasattr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp002, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label5
							}
							goto Label6
							// line 185: if not hasattr(cls, 'parser_class'):
							πF.SetLineno(185)
						Label5:
							// line 186: cls.parser_class = ErrorRaisingArgumentParser
							πF.SetLineno(186)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µcls, ßparser_class, πTemp004); πE != nil {
								continue
							}
							goto Label6
						Label6:
							// line 191: def no_groups(parser, argument_signatures):
							πF.SetLineno(191)
							πTemp006 = make([]πg.Param, 2)
							πTemp006[0] = πg.Param{Name: "parser", Def: nil}
							πTemp006[1] = πg.Param{Name: "argument_signatures", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("no_groups", "build/src/__python__/test/test_argparse.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µparser *πg.Object = πArgs[0]; _ = µparser
								var µargument_signatures *πg.Object = πArgs[1]; _ = µargument_signatures
								var µsig *πg.Object = πg.UnboundLocal; _ = µsig
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 bool
								_ = πTemp002
								var πTemp003 bool
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									case 1: goto Label1
									case 2: goto Label2
									default: panic("unexpected function state")
									}
									// line 192: """Add all arguments directly to the parser"""
									πF.SetLineno(192)
									if πE = πg.CheckLocal(πF, µargument_signatures, "argument_signatures"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Iter(πF, µargument_signatures); πE != nil {
										continue
									}
									πF.PushCheckpoint(2)
									πTemp002 = false
								Label1:
									if πE != nil || πR != nil {
										continue
									}
									if πTemp002 {
										πF.PopCheckpoint()
										goto Label3
									}
									if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
										isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
										if exc != nil {
											πE = exc
										} else if isStop {
											πE = nil
											πF.RestoreExc(nil, nil)
										}
										πTemp003 = !isStop
									} else {
										πTemp003 = true
										µsig = πTemp004
									}
									if πE != nil || !πTemp003 {
										continue
									}
									πF.PushCheckpoint(1)            
									// line 194: parser.add_argument(*sig.args, **sig.kwargs)
									πF.SetLineno(194)
									if πE = πg.CheckLocal(πF, µsig, "sig"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µsig, ßargs, nil); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µsig, "sig"); πE != nil {
										continue
									}
									if πTemp005, πE = πg.GetAttr(πF, µsig, ßkwargs, nil); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
										continue
									}
									if πTemp006, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
										continue
									}
									if πTemp007, πE = πg.Invoke(πF, πTemp006, nil, πTemp004, nil, πTemp005); πE != nil {
										continue
									}
									continue
								Label2:
									if πE != nil || πR != nil {
										continue
									}
								Label3:
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µno_groups = πTemp001
							// line 196: def one_group(parser, argument_signatures):
							πF.SetLineno(196)
							πTemp006 = make([]πg.Param, 2)
							πTemp006[0] = πg.Param{Name: "parser", Def: nil}
							πTemp006[1] = πg.Param{Name: "argument_signatures", Def: nil}
							πTemp004 = πg.NewFunction(πg.NewCode("one_group", "build/src/__python__/test/test_argparse.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µparser *πg.Object = πArgs[0]; _ = µparser
								var µargument_signatures *πg.Object = πArgs[1]; _ = µargument_signatures
								var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
								var µsig *πg.Object = πg.UnboundLocal; _ = µsig
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								var πTemp008 *πg.Object
								_ = πTemp008
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									case 1: goto Label1
									case 2: goto Label2
									default: panic("unexpected function state")
									}
									// line 197: """Add all arguments under a single group in the parser"""
									πF.SetLineno(197)
									// line 198: group = parser.add_argument_group('foo')
									πF.SetLineno(198)
									πTemp001 = πF.MakeArgs(1)
									πTemp001[0] = ßfoo.ToObject()
									if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									µgroup = πTemp003
									if πE = πg.CheckLocal(πF, µargument_signatures, "argument_signatures"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Iter(πF, µargument_signatures); πE != nil {
										continue
									}
									πF.PushCheckpoint(2)
									πTemp004 = false
								Label1:
									if πE != nil || πR != nil {
										continue
									}
									if πTemp004 {
										πF.PopCheckpoint()
										goto Label3
									}
									if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
										isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
										if exc != nil {
											πE = exc
										} else if isStop {
											πE = nil
											πF.RestoreExc(nil, nil)
										}
										πTemp005 = !isStop
									} else {
										πTemp005 = true
										µsig = πTemp003
									}
									if πE != nil || !πTemp005 {
										continue
									}
									πF.PushCheckpoint(1)            
									// line 200: group.add_argument(*sig.args, **sig.kwargs)
									πF.SetLineno(200)
									if πE = πg.CheckLocal(πF, µsig, "sig"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.GetAttr(πF, µsig, ßargs, nil); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µsig, "sig"); πE != nil {
										continue
									}
									if πTemp006, πE = πg.GetAttr(πF, µsig, ßkwargs, nil); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
										continue
									}
									if πTemp007, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
										continue
									}
									if πTemp008, πE = πg.Invoke(πF, πTemp007, nil, πTemp003, nil, πTemp006); πE != nil {
										continue
									}
									continue
								Label2:
									if πE != nil || πR != nil {
										continue
									}
								Label3:
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µone_group = πTemp004
							// line 202: def many_groups(parser, argument_signatures):
							πF.SetLineno(202)
							πTemp006 = make([]πg.Param, 2)
							πTemp006[0] = πg.Param{Name: "parser", Def: nil}
							πTemp006[1] = πg.Param{Name: "argument_signatures", Def: nil}
							πTemp005 = πg.NewFunction(πg.NewCode("many_groups", "build/src/__python__/test/test_argparse.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µparser *πg.Object = πArgs[0]; _ = µparser
								var µargument_signatures *πg.Object = πArgs[1]; _ = µargument_signatures
								var µi *πg.Object = πg.UnboundLocal; _ = µi
								var µsig *πg.Object = πg.UnboundLocal; _ = µsig
								var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []*πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								var πTemp008 *πg.Object
								_ = πTemp008
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									case 1: goto Label1
									case 2: goto Label2
									default: panic("unexpected function state")
									}
									// line 203: """Add each argument in its own group to the parser"""
									πF.SetLineno(203)
									πTemp002 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µargument_signatures, "argument_signatures"); πE != nil {
										continue
									}
									πTemp002[0] = µargument_signatures
									if πTemp003, πE = πg.ResolveGlobal(πF, ßenumerate); πE != nil {
										continue
									}
									if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp002)
									if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
										continue
									}
									πF.PushCheckpoint(2)
									πTemp005 = false
								Label1:
									if πE != nil || πR != nil {
										continue
									}
									if πTemp005 {
										πF.PopCheckpoint()
										goto Label3
									}
									if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
										isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
										if exc != nil {
											πE = exc
										} else if isStop {
											πE = nil
											πF.RestoreExc(nil, nil)
										}
										πTemp006 = !isStop
									} else {
										πTemp006 = true
										if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
											continue
										}
										µi = πTemp004
										µsig = πTemp007
									}
									if πE != nil || !πTemp006 {
										continue
									}
									πF.PushCheckpoint(1)            
									// line 206: group = parser.add_argument_group('foo:%d' % i)
									πF.SetLineno(206)
									πTemp002 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.Mod(πF, πg.NewStr("foo:%d").ToObject(), µi); πE != nil {
										continue
									}
									πTemp002[0] = πTemp003
									if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
										continue
									}
									if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp002)
									µgroup = πTemp004
									// line 207: group.add_argument(*sig.args, **sig.kwargs)
									πF.SetLineno(207)
									if πE = πg.CheckLocal(πF, µsig, "sig"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.GetAttr(πF, µsig, ßargs, nil); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µsig, "sig"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µsig, ßkwargs, nil); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
										continue
									}
									if πTemp007, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
										continue
									}
									if πTemp008, πE = πg.Invoke(πF, πTemp007, nil, πTemp003, nil, πTemp004); πE != nil {
										continue
									}
									continue
								Label2:
									if πE != nil || πR != nil {
										continue
									}
								Label3:
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µmany_groups = πTemp005
							// line 212: def listargs(parser, args):
							πF.SetLineno(212)
							πTemp006 = make([]πg.Param, 2)
							πTemp006[0] = πg.Param{Name: "parser", Def: nil}
							πTemp006[1] = πg.Param{Name: "args", Def: nil}
							πTemp007 = πg.NewFunction(πg.NewCode("listargs", "build/src/__python__/test/test_argparse.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µparser *πg.Object = πArgs[0]; _ = µparser
								var µargs *πg.Object = πArgs[1]; _ = µargs
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 213: """Parse the args by passing in a list"""
									πF.SetLineno(213)
									// line 214: return parser.parse_args(args)
									πF.SetLineno(214)
									πTemp001 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
										continue
									}
									πTemp001[0] = µargs
									if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									πR = πTemp003
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µlistargs = πTemp007
							// line 216: def sysargs(parser, args):
							πF.SetLineno(216)
							πTemp006 = make([]πg.Param, 2)
							πTemp006[0] = πg.Param{Name: "parser", Def: nil}
							πTemp006[1] = πg.Param{Name: "args", Def: nil}
							πTemp008 = πg.NewFunction(πg.NewCode("sysargs", "build/src/__python__/test/test_argparse.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µparser *πg.Object = πArgs[0]; _ = µparser
								var µargs *πg.Object = πArgs[1]; _ = µargs
								var µold_sys_argv *πg.Object = πg.UnboundLocal; _ = µold_sys_argv
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 []*πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.BaseException
								_ = πTemp005
								var πTemp006 *πg.Traceback
								_ = πTemp006
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									case 1: goto Label1
									default: panic("unexpected function state")
									}
									// line 217: """Parse the args by defaulting to sys.argv"""
									πF.SetLineno(217)
									// line 218: old_sys_argv = sys.argv
									πF.SetLineno(218)
									if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßargv, nil); πE != nil {
										continue
									}
									µold_sys_argv = πTemp002
									// line 219: sys.argv = [old_sys_argv[0]] + args
									πF.SetLineno(219)
									πTemp003 = make([]*πg.Object, 1)
									πTemp002 = πg.NewInt(0).ToObject()
									if πE = πg.CheckLocal(πF, µold_sys_argv, "old_sys_argv"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetItem(πF, µold_sys_argv, πTemp002); πE != nil {
										continue
									}
									πTemp003[0] = πTemp004
									πTemp002 = πg.NewList(πTemp003...).ToObject()
									if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, πTemp002, µargs); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
										continue
									}
									if πTemp004, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, πTemp004, ßargv, πTemp002); πE != nil {
										continue
									}
									// line 220: try:
									πF.SetLineno(220)
									πF.PushCheckpoint(1)
									// line 221: return parser.parse_args()
									πF.SetLineno(221)
									if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
										continue
									}
									πR = πTemp002
									continue
									πF.PopCheckpoint()
									goto Label1
								Label1:
									πTemp005, πTemp006 = πF.RestoreExc(nil, nil)
									// line 223: sys.argv = old_sys_argv
									πF.SetLineno(223)
									if πE = πg.CheckLocal(πF, µold_sys_argv, "old_sys_argv"); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µold_sys_argv); πE != nil {
										continue
									}
									if πTemp002, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, πTemp002, ßargv, πTemp001); πE != nil {
										continue
									}
									if πTemp005 != nil {
										πE = πF.Raise(πTemp005.ToObject(), nil, πTemp006.ToObject())
										continue
									}
									if πR != nil {
										continue
									}
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µsysargs = πTemp008
							// line 227: class AddTests(object):
							πF.SetLineno(227)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp012, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
								continue
							}
							πTemp003[0] = πTemp012
							πTemp009 = πg.NewDict()
							if πTemp010, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp009.SetItem(πF, ß__module__.ToObject(), πTemp010); πE != nil {
								continue
							}
							_, πE = πg.NewCode("AddTests", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp009
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 229: def __init__(self, tester_cls, add_arguments, parse_args):
									πF.SetLineno(229)
									πTemp002 = make([]πg.Param, 4)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester_cls", Def: nil}
									πTemp002[2] = πg.Param{Name: "add_arguments", Def: nil}
									πTemp002[3] = πg.Param{Name: "parse_args", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester_cls *πg.Object = πArgs[1]; _ = µtester_cls
										var µadd_arguments *πg.Object = πArgs[2]; _ = µadd_arguments
										var µparse_args *πg.Object = πArgs[3]; _ = µparse_args
										var µadd_arguments_name *πg.Object = πg.UnboundLocal; _ = µadd_arguments_name
										var µparse_args_name *πg.Object = πg.UnboundLocal; _ = µparse_args_name
										var µtest_func *πg.Object = πg.UnboundLocal; _ = µtest_func
										var µfunc_name *πg.Object = πg.UnboundLocal; _ = µfunc_name
										var µnames *πg.Object = πg.UnboundLocal; _ = µnames
										var µtest_name *πg.Object = πg.UnboundLocal; _ = µtest_name
										var µwrapper *πg.Object = πg.UnboundLocal; _ = µwrapper
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 bool
										_ = πTemp005
										var πTemp006 *πg.Object
										_ = πTemp006
										var πTemp007 []πg.Param
										_ = πTemp007
										var πTemp008 *πg.Object
										_ = πTemp008
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											case 1: goto Label1
											case 2: goto Label2
											default: panic("unexpected function state")
											}
											// line 230: self._add_arguments = add_arguments
											πF.SetLineno(230)
											if πE = πg.CheckLocal(πF, µadd_arguments, "add_arguments"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µadd_arguments); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ß_add_arguments, πTemp001); πE != nil {
												continue
											}
											// line 231: self._parse_args = parse_args
											πF.SetLineno(231)
											if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µparse_args); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ß_parse_args, πTemp001); πE != nil {
												continue
											}
											// line 233: add_arguments_name = self._add_arguments.__name__
											πF.SetLineno(233)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ß_add_arguments, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ß__name__, nil); πE != nil {
												continue
											}
											µadd_arguments_name = πTemp002
											// line 234: parse_args_name = self._parse_args.__name__
											πF.SetLineno(234)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ß_parse_args, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ß__name__, nil); πE != nil {
												continue
											}
											µparse_args_name = πTemp002
											πTemp003 = make([]*πg.Object, 2)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßtest_failures, nil); πE != nil {
												continue
											}
											πTemp003[0] = πTemp002
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßtest_successes, nil); πE != nil {
												continue
											}
											πTemp003[1] = πTemp002
											πTemp002 = πg.NewList(πTemp003...).ToObject()
											if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
												continue
											}
											πF.PushCheckpoint(2)
											πTemp004 = false
										Label1:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp004 {
												πF.PopCheckpoint()
												goto Label3
											}
											if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp005 = !isStop
											} else {
												πTemp005 = true
												µtest_func = πTemp002
											}
											if πE != nil || !πTemp005 {
												continue
											}
											πF.PushCheckpoint(1)            
											// line 236: func_name = test_func.__name__
											πF.SetLineno(236)
											if πE = πg.CheckLocal(πF, µtest_func, "test_func"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µtest_func, ß__name__, nil); πE != nil {
												continue
											}
											µfunc_name = πTemp002
											// line 237: names = func_name, add_arguments_name, parse_args_name
											πF.SetLineno(237)
											if πE = πg.CheckLocal(πF, µfunc_name, "func_name"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µadd_arguments_name, "add_arguments_name"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µparse_args_name, "parse_args_name"); πE != nil {
												continue
											}
											πTemp002 = πg.NewTuple3(µfunc_name, µadd_arguments_name, µparse_args_name).ToObject()
											µnames = πTemp002
											// line 238: test_name = '_'.join(names)
											πF.SetLineno(238)
											πTemp003 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µnames, "names"); πE != nil {
												continue
											}
											πTemp003[0] = µnames
											if πTemp002, πE = πg.GetAttr(πF, ß_.ToObject(), ßjoin, nil); πE != nil {
												continue
											}
											if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µtest_name = πTemp006
											// line 240: def wrapper(self, test_func=test_func):
											πF.SetLineno(240)
											πTemp007 = make([]πg.Param, 2)
											πTemp007[0] = πg.Param{Name: "self", Def: nil}
											if πE = πg.CheckLocal(πF, µtest_func, "test_func"); πE != nil {
												continue
											}
											πTemp007[1] = πg.Param{Name: "test_func", Def: µtest_func}
											πTemp002 = πg.NewFunction(πg.NewCode("wrapper", "build/src/__python__/test/test_argparse.py", πTemp007, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
												var µself *πg.Object = πArgs[0]; _ = µself
												var µtest_func *πg.Object = πArgs[1]; _ = µtest_func
												var πTemp001 []*πg.Object
												_ = πTemp001
												var πTemp002 *πg.Object
												_ = πTemp002
												var πR *πg.Object; _ = πR
												var πE *πg.BaseException; _ = πE
												for ; πF.State() >= 0; πF.PopCheckpoint() {
													switch πF.State() {
													case 0:
													default: panic("unexpected function state")
													}
													// line 241: test_func(self)
													πF.SetLineno(241)
													πTemp001 = πF.MakeArgs(1)
													if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
														continue
													}
													πTemp001[0] = µself
													if πE = πg.CheckLocal(πF, µtest_func, "test_func"); πE != nil {
														continue
													}
													if πTemp002, πE = µtest_func.Call(πF, πTemp001, nil); πE != nil {
														continue
													}
													πF.FreeArgs(πTemp001)
												}
												if πE != nil {
													πR = nil
												} else if πR == nil {
													πR = πg.None
												}
												return πR, πE
											}), πF.Globals()).ToObject()
											µwrapper = πTemp002
											// line 246: setattr(tester_cls, test_name, wrapper)
											πF.SetLineno(246)
											πTemp003 = πF.MakeArgs(3)
											if πE = πg.CheckLocal(πF, µtester_cls, "tester_cls"); πE != nil {
												continue
											}
											πTemp003[0] = µtester_cls
											if πE = πg.CheckLocal(πF, µtest_name, "test_name"); πE != nil {
												continue
											}
											πTemp003[1] = µtest_name
											if πE = πg.CheckLocal(πF, µwrapper, "wrapper"); πE != nil {
												continue
											}
											πTemp003[2] = µwrapper
											if πTemp006, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
												continue
											}
											if πTemp008, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											continue
										Label2:
											if πE != nil || πR != nil {
												continue
											}
										Label3:
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 248: def _get_parser(self, tester):
									πF.SetLineno(248)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("_get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µargs *πg.Object = πg.UnboundLocal; _ = µargs
										var µkwargs *πg.Object = πg.UnboundLocal; _ = µkwargs
										var µparser *πg.Object = πg.UnboundLocal; _ = µparser
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 249: args = tester.parser_signature.args
											πF.SetLineno(249)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtester, ßparser_signature, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßargs, nil); πE != nil {
												continue
											}
											µargs = πTemp002
											// line 250: kwargs = tester.parser_signature.kwargs
											πF.SetLineno(250)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtester, ßparser_signature, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßkwargs, nil); πE != nil {
												continue
											}
											µkwargs = πTemp002
											// line 251: parser = tester.parser_class(*args, **kwargs)
											πF.SetLineno(251)
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtester, ßparser_class, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Invoke(πF, πTemp001, nil, µargs, nil, µkwargs); πE != nil {
												continue
											}
											µparser = πTemp002
											// line 252: self._add_arguments(parser, tester.argument_signatures)
											πF.SetLineno(252)
											πTemp003 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											πTemp003[0] = µparser
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtester, ßargument_signatures, nil); πE != nil {
												continue
											}
											πTemp003[1] = πTemp001
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ß_add_arguments, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											// line 253: return parser
											πF.SetLineno(253)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											πR = µparser
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß_get_parser.ToObject(), πTemp003); πE != nil {
										continue
									}
									// line 255: def test_failures(self, tester):
									πF.SetLineno(255)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp004 = πg.NewFunction(πg.NewCode("test_failures", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µparser *πg.Object = πg.UnboundLocal; _ = µparser
										var µargs_str *πg.Object = πg.UnboundLocal; _ = µargs_str
										var µargs *πg.Object = πg.UnboundLocal; _ = µargs
										var µraises *πg.Object = πg.UnboundLocal; _ = µraises
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 bool
										_ = πTemp005
										var πTemp006 *πg.Object
										_ = πTemp006
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											case 1: goto Label1
											case 2: goto Label2
											default: panic("unexpected function state")
											}
											// line 256: parser = self._get_parser(tester)
											πF.SetLineno(256)
											πTemp001 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µparser = πTemp003
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µtester, ßfailures, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
												continue
											}
											πF.PushCheckpoint(2)
											πTemp004 = false
										Label1:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp004 {
												πF.PopCheckpoint()
												goto Label3
											}
											if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp005 = !isStop
											} else {
												πTemp005 = true
												µargs_str = πTemp003
											}
											if πE != nil || !πTemp005 {
												continue
											}
											πF.PushCheckpoint(1)            
											// line 258: args = args_str.split()
											πF.SetLineno(258)
											if πE = πg.CheckLocal(πF, µargs_str, "args_str"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µargs_str, ßsplit, nil); πE != nil {
												continue
											}
											if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
												continue
											}
											µargs = πTemp006
											// line 259: raises = tester.assertRaises
											πF.SetLineno(259)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µtester, ßassertRaises, nil); πE != nil {
												continue
											}
											µraises = πTemp003
											// line 260: raises(ArgumentParserError, parser.parse_args, args)
											πF.SetLineno(260)
											πTemp001 = πF.MakeArgs(3)
											if πTemp003, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
												continue
											}
											πTemp001[0] = πTemp003
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp003
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											πTemp001[2] = µargs
											if πE = πg.CheckLocal(πF, µraises, "raises"); πE != nil {
												continue
											}
											if πTemp003, πE = µraises.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											continue
										Label2:
											if πE != nil || πR != nil {
												continue
											}
										Label3:
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtest_failures.ToObject(), πTemp004); πE != nil {
										continue
									}
									// line 262: def test_successes(self, tester):
									πF.SetLineno(262)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp005 = πg.NewFunction(πg.NewCode("test_successes", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µparser *πg.Object = πg.UnboundLocal; _ = µparser
										var µargs *πg.Object = πg.UnboundLocal; _ = µargs
										var µexpected_ns *πg.Object = πg.UnboundLocal; _ = µexpected_ns
										var µresult_ns *πg.Object = πg.UnboundLocal; _ = µresult_ns
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 bool
										_ = πTemp005
										var πTemp006 *πg.Object
										_ = πTemp006
										var πTemp007 *πg.Object
										_ = πTemp007
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											case 1: goto Label1
											case 2: goto Label2
											default: panic("unexpected function state")
											}
											// line 263: parser = self._get_parser(tester)
											πF.SetLineno(263)
											πTemp001 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µparser = πTemp003
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µtester, ßsuccesses, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
												continue
											}
											πF.PushCheckpoint(2)
											πTemp004 = false
										Label1:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp004 {
												πF.PopCheckpoint()
												goto Label3
											}
											if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp005 = !isStop
											} else {
												πTemp005 = true
												if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
													continue
												}
												µargs = πTemp006
												µexpected_ns = πTemp007
											}
											if πE != nil || !πTemp005 {
												continue
											}
											πF.PushCheckpoint(1)            
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											πTemp001[0] = µargs
											if πTemp003, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
												continue
											}
											πTemp001[1] = πTemp003
											if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
												continue
											}
											if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											if πTemp005, πE = πg.IsTrue(πF, πTemp006); πE != nil {
												continue
											}
											if πTemp005 {
												goto Label4
											}
											goto Label5
											// line 265: if isinstance(args, str):
											πF.SetLineno(265)
										Label4:
											// line 266: args = args.split()
											πF.SetLineno(266)
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µargs, ßsplit, nil); πE != nil {
												continue
											}
											if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
												continue
											}
											µargs = πTemp006
											goto Label5
										Label5:
											// line 267: result_ns = self._parse_args(parser, args)
											πF.SetLineno(267)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											πTemp001[0] = µparser
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											πTemp001[1] = µargs
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ß_parse_args, nil); πE != nil {
												continue
											}
											if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µresult_ns = πTemp006
											// line 268: tester.assertEqual(expected_ns, result_ns)
											πF.SetLineno(268)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
												continue
											}
											πTemp001[0] = µexpected_ns
											if πE = πg.CheckLocal(πF, µresult_ns, "result_ns"); πE != nil {
												continue
											}
											πTemp001[1] = µresult_ns
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µtester, ßassertEqual, nil); πE != nil {
												continue
											}
											if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											continue
										Label2:
											if πE != nil || πR != nil {
												continue
											}
										Label3:
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtest_successes.ToObject(), πTemp005); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp011, πE = πTemp009.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp011 == nil {
								πTemp011 = πg.TypeType.ToObject()
							}
							if πTemp012, πE = πTemp011.Call(πF, []*πg.Object{πg.NewStr("AddTests").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp009.ToObject()}, nil); πE != nil {
								continue
							}
							µAddTests = πTemp012
							πTemp003 = make([]*πg.Object, 3)
							if πE = πg.CheckLocal(πF, µno_groups, "no_groups"); πE != nil {
								continue
							}
							πTemp003[0] = µno_groups
							if πE = πg.CheckLocal(πF, µone_group, "one_group"); πE != nil {
								continue
							}
							πTemp003[1] = µone_group
							if πE = πg.CheckLocal(πF, µmany_groups, "many_groups"); πE != nil {
								continue
							}
							πTemp003[2] = µmany_groups
							πTemp011 = πg.NewList(πTemp003...).ToObject()
							if πTemp010, πE = πg.Iter(πF, πTemp011); πE != nil {
								continue
							}
							πF.PushCheckpoint(8)
							πTemp002 = false
						Label7:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label9
							}
							if πTemp011, πE = πg.Next(πF, πTemp010); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp013 = !isStop
							} else {
								πTemp013 = true
								µadd_arguments = πTemp011
							}
							if πE != nil || !πTemp013 {
								continue
							}
							πF.PushCheckpoint(7)            
							πTemp003 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µlistargs, "listargs"); πE != nil {
								continue
							}
							πTemp003[0] = µlistargs
							if πE = πg.CheckLocal(πF, µsysargs, "sysargs"); πE != nil {
								continue
							}
							πTemp003[1] = µsysargs
							πTemp012 = πg.NewList(πTemp003...).ToObject()
							if πTemp011, πE = πg.Iter(πF, πTemp012); πE != nil {
								continue
							}
							πF.PushCheckpoint(11)
							πTemp013 = false
						Label10:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp013 {
								πF.PopCheckpoint()
								goto Label12
							}
							if πTemp012, πE = πg.Next(πF, πTemp011); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp014 = !isStop
							} else {
								πTemp014 = true
								µparse_args = πTemp012
							}
							if πE != nil || !πTemp014 {
								continue
							}
							πF.PushCheckpoint(10)            
							// line 274: AddTests(cls, add_arguments, parse_args)
							πF.SetLineno(274)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							πTemp003[0] = µcls
							if πE = πg.CheckLocal(πF, µadd_arguments, "add_arguments"); πE != nil {
								continue
							}
							πTemp003[1] = µadd_arguments
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp003[2] = µparse_args
							if πE = πg.CheckLocal(πF, µAddTests, "AddTests"); πE != nil {
								continue
							}
							if πTemp012, πE = µAddTests.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label11:
							if πE != nil || πR != nil {
								continue
							}
						Label12:
							continue
						Label8:
							if πE != nil || πR != nil {
								continue
							}
						Label9:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("ParserTesterMetaclass").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßParserTesterMetaclass.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 276: bases = TestCase,
			πF.SetLineno(276)
			if πTemp003, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßbases.ToObject(), πTemp003); πE != nil {
				continue
			}
			// line 277: ParserTestCase = ParserTesterMetaclass('ParserTestCase', bases, {})
			πF.SetLineno(277)
			πTemp002 = πF.MakeArgs(3)
			πTemp002[0] = ßParserTestCase.ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßbases); πE != nil {
				continue
			}
			πTemp002[1] = πTemp003
			πTemp004 = πg.NewDict()
			πTemp003 = πTemp004.ToObject()
			πTemp002[2] = πTemp003
			if πTemp003, πE = πg.ResolveGlobal(πF, ßParserTesterMetaclass); πE != nil {
				continue
			}
			if πTemp005, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßParserTestCase.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 283: class TestOptionalsSingleDash(ParserTestCase):
			πF.SetLineno(283)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsSingleDash", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 284: """Test an Optional with a single-dash option string"""
					πF.SetLineno(284)
					// line 286: argument_signatures = [Sig('-x')]
					πF.SetLineno(286)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 287: failures = ['-x', 'a', '--foo', '-x --foo', '-x -y']
					πF.SetLineno(287)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp001[1] = ßa.ToObject()
					πTemp001[2] = πg.NewStr("--foo").ToObject()
					πTemp001[3] = πg.NewStr("-x --foo").ToObject()
					πTemp001[4] = πg.NewStr("-x -y").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 288: successes = [
					πF.SetLineno(288)
					πTemp001 = make([]*πg.Object, 5)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"x", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"x", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp005 = πg.KWArgs{
						{"x", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-xa").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp005 = πg.KWArgs{
						{"x", πg.NewStr("-1").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x -1").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp003
					πTemp005 = πg.KWArgs{
						{"x", πg.NewStr("-1").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x-1").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsSingleDash").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsSingleDash.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 297: class TestOptionalsSingleDashCombined(ParserTestCase):
			πF.SetLineno(297)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsSingleDashCombined", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 298: """Test an Optional with a single-dash option string"""
					πF.SetLineno(298)
					// line 300: argument_signatures = [
					πF.SetLineno(300)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-yyy").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_const.ToObject()},
						{"const", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-z").ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 305: failures = ['a', '--foo', '-xa', '-x --foo', '-x -z', '-z -x',
					πF.SetLineno(305)
					πTemp001 = make([]*πg.Object, 11)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = πg.NewStr("-xa").ToObject()
					πTemp001[3] = πg.NewStr("-x --foo").ToObject()
					πTemp001[4] = πg.NewStr("-x -z").ToObject()
					πTemp001[5] = πg.NewStr("-z -x").ToObject()
					πTemp001[6] = πg.NewStr("-yx").ToObject()
					πTemp001[7] = πg.NewStr("-yz a").ToObject()
					πTemp001[8] = πg.NewStr("-yyyx").ToObject()
					πTemp001[9] = πg.NewStr("-yyyza").ToObject()
					πTemp001[10] = πg.NewStr("-xyza").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 307: successes = [
					πF.SetLineno(307)
					πTemp001 = make([]*πg.Object, 12)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-za").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-z a").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-xza").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-xz a").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x -za").ToObject(), πTemp006).ToObject()
					πTemp001[6] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πTemp006},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x -z a").ToObject(), πTemp006).ToObject()
					πTemp001[7] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πg.NewInt(42).ToObject()},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y").ToObject(), πTemp006).ToObject()
					πTemp001[8] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πg.NewInt(42).ToObject()},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-yyy").ToObject(), πTemp006).ToObject()
					πTemp001[9] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πg.NewInt(42).ToObject()},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x -yyy -za").ToObject(), πTemp006).ToObject()
					πTemp001[10] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"yyy", πg.NewInt(42).ToObject()},
						{"z", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x -yyy -z a").ToObject(), πTemp006).ToObject()
					πTemp001[11] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsSingleDashCombined").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsSingleDashCombined.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 323: class TestOptionalsSingleDashLong(ParserTestCase):
			πF.SetLineno(323)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsSingleDashLong", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 324: """Test an Optional with a multi-character single-dash option string"""
					πF.SetLineno(324)
					// line 326: argument_signatures = [Sig('-foo')]
					πF.SetLineno(326)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-foo").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 327: failures = ['-foo', 'a', '--foo', '-foo --foo', '-foo -y', '-fooa']
					πF.SetLineno(327)
					πTemp001 = make([]*πg.Object, 6)
					πTemp001[0] = πg.NewStr("-foo").ToObject()
					πTemp001[1] = ßa.ToObject()
					πTemp001[2] = πg.NewStr("--foo").ToObject()
					πTemp001[3] = πg.NewStr("-foo --foo").ToObject()
					πTemp001[4] = πg.NewStr("-foo -y").ToObject()
					πTemp001[5] = πg.NewStr("-fooa").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 328: successes = [
					πF.SetLineno(328)
					πTemp001 = make([]*πg.Object, 5)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"foo", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foo a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", πg.NewStr("-1").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foo -1").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-fo a").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-f a").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsSingleDashLong").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsSingleDashLong.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 337: class TestOptionalsSingleDashSubsetAmbiguous(ParserTestCase):
			πF.SetLineno(337)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsSingleDashSubsetAmbiguous", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 πg.KWArgs
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 338: """Test Optionals where option strings are subsets of each other"""
					πF.SetLineno(338)
					// line 340: argument_signatures = [Sig('-f'), Sig('-foobar'), Sig('-foorab')]
					πF.SetLineno(340)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-f").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-foobar").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-foorab").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 341: failures = ['-f', '-foo', '-fo', '-foo b', '-foob', '-fooba', '-foora']
					πF.SetLineno(341)
					πTemp001 = make([]*πg.Object, 7)
					πTemp001[0] = πg.NewStr("-f").ToObject()
					πTemp001[1] = πg.NewStr("-foo").ToObject()
					πTemp001[2] = πg.NewStr("-fo").ToObject()
					πTemp001[3] = πg.NewStr("-foo b").ToObject()
					πTemp001[4] = πg.NewStr("-foob").ToObject()
					πTemp001[5] = πg.NewStr("-fooba").ToObject()
					πTemp001[6] = πg.NewStr("-foora").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 342: successes = [
					πF.SetLineno(342)
					πTemp001 = make([]*πg.Object, 7)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"f", πTemp004},
						{"foobar", πTemp005},
						{"foorab", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp005).ToObject()
					πTemp001[0] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"f", ßa.ToObject()},
						{"foobar", πTemp004},
						{"foorab", πTemp005},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-f a").ToObject(), πTemp005).ToObject()
					πTemp001[1] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"f", ßa.ToObject()},
						{"foobar", πTemp004},
						{"foorab", πTemp005},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-fa").ToObject(), πTemp005).ToObject()
					πTemp001[2] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"f", ßoa.ToObject()},
						{"foobar", πTemp004},
						{"foorab", πTemp005},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foa").ToObject(), πTemp005).ToObject()
					πTemp001[3] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"f", ßooa.ToObject()},
						{"foobar", πTemp004},
						{"foorab", πTemp005},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-fooa").ToObject(), πTemp005).ToObject()
					πTemp001[4] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"f", πTemp004},
						{"foobar", ßa.ToObject()},
						{"foorab", πTemp005},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foobar a").ToObject(), πTemp005).ToObject()
					πTemp001[5] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"f", πTemp004},
						{"foobar", πTemp005},
						{"foorab", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foorab a").ToObject(), πTemp005).ToObject()
					πTemp001[6] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsSingleDashSubsetAmbiguous").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsSingleDashSubsetAmbiguous.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 353: class TestOptionalsSingleDashAmbiguous(ParserTestCase):
			πF.SetLineno(353)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsSingleDashAmbiguous", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 πg.KWArgs
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 354: """Test Optionals that partially match but are not subsets"""
					πF.SetLineno(354)
					// line 356: argument_signatures = [Sig('-foobar'), Sig('-foorab')]
					πF.SetLineno(356)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-foobar").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-foorab").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 357: failures = ['-f', '-f a', '-fa', '-foa', '-foo', '-fo', '-foo b']
					πF.SetLineno(357)
					πTemp001 = make([]*πg.Object, 7)
					πTemp001[0] = πg.NewStr("-f").ToObject()
					πTemp001[1] = πg.NewStr("-f a").ToObject()
					πTemp001[2] = πg.NewStr("-fa").ToObject()
					πTemp001[3] = πg.NewStr("-foa").ToObject()
					πTemp001[4] = πg.NewStr("-foo").ToObject()
					πTemp001[5] = πg.NewStr("-fo").ToObject()
					πTemp001[6] = πg.NewStr("-foo b").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 358: successes = [
					πF.SetLineno(358)
					πTemp001 = make([]*πg.Object, 7)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"foobar", πTemp004},
						{"foorab", πTemp005},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp005).ToObject()
					πTemp001[0] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"foobar", ßa.ToObject()},
						{"foorab", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foob a").ToObject(), πTemp005).ToObject()
					πTemp001[1] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"foobar", πTemp004},
						{"foorab", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foor a").ToObject(), πTemp005).ToObject()
					πTemp001[2] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"foobar", ßa.ToObject()},
						{"foorab", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-fooba a").ToObject(), πTemp005).ToObject()
					πTemp001[3] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"foobar", πTemp004},
						{"foorab", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foora a").ToObject(), πTemp005).ToObject()
					πTemp001[4] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"foobar", ßa.ToObject()},
						{"foorab", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foobar a").ToObject(), πTemp005).ToObject()
					πTemp001[5] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"foobar", πTemp004},
						{"foorab", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-foorab a").ToObject(), πTemp005).ToObject()
					πTemp001[6] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsSingleDashAmbiguous").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsSingleDashAmbiguous.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 369: class TestOptionalsNumeric(ParserTestCase):
			πF.SetLineno(369)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNumeric", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 370: """Test an Optional with a short opt string"""
					πF.SetLineno(370)
					// line 372: argument_signatures = [Sig('-1', dest='one')]
					πF.SetLineno(372)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-1").ToObject()
					πTemp003 = πg.KWArgs{
						{"dest", ßone.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 373: failures = ['-1', 'a', '-1 --foo', '-1 -y', '-1 -1', '-1 -2']
					πF.SetLineno(373)
					πTemp001 = make([]*πg.Object, 6)
					πTemp001[0] = πg.NewStr("-1").ToObject()
					πTemp001[1] = ßa.ToObject()
					πTemp001[2] = πg.NewStr("-1 --foo").ToObject()
					πTemp001[3] = πg.NewStr("-1 -y").ToObject()
					πTemp001[4] = πg.NewStr("-1 -1").ToObject()
					πTemp001[5] = πg.NewStr("-1 -2").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 374: successes = [
					πF.SetLineno(374)
					πTemp001 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"one", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp003 = πg.KWArgs{
						{"one", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-1 a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp003 = πg.KWArgs{
						{"one", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-1a").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp003 = πg.KWArgs{
						{"one", πg.NewStr("-2").ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-1-2").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNumeric").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNumeric.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 382: class TestOptionalsDoubleDash(ParserTestCase):
			πF.SetLineno(382)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsDoubleDash", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 383: """Test an Optional with a double-dash option string"""
					πF.SetLineno(383)
					// line 385: argument_signatures = [Sig('--foo')]
					πF.SetLineno(385)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--foo").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 386: failures = ['--foo', '-f', '-f a', 'a', '--foo -x', '--foo --bar']
					πF.SetLineno(386)
					πTemp001 = make([]*πg.Object, 6)
					πTemp001[0] = πg.NewStr("--foo").ToObject()
					πTemp001[1] = πg.NewStr("-f").ToObject()
					πTemp001[2] = πg.NewStr("-f a").ToObject()
					πTemp001[3] = ßa.ToObject()
					πTemp001[4] = πg.NewStr("--foo -x").ToObject()
					πTemp001[5] = πg.NewStr("--foo --bar").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 387: successes = [
					πF.SetLineno(387)
					πTemp001 = make([]*πg.Object, 5)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"foo", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--foo a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--foo=a").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", πg.NewStr("-2.5").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--foo -2.5").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", πg.NewStr("-2.5").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--foo=-2.5").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsDoubleDash").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsDoubleDash.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 396: class TestOptionalsDoubleDashPartialMatch(ParserTestCase):
			πF.SetLineno(396)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsDoubleDashPartialMatch", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 397: """Tests partial matching with a double-dash option string"""
					πF.SetLineno(397)
					// line 399: argument_signatures = [
					πF.SetLineno(399)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--badger").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--bat").ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 403: failures = ['--bar', '--b', '--ba', '--b=2', '--ba=4', '--badge 5']
					πF.SetLineno(403)
					πTemp001 = make([]*πg.Object, 6)
					πTemp001[0] = πg.NewStr("--bar").ToObject()
					πTemp001[1] = πg.NewStr("--b").ToObject()
					πTemp001[2] = πg.NewStr("--ba").ToObject()
					πTemp001[3] = πg.NewStr("--b=2").ToObject()
					πTemp001[4] = πg.NewStr("--ba=4").ToObject()
					πTemp001[5] = πg.NewStr("--badge 5").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 404: successes = [
					πF.SetLineno(404)
					πTemp001 = make([]*πg.Object, 6)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"bat", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"bat", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--bat X").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"bat", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--bad").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"bat", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--badg").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"bat", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--badge").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"bat", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--badger").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsDoubleDashPartialMatch").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsDoubleDashPartialMatch.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 414: class TestOptionalsDoubleDashPrefixMatch(ParserTestCase):
			πF.SetLineno(414)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsDoubleDashPrefixMatch", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 415: """Tests when one double-dash option string is a prefix of another"""
					πF.SetLineno(415)
					// line 417: argument_signatures = [
					πF.SetLineno(417)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--badger").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--ba").ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 421: failures = ['--bar', '--b', '--ba', '--b=2', '--badge 5']
					πF.SetLineno(421)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = πg.NewStr("--bar").ToObject()
					πTemp001[1] = πg.NewStr("--b").ToObject()
					πTemp001[2] = πg.NewStr("--ba").ToObject()
					πTemp001[3] = πg.NewStr("--b=2").ToObject()
					πTemp001[4] = πg.NewStr("--badge 5").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 422: successes = [
					πF.SetLineno(422)
					πTemp001 = make([]*πg.Object, 7)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"ba", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"ba", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--ba X").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"ba", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--ba=X").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"ba", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--bad").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"ba", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--badg").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"ba", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--badge").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"badger", πTemp005},
						{"ba", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--badger").ToObject(), πTemp006).ToObject()
					πTemp001[6] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsDoubleDashPrefixMatch").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsDoubleDashPrefixMatch.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 433: class TestOptionalsSingleDoubleDash(ParserTestCase):
			πF.SetLineno(433)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsSingleDoubleDash", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 434: """Test an Optional with single- and double-dash option strings"""
					πF.SetLineno(434)
					// line 436: argument_signatures = [
					πF.SetLineno(436)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-f").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--bar").ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-baz").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_const.ToObject()},
						{"const", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 441: failures = ['--bar', '-fbar', '-fbaz', '-bazf', '-b B', 'B']
					πF.SetLineno(441)
					πTemp001 = make([]*πg.Object, 6)
					πTemp001[0] = πg.NewStr("--bar").ToObject()
					πTemp001[1] = πg.NewStr("-fbar").ToObject()
					πTemp001[2] = πg.NewStr("-fbaz").ToObject()
					πTemp001[3] = πg.NewStr("-bazf").ToObject()
					πTemp001[4] = πg.NewStr("-b B").ToObject()
					πTemp001[5] = ßB.ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 442: successes = [
					πF.SetLineno(442)
					πTemp001 = make([]*πg.Object, 6)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"bar", πTemp006},
						{"baz", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"bar", πTemp006},
						{"baz", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-f").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"bar", ßB.ToObject()},
						{"baz", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--ba B").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"bar", ßB.ToObject()},
						{"baz", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-f --bar B").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"bar", πTemp006},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-f -b").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"bar", πTemp006},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-ba -f").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsSingleDoubleDash").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsSingleDoubleDash.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 452: class TestOptionalsAlternatePrefixChars(ParserTestCase):
			πF.SetLineno(452)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsAlternatePrefixChars", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 453: """Test an Optional with option strings with custom prefixes"""
					πF.SetLineno(453)
					// line 455: parser_signature = Sig(prefix_chars='+:/', add_help=False)
					πF.SetLineno(455)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prefix_chars", πg.NewStr("+:/").ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 456: argument_signatures = [
					πF.SetLineno(456)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("+f").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("::bar").ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("/baz").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_const.ToObject()},
						{"const", πg.NewInt(42).ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 461: failures = ['--bar', '-fbar', '-b B', 'B', '-f', '--bar B', '-baz', '-h', '--help', '+h', '::help', '/help']
					πF.SetLineno(461)
					πTemp004 = make([]*πg.Object, 12)
					πTemp004[0] = πg.NewStr("--bar").ToObject()
					πTemp004[1] = πg.NewStr("-fbar").ToObject()
					πTemp004[2] = πg.NewStr("-b B").ToObject()
					πTemp004[3] = ßB.ToObject()
					πTemp004[4] = πg.NewStr("-f").ToObject()
					πTemp004[5] = πg.NewStr("--bar B").ToObject()
					πTemp004[6] = πg.NewStr("-baz").ToObject()
					πTemp004[7] = πg.NewStr("-h").ToObject()
					πTemp004[8] = πg.NewStr("--help").ToObject()
					πTemp004[9] = πg.NewStr("+h").ToObject()
					πTemp004[10] = πg.NewStr("::help").ToObject()
					πTemp004[11] = πg.NewStr("/help").ToObject()
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 462: successes = [
					πF.SetLineno(462)
					πTemp004 = make([]*πg.Object, 6)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+f").ToObject(), πTemp006).ToObject()
					πTemp004[1] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", ßB.ToObject()},
						{"baz", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("::ba B").ToObject(), πTemp006).ToObject()
					πTemp004[2] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", ßB.ToObject()},
						{"baz", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+f ::bar B").ToObject(), πTemp006).ToObject()
					πTemp004[3] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+f /b").ToObject(), πTemp006).ToObject()
					πTemp004[4] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("/ba +f").ToObject(), πTemp006).ToObject()
					πTemp004[5] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsAlternatePrefixChars").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsAlternatePrefixChars.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 472: class TestOptionalsAlternatePrefixCharsAddedHelp(ParserTestCase):
			πF.SetLineno(472)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsAlternatePrefixCharsAddedHelp", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 473: """When ``-`` not in prefix_chars, default operators created for help
					πF.SetLineno(473)
					// line 477: parser_signature = Sig(prefix_chars='+:/', add_help=True)
					πF.SetLineno(477)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prefix_chars", πg.NewStr("+:/").ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 478: argument_signatures = [
					πF.SetLineno(478)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("+f").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("::bar").ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("/baz").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_const.ToObject()},
						{"const", πg.NewInt(42).ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 483: failures = ['--bar', '-fbar', '-b B', 'B', '-f', '--bar B', '-baz']
					πF.SetLineno(483)
					πTemp004 = make([]*πg.Object, 7)
					πTemp004[0] = πg.NewStr("--bar").ToObject()
					πTemp004[1] = πg.NewStr("-fbar").ToObject()
					πTemp004[2] = πg.NewStr("-b B").ToObject()
					πTemp004[3] = ßB.ToObject()
					πTemp004[4] = πg.NewStr("-f").ToObject()
					πTemp004[5] = πg.NewStr("--bar B").ToObject()
					πTemp004[6] = πg.NewStr("-baz").ToObject()
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 484: successes = [
					πF.SetLineno(484)
					πTemp004 = make([]*πg.Object, 6)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+f").ToObject(), πTemp006).ToObject()
					πTemp004[1] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", ßB.ToObject()},
						{"baz", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("::ba B").ToObject(), πTemp006).ToObject()
					πTemp004[2] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", ßB.ToObject()},
						{"baz", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+f ::bar B").ToObject(), πTemp006).ToObject()
					πTemp004[3] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+f /b").ToObject(), πTemp006).ToObject()
					πTemp004[4] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"f", πTemp003},
						{"bar", πTemp006},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("/ba +f").ToObject(), πTemp006).ToObject()
					πTemp004[5] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsAlternatePrefixCharsAddedHelp").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsAlternatePrefixCharsAddedHelp.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 494: class TestOptionalsAlternatePrefixCharsMultipleShortArgs(ParserTestCase):
			πF.SetLineno(494)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsAlternatePrefixCharsMultipleShortArgs", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 495: """Verify that Optionals must be called with their defined prefixes"""
					πF.SetLineno(495)
					// line 497: parser_signature = Sig(prefix_chars='+-', add_help=False)
					πF.SetLineno(497)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prefix_chars", πg.NewStr("+-").ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 498: argument_signatures = [
					πF.SetLineno(498)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("+y").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("+z").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 503: failures = ['-w',
					πF.SetLineno(503)
					πTemp004 = make([]*πg.Object, 5)
					πTemp004[0] = πg.NewStr("-w").ToObject()
					πTemp004[1] = πg.NewStr("-xyz").ToObject()
					πTemp004[2] = πg.NewStr("+x").ToObject()
					πTemp004[3] = πg.NewStr("-y").ToObject()
					πTemp004[4] = πg.NewStr("+xyz").ToObject()
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 509: successes = [
					πF.SetLineno(509)
					πTemp004 = make([]*πg.Object, 4)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"x", πTemp003},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"x", πTemp003},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("-x").ToObject(), πTemp006).ToObject()
					πTemp004[1] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"x", πTemp003},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+y -x").ToObject(), πTemp006).ToObject()
					πTemp004[2] = πTemp001
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"x", πTemp003},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("+yz -x").ToObject(), πTemp006).ToObject()
					πTemp004[3] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsAlternatePrefixCharsMultipleShortArgs").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsAlternatePrefixCharsMultipleShortArgs.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 517: class TestOptionalsShortLong(ParserTestCase):
			πF.SetLineno(517)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsShortLong", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 518: """Test a combination of single- and double-dash option strings"""
					πF.SetLineno(518)
					// line 520: argument_signatures = [
					πF.SetLineno(520)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(4)
					πTemp002[0] = πg.NewStr("-v").ToObject()
					πTemp002[1] = πg.NewStr("--verbose").ToObject()
					πTemp002[2] = πg.NewStr("-n").ToObject()
					πTemp002[3] = πg.NewStr("--noisy").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 523: failures = ['--x --verbose', '-N', 'a', '-v x']
					πF.SetLineno(523)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = πg.NewStr("--x --verbose").ToObject()
					πTemp001[1] = πg.NewStr("-N").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = πg.NewStr("-v x").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 524: successes = [
					πF.SetLineno(524)
					πTemp001 = make([]*πg.Object, 5)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"verbose", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"verbose", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-v").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"verbose", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--verbose").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"verbose", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-n").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"verbose", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--noisy").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsShortLong").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsShortLong.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 533: class TestOptionalsDest(ParserTestCase):
			πF.SetLineno(533)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsDest", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 534: """Tests various means of setting destination"""
					πF.SetLineno(534)
					// line 536: argument_signatures = [Sig('--foo-bar'), Sig('--baz', dest='zabbaz')]
					πF.SetLineno(536)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--foo-bar").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--baz").ToObject()
					πTemp005 = πg.KWArgs{
						{"dest", ßzabbaz.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 537: failures = ['a']
					πF.SetLineno(537)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = ßa.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 538: successes = [
					πF.SetLineno(538)
					πTemp001 = make([]*πg.Object, 4)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"foo_bar", ßf.ToObject()},
						{"zabbaz", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--foo-bar f").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"foo_bar", πTemp004},
						{"zabbaz", ßg.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--baz g").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo_bar", ßh.ToObject()},
						{"zabbaz", ßi.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--foo-bar h --baz i").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo_bar", ßk.ToObject()},
						{"zabbaz", ßj.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--baz j --foo-bar k").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsDest").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsDest.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 546: class TestOptionalsDefault(ParserTestCase):
			πF.SetLineno(546)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 547: """Tests specifying a default for an Optional"""
					πF.SetLineno(547)
					// line 549: argument_signatures = [Sig('-x'), Sig('-y', default=42)]
					πF.SetLineno(549)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp005 = πg.KWArgs{
						{"default", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 550: failures = ['a']
					πF.SetLineno(550)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = ßa.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 551: successes = [
					πF.SetLineno(551)
					πTemp001 = make([]*πg.Object, 3)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"x", πTemp004},
						{"y", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"x", ßx.ToObject()},
						{"y", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-xx").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"x", πTemp004},
						{"y", ßy.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-yy").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 558: class TestOptionalsNargsDefault(ParserTestCase):
			πF.SetLineno(558)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNargsDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 559: """Tests not specifying the number of args for an Optional"""
					πF.SetLineno(559)
					// line 561: argument_signatures = [Sig('-x')]
					πF.SetLineno(561)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 562: failures = ['a', '-x']
					πF.SetLineno(562)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 563: successes = [
					πF.SetLineno(563)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"x", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"x", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNargsDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNargsDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 569: class TestOptionalsNargs1(ParserTestCase):
			πF.SetLineno(569)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNargs1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 570: """Tests specifying 1 arg for an Optional"""
					πF.SetLineno(570)
					// line 572: argument_signatures = [Sig('-x', nargs=1)]
					πF.SetLineno(572)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 573: failures = ['a', '-x']
					πF.SetLineno(573)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 574: successes = [
					πF.SetLineno(574)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNargs1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNargs1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 580: class TestOptionalsNargs3(ParserTestCase):
			πF.SetLineno(580)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNargs3", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 581: """Tests specifying 3 args for an Optional"""
					πF.SetLineno(581)
					// line 583: argument_signatures = [Sig('-x', nargs=3)]
					πF.SetLineno(583)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(3).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 584: failures = ['a', '-x', '-x a', '-x a b', 'a -x', 'a -x b']
					πF.SetLineno(584)
					πTemp001 = make([]*πg.Object, 6)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp001[2] = πg.NewStr("-x a").ToObject()
					πTemp001[3] = πg.NewStr("-x a b").ToObject()
					πTemp001[4] = πg.NewStr("a -x").ToObject()
					πTemp001[5] = πg.NewStr("a -x b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 585: successes = [
					πF.SetLineno(585)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 3)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp002[2] = ßc.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNargs3").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNargs3.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 591: class TestOptionalsNargsOptional(ParserTestCase):
			πF.SetLineno(591)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNargsOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 592: """Tests specifying an Optional arg for an Optional"""
					πF.SetLineno(592)
					// line 594: argument_signatures = [
					πF.SetLineno(594)
					πTemp001 = make([]*πg.Object, 4)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-w").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"const", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", ßspam.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-z").ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"type", πTemp004},
						{"const", ß42.ToObject()},
						{"default", ß84.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[3] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 600: failures = ['2']
					πF.SetLineno(600)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = ß2.ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 601: successes = [
					πF.SetLineno(601)
					πTemp001 = make([]*πg.Object, 9)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", πTemp006},
						{"y", ßspam.ToObject()},
						{"z", πg.NewInt(84).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", πTemp006},
						{"y", ßspam.ToObject()},
						{"z", πg.NewInt(84).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-w").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", ß2.ToObject()},
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
						{"z", πg.NewInt(84).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-w 2").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", πg.NewInt(42).ToObject()},
						{"y", ßspam.ToObject()},
						{"z", πg.NewInt(84).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", ß2.ToObject()},
						{"y", ßspam.ToObject()},
						{"z", πg.NewInt(84).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x 2").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", πTemp006},
						{"y", πTemp007},
						{"z", πg.NewInt(84).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", πTemp006},
						{"y", ß2.ToObject()},
						{"z", πg.NewInt(84).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y 2").ToObject(), πTemp006).ToObject()
					πTemp001[6] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", πTemp006},
						{"y", ßspam.ToObject()},
						{"z", πg.NewInt(42).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-z").ToObject(), πTemp006).ToObject()
					πTemp001[7] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"w", πTemp005},
						{"x", πTemp006},
						{"y", ßspam.ToObject()},
						{"z", πg.NewInt(2).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-z 2").ToObject(), πTemp006).ToObject()
					πTemp001[8] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNargsOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNargsOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 614: class TestOptionalsNargsZeroOrMore(ParserTestCase):
			πF.SetLineno(614)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNargsZeroOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 615: """Tests specifying args for an Optional that accepts zero or more"""
					πF.SetLineno(615)
					// line 617: argument_signatures = [
					πF.SetLineno(617)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
						{"default", ßspam.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 621: failures = ['a']
					πF.SetLineno(621)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = ßa.ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 622: successes = [
					πF.SetLineno(622)
					πTemp001 = make([]*πg.Object, 7)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 0)
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a b").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y a").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y a b").ToObject(), πTemp006).ToObject()
					πTemp001[6] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNargsZeroOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNargsZeroOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 633: class TestOptionalsNargsOneOrMore(ParserTestCase):
			πF.SetLineno(633)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNargsOneOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 634: """Tests specifying args for an Optional that accepts one or more"""
					πF.SetLineno(634)
					// line 636: argument_signatures = [
					πF.SetLineno(636)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
						{"default", ßspam.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 640: failures = ['a', '-x', '-y', 'a -x', 'a -y b']
					πF.SetLineno(640)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp001[2] = πg.NewStr("-y").ToObject()
					πTemp001[3] = πg.NewStr("a -x").ToObject()
					πTemp001[4] = πg.NewStr("a -y b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 641: successes = [
					πF.SetLineno(641)
					πTemp001 = make([]*πg.Object, 5)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", ßspam.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a b").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y a").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y a b").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNargsOneOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNargsOneOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 650: class TestOptionalsChoices(ParserTestCase):
			πF.SetLineno(650)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsChoices", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 []*πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 651: """Tests specifying the choices for an Optional"""
					πF.SetLineno(651)
					// line 653: argument_signatures = [
					πF.SetLineno(653)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-f").ToObject()
					πTemp003 = πg.KWArgs{
						{"choices", ßabc.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-g").ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = πg.NewInt(5).ToObject()
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßrange); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp003 = πg.KWArgs{
						{"type", πTemp004},
						{"choices", πTemp007},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 656: failures = ['a', '-f d', '-fad', '-ga', '-g 6']
					πF.SetLineno(656)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-f d").ToObject()
					πTemp001[2] = πg.NewStr("-fad").ToObject()
					πTemp001[3] = πg.NewStr("-ga").ToObject()
					πTemp001[4] = πg.NewStr("-g 6").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 657: successes = [
					πF.SetLineno(657)
					πTemp001 = make([]*πg.Object, 6)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"g", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp007).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", ßa.ToObject()},
						{"g", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-f a").ToObject(), πTemp007).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", ßc.ToObject()},
						{"g", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-f c").ToObject(), πTemp007).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"g", πg.NewInt(0).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-g 0").ToObject(), πTemp007).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"f", πTemp005},
						{"g", πg.NewInt(3).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-g 03").ToObject(), πTemp007).ToObject()
					πTemp001[4] = πTemp004
					πTemp003 = πg.KWArgs{
						{"f", ßb.ToObject()},
						{"g", πg.NewInt(4).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-fb -g4").ToObject(), πTemp007).ToObject()
					πTemp001[5] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsChoices").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsChoices.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 667: class TestOptionalsRequired(ParserTestCase):
			πF.SetLineno(667)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsRequired", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 668: """Tests an optional action that is required"""
					πF.SetLineno(668)
					// line 670: argument_signatures = [
					πF.SetLineno(670)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"type", πTemp003},
						{"required", πTemp004},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 673: failures = ['a', '']
					πF.SetLineno(673)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = ß.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 674: successes = [
					πF.SetLineno(674)
					πTemp001 = make([]*πg.Object, 2)
					πTemp005 = πg.KWArgs{
						{"x", πg.NewInt(1).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x 1").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"x", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x42").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsRequired").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsRequired.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 680: class TestOptionalsActionStore(ParserTestCase):
			πF.SetLineno(680)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionStore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 681: """Tests the store action for an Optional"""
					πF.SetLineno(681)
					// line 683: argument_signatures = [Sig('-x', action='store')]
					πF.SetLineno(683)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 684: failures = ['a', 'a -x']
					πF.SetLineno(684)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("a -x").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 685: successes = [
					πF.SetLineno(685)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp003 = πg.KWArgs{
						{"x", ßfoo.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-xfoo").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionStore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionStore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 691: class TestOptionalsActionStoreConst(ParserTestCase):
			πF.SetLineno(691)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionStoreConst", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 πg.KWArgs
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 692: """Tests the store_const action for an Optional"""
					πF.SetLineno(692)
					// line 694: argument_signatures = [Sig('-y', action='store_const', const=object)]
					πF.SetLineno(694)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßobject); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"action", ßstore_const.ToObject()},
						{"const", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp004); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 695: failures = ['a']
					πF.SetLineno(695)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = ßa.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 696: successes = [
					πF.SetLineno(696)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßobject); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-y").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionStoreConst").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionStoreConst.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 702: class TestOptionalsActionStoreFalse(ParserTestCase):
			πF.SetLineno(702)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionStoreFalse", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 703: """Tests the store_false action for an Optional"""
					πF.SetLineno(703)
					// line 705: argument_signatures = [Sig('-z', action='store_false')]
					πF.SetLineno(705)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-z").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_false.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 706: failures = ['a', '-za', '-z a']
					πF.SetLineno(706)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-za").ToObject()
					πTemp001[2] = πg.NewStr("-z a").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 707: successes = [
					πF.SetLineno(707)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"z", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"z", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-z").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionStoreFalse").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionStoreFalse.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 713: class TestOptionalsActionStoreTrue(ParserTestCase):
			πF.SetLineno(713)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionStoreTrue", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 714: """Tests the store_true action for an Optional"""
					πF.SetLineno(714)
					// line 716: argument_signatures = [Sig('--apple', action='store_true')]
					πF.SetLineno(716)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--apple").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 717: failures = ['a', '--apple=b', '--apple b']
					πF.SetLineno(717)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("--apple=b").ToObject()
					πTemp001[2] = πg.NewStr("--apple b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 718: successes = [
					πF.SetLineno(718)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"apple", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"apple", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--apple").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionStoreTrue").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionStoreTrue.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 724: class TestOptionalsActionAppend(ParserTestCase):
			πF.SetLineno(724)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionAppend", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 725: """Tests the append action for an Optional"""
					πF.SetLineno(725)
					// line 727: argument_signatures = [Sig('--baz', action='append')]
					πF.SetLineno(727)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--baz").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßappend.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 728: failures = ['a', '--baz', 'a --baz', '--baz a b']
					πF.SetLineno(728)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("--baz").ToObject()
					πTemp001[2] = πg.NewStr("a --baz").ToObject()
					πTemp001[3] = πg.NewStr("--baz a b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 729: successes = [
					πF.SetLineno(729)
					πTemp001 = make([]*πg.Object, 3)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"baz", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"baz", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--baz a").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"baz", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--baz a --baz b").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionAppend").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionAppend.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 736: class TestOptionalsActionAppendWithDefault(ParserTestCase):
			πF.SetLineno(736)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionAppendWithDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 737: """Tests the append action for an Optional"""
					πF.SetLineno(737)
					// line 739: argument_signatures = [Sig('--baz', action='append', default=['X'])]
					πF.SetLineno(739)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--baz").ToObject()
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = ßX.ToObject()
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					πTemp005 = πg.KWArgs{
						{"action", ßappend.ToObject()},
						{"default", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp006
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 740: failures = ['a', '--baz', 'a --baz', '--baz a b']
					πF.SetLineno(740)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("--baz").ToObject()
					πTemp001[2] = πg.NewStr("a --baz").ToObject()
					πTemp001[3] = πg.NewStr("--baz a b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 741: successes = [
					πF.SetLineno(741)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßX.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"baz", πTemp006},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp007).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßX.ToObject()
					πTemp002[1] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"baz", πTemp006},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--baz a").ToObject(), πTemp007).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 3)
					πTemp002[0] = ßX.ToObject()
					πTemp002[1] = ßa.ToObject()
					πTemp002[2] = ßb.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"baz", πTemp006},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--baz a --baz b").ToObject(), πTemp007).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionAppendWithDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionAppendWithDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 748: class TestOptionalsActionAppendConst(ParserTestCase):
			πF.SetLineno(748)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionAppendConst", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 πg.KWArgs
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 749: """Tests the append_const action for an Optional"""
					πF.SetLineno(749)
					// line 751: argument_signatures = [
					πF.SetLineno(751)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-b").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"action", ßappend_const.ToObject()},
						{"const", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp004); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-c").ToObject()
					πTemp004 = πg.KWArgs{
						{"action", ßappend.ToObject()},
						{"dest", ßb.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp004); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 755: failures = ['a', '-c', 'a -c', '-bx', '-b x']
					πF.SetLineno(755)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-c").ToObject()
					πTemp001[2] = πg.NewStr("a -c").ToObject()
					πTemp001[3] = πg.NewStr("-bx").ToObject()
					πTemp001[4] = πg.NewStr("-b x").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 756: successes = [
					πF.SetLineno(756)
					πTemp001 = make([]*πg.Object, 3)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"b", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp002[0] = πTemp005
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"b", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp002 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp002[0] = πTemp005
					πTemp002[1] = ßx.ToObject()
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp002[2] = πTemp005
					πTemp002[3] = ßyz.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"b", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-b -cx -b -cyz").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionAppendConst").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionAppendConst.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 763: class TestOptionalsActionAppendConstWithDefault(ParserTestCase):
			πF.SetLineno(763)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionAppendConstWithDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 πg.KWArgs
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 764: """Tests the append_const action for an Optional"""
					πF.SetLineno(764)
					// line 766: argument_signatures = [
					πF.SetLineno(766)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-b").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = ßX.ToObject()
					πTemp005 = πg.NewList(πTemp004...).ToObject()
					πTemp006 = πg.KWArgs{
						{"action", ßappend_const.ToObject()},
						{"const", πTemp003},
						{"default", πTemp005},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp006); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-c").ToObject()
					πTemp006 = πg.KWArgs{
						{"action", ßappend.ToObject()},
						{"dest", ßb.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp006); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 770: failures = ['a', '-c', 'a -c', '-bx', '-b x']
					πF.SetLineno(770)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-c").ToObject()
					πTemp001[2] = πg.NewStr("a -c").ToObject()
					πTemp001[3] = πg.NewStr("-bx").ToObject()
					πTemp001[4] = πg.NewStr("-b x").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 771: successes = [
					πF.SetLineno(771)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßX.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp006 = πg.KWArgs{
						{"b", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp007).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßX.ToObject()
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp002[1] = πTemp005
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp006 = πg.KWArgs{
						{"b", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-b").ToObject(), πTemp007).ToObject()
					πTemp001[1] = πTemp003
					πTemp002 = make([]*πg.Object, 5)
					πTemp002[0] = ßX.ToObject()
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp002[1] = πTemp005
					πTemp002[2] = ßx.ToObject()
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßException); πE != nil {
						continue
					}
					πTemp002[3] = πTemp005
					πTemp002[4] = ßyz.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp006 = πg.KWArgs{
						{"b", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-b -cx -b -cyz").ToObject(), πTemp007).ToObject()
					πTemp001[2] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionAppendConstWithDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionAppendConstWithDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 778: class TestOptionalsActionCount(ParserTestCase):
			πF.SetLineno(778)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsActionCount", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 779: """Tests the count action for an Optional"""
					πF.SetLineno(779)
					// line 781: argument_signatures = [Sig('-x', action='count')]
					πF.SetLineno(781)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßcount.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 782: failures = ['a', '-x a', '-x b', '-x a -x b']
					πF.SetLineno(782)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ßa.ToObject()
					πTemp001[1] = πg.NewStr("-x a").ToObject()
					πTemp001[2] = πg.NewStr("-x b").ToObject()
					πTemp001[3] = πg.NewStr("-x a -x b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 783: successes = [
					πF.SetLineno(783)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp003 = πg.KWArgs{
						{"x", πg.NewInt(1).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsActionCount").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsActionCount.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 793: class TestPositionalsNargsNone(ParserTestCase):
			πF.SetLineno(793)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNone", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 794: """Test a Positional that doesn't specify nargs"""
					πF.SetLineno(794)
					// line 796: argument_signatures = [Sig('foo')]
					πF.SetLineno(796)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 797: failures = ['', '-x', 'a b']
					πF.SetLineno(797)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp001[2] = πg.NewStr("a b").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 798: successes = [
					πF.SetLineno(798)
					πTemp001 = make([]*πg.Object, 1)
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNone").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNone.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 803: class TestPositionalsNargs1(ParserTestCase):
			πF.SetLineno(803)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargs1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 804: """Test a Positional that specifies an nargs of 1"""
					πF.SetLineno(804)
					// line 806: argument_signatures = [Sig('foo', nargs=1)]
					πF.SetLineno(806)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 807: failures = ['', '-x', 'a b']
					πF.SetLineno(807)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp001[2] = πg.NewStr("a b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 808: successes = [
					πF.SetLineno(808)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargs1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargs1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 813: class TestPositionalsNargs2(ParserTestCase):
			πF.SetLineno(813)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargs2", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 814: """Test a Positional that specifies an nargs of 2"""
					πF.SetLineno(814)
					// line 816: argument_signatures = [Sig('foo', nargs=2)]
					πF.SetLineno(816)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(2).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 817: failures = ['', 'a', '-x', 'a b c']
					πF.SetLineno(817)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = ßa.ToObject()
					πTemp001[2] = πg.NewStr("-x").ToObject()
					πTemp001[3] = πg.NewStr("a b c").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 818: successes = [
					πF.SetLineno(818)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargs2").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargs2.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 823: class TestPositionalsNargsZeroOrMore(ParserTestCase):
			πF.SetLineno(823)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsZeroOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 824: """Test a Positional that specifies unlimited nargs"""
					πF.SetLineno(824)
					// line 826: argument_signatures = [Sig('foo', nargs='*')]
					πF.SetLineno(826)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 827: failures = ['-x']
					πF.SetLineno(827)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 828: successes = [
					πF.SetLineno(828)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = make([]*πg.Object, 0)
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsZeroOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsZeroOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 835: class TestPositionalsNargsZeroOrMoreDefault(ParserTestCase):
			πF.SetLineno(835)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsZeroOrMoreDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 836: """Test a Positional that specifies unlimited nargs and a default"""
					πF.SetLineno(836)
					// line 838: argument_signatures = [Sig('foo', nargs='*', default='bar')]
					πF.SetLineno(838)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
						{"default", ßbar.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 839: failures = ['-x']
					πF.SetLineno(839)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 840: successes = [
					πF.SetLineno(840)
					πTemp001 = make([]*πg.Object, 3)
					πTemp003 = πg.KWArgs{
						{"foo", ßbar.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsZeroOrMoreDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsZeroOrMoreDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 847: class TestPositionalsNargsOneOrMore(ParserTestCase):
			πF.SetLineno(847)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOneOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 848: """Test a Positional that specifies one or more nargs"""
					πF.SetLineno(848)
					// line 850: argument_signatures = [Sig('foo', nargs='+')]
					πF.SetLineno(850)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 851: failures = ['', '-x']
					πF.SetLineno(851)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 852: successes = [
					πF.SetLineno(852)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOneOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOneOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 858: class TestPositionalsNargsOptional(ParserTestCase):
			πF.SetLineno(858)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 859: """Tests an Optional Positional"""
					πF.SetLineno(859)
					// line 861: argument_signatures = [Sig('foo', nargs='?')]
					πF.SetLineno(861)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 862: failures = ['-x', 'a b']
					πF.SetLineno(862)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp001[1] = πg.NewStr("a b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 863: successes = [
					πF.SetLineno(863)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 869: class TestPositionalsNargsOptionalDefault(ParserTestCase):
			πF.SetLineno(869)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptionalDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 870: """Tests an Optional Positional with a default value"""
					πF.SetLineno(870)
					// line 872: argument_signatures = [Sig('foo', nargs='?', default=42)]
					πF.SetLineno(872)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 873: failures = ['-x', 'a b']
					πF.SetLineno(873)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp001[1] = πg.NewStr("a b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 874: successes = [
					πF.SetLineno(874)
					πTemp001 = make([]*πg.Object, 2)
					πTemp003 = πg.KWArgs{
						{"foo", πg.NewInt(42).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptionalDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptionalDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 880: class TestPositionalsNargsOptionalConvertedDefault(ParserTestCase):
			πF.SetLineno(880)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptionalConvertedDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 πg.KWArgs
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 881: """Tests an Optional Positional with a default value
					πF.SetLineno(881)
					// line 885: argument_signatures = [
					πF.SetLineno(885)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"type", πTemp003},
						{"default", ß42.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp004); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 888: failures = ['-x', 'a b', '1 2']
					πF.SetLineno(888)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp001[1] = πg.NewStr("a b").ToObject()
					πTemp001[2] = πg.NewStr("1 2").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 889: successes = [
					πF.SetLineno(889)
					πTemp001 = make([]*πg.Object, 2)
					πTemp004 = πg.KWArgs{
						{"foo", πg.NewInt(42).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp004 = πg.KWArgs{
						{"foo", πg.NewInt(1).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß1.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptionalConvertedDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptionalConvertedDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 895: class TestPositionalsNargsNoneNone(ParserTestCase):
			πF.SetLineno(895)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNoneNone", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 896: """Test two Positionals that don't specify nargs"""
					πF.SetLineno(896)
					// line 898: argument_signatures = [Sig('foo'), Sig('bar')]
					πF.SetLineno(898)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 899: failures = ['', '-x', 'a', 'a b c']
					πF.SetLineno(899)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("-x").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = πg.NewStr("a b c").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 900: successes = [
					πF.SetLineno(900)
					πTemp001 = make([]*πg.Object, 1)
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", ßb.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNoneNone").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNoneNone.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 905: class TestPositionalsNargsNone1(ParserTestCase):
			πF.SetLineno(905)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNone1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 906: """Test a Positional with no nargs followed by one with 1"""
					πF.SetLineno(906)
					// line 908: argument_signatures = [Sig('foo'), Sig('bar', nargs=1)]
					πF.SetLineno(908)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 909: failures = ['', '--foo', 'a', 'a b c']
					πF.SetLineno(909)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = πg.NewStr("a b c").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 910: successes = [
					πF.SetLineno(910)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNone1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNone1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 915: class TestPositionalsNargs2None(ParserTestCase):
			πF.SetLineno(915)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargs2None", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 916: """Test a Positional with 2 nargs followed by one with none"""
					πF.SetLineno(916)
					// line 918: argument_signatures = [Sig('foo', nargs=2), Sig('bar')]
					πF.SetLineno(918)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(2).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 919: failures = ['', '--foo', 'a', 'a b', 'a b c d']
					πF.SetLineno(919)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = πg.NewStr("a b").ToObject()
					πTemp001[4] = πg.NewStr("a b c d").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 920: successes = [
					πF.SetLineno(920)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", ßc.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargs2None").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargs2None.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 925: class TestPositionalsNargsNoneZeroOrMore(ParserTestCase):
			πF.SetLineno(925)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNoneZeroOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 926: """Test a Positional with no nargs followed by one with unlimited"""
					πF.SetLineno(926)
					// line 928: argument_signatures = [Sig('foo'), Sig('bar', nargs='*')]
					πF.SetLineno(928)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 929: failures = ['', '--foo']
					πF.SetLineno(929)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 930: successes = [
					πF.SetLineno(930)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = make([]*πg.Object, 0)
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßb.ToObject()
					πTemp002[1] = ßc.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNoneZeroOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNoneZeroOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 937: class TestPositionalsNargsNoneOneOrMore(ParserTestCase):
			πF.SetLineno(937)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNoneOneOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 938: """Test a Positional with no nargs followed by one with one or more"""
					πF.SetLineno(938)
					// line 940: argument_signatures = [Sig('foo'), Sig('bar', nargs='+')]
					πF.SetLineno(940)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 941: failures = ['', '--foo', 'a']
					πF.SetLineno(941)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 942: successes = [
					πF.SetLineno(942)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßb.ToObject()
					πTemp002[1] = ßc.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNoneOneOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNoneOneOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 948: class TestPositionalsNargsNoneOptional(ParserTestCase):
			πF.SetLineno(948)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNoneOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 949: """Test a Positional with no nargs followed by one with an Optional"""
					πF.SetLineno(949)
					// line 951: argument_signatures = [Sig('foo'), Sig('bar', nargs='?')]
					πF.SetLineno(951)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 952: failures = ['', '--foo', 'a b c']
					πF.SetLineno(952)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = πg.NewStr("a b c").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 953: successes = [
					πF.SetLineno(953)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", ßb.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNoneOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNoneOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 959: class TestPositionalsNargsZeroOrMoreNone(ParserTestCase):
			πF.SetLineno(959)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsZeroOrMoreNone", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 960: """Test a Positional with unlimited nargs followed by one with none"""
					πF.SetLineno(960)
					// line 962: argument_signatures = [Sig('foo', nargs='*'), Sig('bar')]
					πF.SetLineno(962)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 963: failures = ['', '--foo']
					πF.SetLineno(963)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 964: successes = [
					πF.SetLineno(964)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = make([]*πg.Object, 0)
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", ßb.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", ßc.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsZeroOrMoreNone").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsZeroOrMoreNone.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 971: class TestPositionalsNargsOneOrMoreNone(ParserTestCase):
			πF.SetLineno(971)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOneOrMoreNone", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 972: """Test a Positional with one or more nargs followed by one with none"""
					πF.SetLineno(972)
					// line 974: argument_signatures = [Sig('foo', nargs='+'), Sig('bar')]
					πF.SetLineno(974)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 975: failures = ['', '--foo', 'a']
					πF.SetLineno(975)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 976: successes = [
					πF.SetLineno(976)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", ßb.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", ßc.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOneOrMoreNone").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOneOrMoreNone.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 982: class TestPositionalsNargsOptionalNone(ParserTestCase):
			πF.SetLineno(982)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptionalNone", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 983: """Test a Positional with an Optional nargs followed by one with none"""
					πF.SetLineno(983)
					// line 985: argument_signatures = [Sig('foo', nargs='?', default=42), Sig('bar')]
					πF.SetLineno(985)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 986: failures = ['', '--foo', 'a b c']
					πF.SetLineno(986)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = πg.NewStr("a b c").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 987: successes = [
					πF.SetLineno(987)
					πTemp001 = make([]*πg.Object, 2)
					πTemp003 = πg.KWArgs{
						{"foo", πg.NewInt(42).ToObject()},
						{"bar", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", ßb.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptionalNone").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptionalNone.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 993: class TestPositionalsNargs2ZeroOrMore(ParserTestCase):
			πF.SetLineno(993)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargs2ZeroOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 994: """Test a Positional with 2 nargs followed by one with unlimited"""
					πF.SetLineno(994)
					// line 996: argument_signatures = [Sig('foo', nargs=2), Sig('bar', nargs='*')]
					πF.SetLineno(996)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(2).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 997: failures = ['', '--foo', 'a']
					πF.SetLineno(997)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 998: successes = [
					πF.SetLineno(998)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßc.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargs2ZeroOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargs2ZeroOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1004: class TestPositionalsNargs2OneOrMore(ParserTestCase):
			πF.SetLineno(1004)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargs2OneOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1005: """Test a Positional with 2 nargs followed by one with one or more"""
					πF.SetLineno(1005)
					// line 1007: argument_signatures = [Sig('foo', nargs=2), Sig('bar', nargs='+')]
					πF.SetLineno(1007)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(2).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1008: failures = ['', '--foo', 'a', 'a b']
					πF.SetLineno(1008)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = πg.NewStr("a b").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1009: successes = [
					πF.SetLineno(1009)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßc.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargs2OneOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargs2OneOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1014: class TestPositionalsNargs2Optional(ParserTestCase):
			πF.SetLineno(1014)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargs2Optional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1015: """Test a Positional with 2 nargs followed by one optional"""
					πF.SetLineno(1015)
					// line 1017: argument_signatures = [Sig('foo', nargs=2), Sig('bar', nargs='?')]
					πF.SetLineno(1017)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(2).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1018: failures = ['', '--foo', 'a', 'a b c d']
					πF.SetLineno(1018)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = πg.NewStr("a b c d").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1019: successes = [
					πF.SetLineno(1019)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", ßc.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargs2Optional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargs2Optional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1025: class TestPositionalsNargsZeroOrMore1(ParserTestCase):
			πF.SetLineno(1025)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsZeroOrMore1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1026: """Test a Positional with unlimited nargs followed by one with 1"""
					πF.SetLineno(1026)
					// line 1028: argument_signatures = [Sig('foo', nargs='*'), Sig('bar', nargs=1)]
					πF.SetLineno(1028)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1029: failures = ['', '--foo', ]
					πF.SetLineno(1029)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1030: successes = [
					πF.SetLineno(1030)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = make([]*πg.Object, 0)
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßc.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsZeroOrMore1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsZeroOrMore1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1037: class TestPositionalsNargsOneOrMore1(ParserTestCase):
			πF.SetLineno(1037)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOneOrMore1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1038: """Test a Positional with one or more nargs followed by one with 1"""
					πF.SetLineno(1038)
					// line 1040: argument_signatures = [Sig('foo', nargs='+'), Sig('bar', nargs=1)]
					πF.SetLineno(1040)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1041: failures = ['', '--foo', 'a']
					πF.SetLineno(1041)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1042: successes = [
					πF.SetLineno(1042)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp002[1] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßc.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOneOrMore1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOneOrMore1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1048: class TestPositionalsNargsOptional1(ParserTestCase):
			πF.SetLineno(1048)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptional1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1049: """Test a Positional with an Optional nargs followed by one with 1"""
					πF.SetLineno(1049)
					// line 1051: argument_signatures = [Sig('foo', nargs='?'), Sig('bar', nargs=1)]
					πF.SetLineno(1051)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1052: failures = ['', '--foo', 'a b c']
					πF.SetLineno(1052)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = πg.NewStr("a b c").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1053: successes = [
					πF.SetLineno(1053)
					πTemp001 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptional1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptional1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1059: class TestPositionalsNargsNoneZeroOrMore1(ParserTestCase):
			πF.SetLineno(1059)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNoneZeroOrMore1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1060: """Test three Positionals: no nargs, unlimited nargs and 1 nargs"""
					πF.SetLineno(1060)
					// line 1062: argument_signatures = [
					πF.SetLineno(1062)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbaz.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1067: failures = ['', '--foo', 'a']
					πF.SetLineno(1067)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1068: successes = [
					πF.SetLineno(1068)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 0)
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
						{"baz", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßc.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
						{"baz", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNoneZeroOrMore1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNoneZeroOrMore1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1074: class TestPositionalsNargsNoneOneOrMore1(ParserTestCase):
			πF.SetLineno(1074)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNoneOneOrMore1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1075: """Test three Positionals: no nargs, one or more nargs and 1 nargs"""
					πF.SetLineno(1075)
					// line 1077: argument_signatures = [
					πF.SetLineno(1077)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbaz.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1082: failures = ['', '--foo', 'a', 'b']
					πF.SetLineno(1082)
					πTemp001 = make([]*πg.Object, 4)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = ßb.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1083: successes = [
					πF.SetLineno(1083)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßc.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
						{"baz", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßb.ToObject()
					πTemp002[1] = ßc.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßd.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
						{"baz", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b c d").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNoneOneOrMore1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNoneOneOrMore1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1089: class TestPositionalsNargsNoneOptional1(ParserTestCase):
			πF.SetLineno(1089)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsNoneOptional1", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1090: """Test three Positionals: no nargs, optional narg and 1 nargs"""
					πF.SetLineno(1090)
					// line 1092: argument_signatures = [
					πF.SetLineno(1092)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", πg.NewFloat(0.625).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbaz.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewInt(1).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1097: failures = ['', '--foo', 'a']
					πF.SetLineno(1097)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1098: successes = [
					πF.SetLineno(1098)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πg.NewFloat(0.625).ToObject()},
						{"baz", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßc.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", ßb.ToObject()},
						{"baz", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsNoneOptional1").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsNoneOptional1.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1104: class TestPositionalsNargsOptionalOptional(ParserTestCase):
			πF.SetLineno(1104)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptionalOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1105: """Test two optional nargs"""
					πF.SetLineno(1105)
					// line 1107: argument_signatures = [
					πF.SetLineno(1107)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1111: failures = ['--foo', 'a b c']
					πF.SetLineno(1111)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = πg.NewStr("--foo").ToObject()
					πTemp001[1] = πg.NewStr("a b c").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1112: successes = [
					πF.SetLineno(1112)
					πTemp001 = make([]*πg.Object, 3)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πg.NewInt(42).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πg.NewInt(42).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", ßb.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptionalOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptionalOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1119: class TestPositionalsNargsOptionalZeroOrMore(ParserTestCase):
			πF.SetLineno(1119)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptionalZeroOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1120: """Test an Optional narg followed by unlimited nargs"""
					πF.SetLineno(1120)
					// line 1122: argument_signatures = [Sig('foo', nargs='?'), Sig('bar', nargs='*')]
					πF.SetLineno(1122)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1123: failures = ['--foo']
					πF.SetLineno(1123)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = πg.NewStr("--foo").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1124: successes = [
					πF.SetLineno(1124)
					πTemp001 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 0)
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßb.ToObject()
					πTemp002[1] = ßc.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptionalZeroOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptionalZeroOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1132: class TestPositionalsNargsOptionalOneOrMore(ParserTestCase):
			πF.SetLineno(1132)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsNargsOptionalOneOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1133: """Test an Optional narg followed by one or more nargs"""
					πF.SetLineno(1133)
					// line 1135: argument_signatures = [Sig('foo', nargs='?'), Sig('bar', nargs='+')]
					πF.SetLineno(1135)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1136: failures = ['', '--foo']
					πF.SetLineno(1136)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1137: successes = [
					πF.SetLineno(1137)
					πTemp001 = make([]*πg.Object, 3)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", πTemp005},
						{"bar", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßb.ToObject()
					πTemp002[1] = ßc.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsNargsOptionalOneOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsNargsOptionalOneOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1144: class TestPositionalsChoicesString(ParserTestCase):
			πF.SetLineno(1144)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsChoicesString", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 πg.KWArgs
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1145: """Test a set of single-character choices"""
					πF.SetLineno(1145)
					// line 1147: argument_signatures = [Sig('spam', choices=set('abcdefg'))]
					πF.SetLineno(1147)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßspam.ToObject()
					πTemp003 = πF.MakeArgs(1)
					πTemp003[0] = ßabcdefg.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßset); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					πTemp006 = πg.KWArgs{
						{"choices", πTemp005},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp006); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1148: failures = ['', '--foo', 'h', '42', 'ef']
					πF.SetLineno(1148)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßh.ToObject()
					πTemp001[3] = ß42.ToObject()
					πTemp001[4] = ßef.ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1149: successes = [
					πF.SetLineno(1149)
					πTemp001 = make([]*πg.Object, 2)
					πTemp006 = πg.KWArgs{
						{"spam", ßa.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp007).ToObject()
					πTemp001[0] = πTemp004
					πTemp006 = πg.KWArgs{
						{"spam", ßg.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßg.ToObject(), πTemp007).ToObject()
					πTemp001[1] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsChoicesString").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsChoicesString.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1155: class TestPositionalsChoicesInt(ParserTestCase):
			πF.SetLineno(1155)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsChoicesInt", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 πg.KWArgs
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1156: """Test a set of integer choices"""
					πF.SetLineno(1156)
					// line 1158: argument_signatures = [Sig('spam', type=int, choices=range(20))]
					πF.SetLineno(1158)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßspam.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp004 = πF.MakeArgs(1)
					πTemp004[0] = πg.NewInt(20).ToObject()
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßrange); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					πTemp007 = πg.KWArgs{
						{"type", πTemp003},
						{"choices", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp007); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1159: failures = ['', '--foo', 'h', '42', 'ef']
					πF.SetLineno(1159)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßh.ToObject()
					πTemp001[3] = ß42.ToObject()
					πTemp001[4] = ßef.ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1160: successes = [
					πF.SetLineno(1160)
					πTemp001 = make([]*πg.Object, 2)
					πTemp007 = πg.KWArgs{
						{"spam", πg.NewInt(4).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß4.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp007 = πg.KWArgs{
						{"spam", πg.NewInt(15).ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß15.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsChoicesInt").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsChoicesInt.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1166: class TestPositionalsActionAppend(ParserTestCase):
			πF.SetLineno(1166)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsActionAppend", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 []*πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1167: """Test the 'append' action"""
					πF.SetLineno(1167)
					// line 1169: argument_signatures = [
					πF.SetLineno(1169)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßspam.ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßappend.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßspam.ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßappend.ToObject()},
						{"nargs", πg.NewInt(2).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1173: failures = ['', '--foo', 'a', 'a b', 'a b c d']
					πF.SetLineno(1173)
					πTemp001 = make([]*πg.Object, 5)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("--foo").ToObject()
					πTemp001[2] = ßa.ToObject()
					πTemp001[3] = πg.NewStr("a b").ToObject()
					πTemp001[4] = πg.NewStr("a b c d").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1174: successes = [
					πF.SetLineno(1174)
					πTemp001 = make([]*πg.Object, 1)
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = make([]*πg.Object, 2)
					πTemp006[0] = ßb.ToObject()
					πTemp006[1] = ßc.ToObject()
					πTemp005 = πg.NewList(πTemp006...).ToObject()
					πTemp002[1] = πTemp005
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"spam", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a b c").ToObject(), πTemp007).ToObject()
					πTemp001[0] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsActionAppend").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsActionAppend.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1182: class TestOptionalsNumericAndPositionals(ParserTestCase):
			πF.SetLineno(1182)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsNumericAndPositionals", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1183: """Tests negative number args when numeric options are present"""
					πF.SetLineno(1183)
					// line 1185: argument_signatures = [
					πF.SetLineno(1185)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßx.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-4").ToObject()
					πTemp003 = πg.KWArgs{
						{"dest", ßy.ToObject()},
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1189: failures = ['-2', '-315']
					πF.SetLineno(1189)
					πTemp001 = make([]*πg.Object, 2)
					πTemp001[0] = πg.NewStr("-2").ToObject()
					πTemp001[1] = πg.NewStr("-315").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1190: successes = [
					πF.SetLineno(1190)
					πTemp001 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", ßa.ToObject()},
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-4").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", ßa.ToObject()},
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-4 a").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsNumericAndPositionals").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsNumericAndPositionals.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1198: class TestOptionalsAlmostNumericAndPositionals(ParserTestCase):
			πF.SetLineno(1198)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsAlmostNumericAndPositionals", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1199: """Tests negative number args when almost numeric options are present"""
					πF.SetLineno(1199)
					// line 1201: argument_signatures = [
					πF.SetLineno(1201)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßx.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-k4").ToObject()
					πTemp003 = πg.KWArgs{
						{"dest", ßy.ToObject()},
						{"action", ßstore_true.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1205: failures = ['-k3']
					πF.SetLineno(1205)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = πg.NewStr("-k3").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1206: successes = [
					πF.SetLineno(1206)
					πTemp001 = make([]*πg.Object, 5)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πg.NewStr("-2").ToObject()},
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-2").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", ßa.ToObject()},
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-k4").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", ßa.ToObject()},
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-k4 a").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsAlmostNumericAndPositionals").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsAlmostNumericAndPositionals.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1215: class TestEmptyAndSpaceContainingArguments(ParserTestCase):
			πF.SetLineno(1215)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestEmptyAndSpaceContainingArguments", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1217: argument_signatures = [
					πF.SetLineno(1217)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßx.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(2)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp002[1] = πg.NewStr("--yyy").ToObject()
					πTemp003 = πg.KWArgs{
						{"dest", ßy.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1221: failures = ['-y']
					πF.SetLineno(1221)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = πg.NewStr("-y").ToObject()
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1222: successes = [
					πF.SetLineno(1222)
					πTemp001 = make([]*πg.Object, 8)
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ß.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", ß.ToObject()},
						{"y", πTemp006},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = πg.NewStr("a badger").ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πg.NewStr("a badger").ToObject()},
						{"y", πTemp006},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = πg.NewStr("-a badger").ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πg.NewStr("-a badger").ToObject()},
						{"y", πTemp006},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[2] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp002[1] = ß.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp006},
						{"y", ß.ToObject()},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[3] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp002[1] = πg.NewStr("a badger").ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp006},
						{"y", πg.NewStr("a badger").ToObject()},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[4] = πTemp004
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = πg.NewStr("-y").ToObject()
					πTemp002[1] = πg.NewStr("-a badger").ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp006},
						{"y", πg.NewStr("-a badger").ToObject()},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[5] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = πg.NewStr("--yyy=a badger").ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp006},
						{"y", πg.NewStr("a badger").ToObject()},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[6] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = πg.NewStr("--yyy=-a badger").ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"x", πTemp006},
						{"y", πg.NewStr("-a badger").ToObject()},
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
					πTemp001[7] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestEmptyAndSpaceContainingArguments").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestEmptyAndSpaceContainingArguments.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1234: class TestPrefixCharacterOnlyArguments(ParserTestCase):
			πF.SetLineno(1234)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPrefixCharacterOnlyArguments", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1236: parser_signature = Sig(prefix_chars='-+')
					πF.SetLineno(1236)
					πTemp001 = πg.KWArgs{
						{"prefix_chars", πg.NewStr("-+").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1237: argument_signatures = [
					πF.SetLineno(1237)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-").ToObject()
					πTemp001 = πg.KWArgs{
						{"dest", ßx.ToObject()},
						{"nargs", πg.NewStr("?").ToObject()},
						{"const", ßbadger.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("+").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"dest", ßy.ToObject()},
						{"type", πTemp002},
						{"default", πg.NewInt(42).ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-+-").ToObject()
					πTemp001 = πg.KWArgs{
						{"dest", ßz.ToObject()},
						{"action", ßstore_true.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1242: failures = ['-y', '+ -']
					πF.SetLineno(1242)
					πTemp004 = make([]*πg.Object, 2)
					πTemp004[0] = πg.NewStr("-y").ToObject()
					πTemp004[1] = πg.NewStr("+ -").ToObject()
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1243: successes = [
					πF.SetLineno(1243)
					πTemp004 = make([]*πg.Object, 6)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"x", πTemp003},
						{"y", πg.NewInt(42).ToObject()},
						{"z", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp002
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"x", ßbadger.ToObject()},
						{"y", πg.NewInt(42).ToObject()},
						{"z", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("-").ToObject(), πTemp006).ToObject()
					πTemp004[1] = πTemp002
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"x", ßX.ToObject()},
						{"y", πg.NewInt(42).ToObject()},
						{"z", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("- X").ToObject(), πTemp006).ToObject()
					πTemp004[2] = πTemp002
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.Neg(πF, πg.NewInt(3).ToObject()); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"x", πTemp003},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("+ -3").ToObject(), πTemp006).ToObject()
					πTemp004[3] = πTemp002
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"x", πTemp003},
						{"y", πg.NewInt(42).ToObject()},
						{"z", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("-+-").ToObject(), πTemp006).ToObject()
					πTemp004[4] = πTemp002
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"x", πg.NewStr("===").ToObject()},
						{"y", πg.NewInt(42).ToObject()},
						{"z", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("- ===").ToObject(), πTemp006).ToObject()
					πTemp004[5] = πTemp002
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp002); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPrefixCharacterOnlyArguments").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPrefixCharacterOnlyArguments.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1253: class TestNargsZeroOrMore(ParserTestCase):
			πF.SetLineno(1253)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestNargsZeroOrMore", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1254: """Tests specifying args for an Optional that accepts zero or more"""
					πF.SetLineno(1254)
					// line 1256: argument_signatures = [Sig('-x', nargs='*'), Sig('y', nargs='*')]
					πF.SetLineno(1256)
					πTemp001 = make([]*πg.Object, 2)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßy.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp002, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1257: failures = []
					πF.SetLineno(1257)
					πTemp001 = make([]*πg.Object, 0)
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1258: successes = [
					πF.SetLineno(1258)
					πTemp001 = make([]*πg.Object, 7)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp004
					πTemp002 = make([]*πg.Object, 0)
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x a -- b").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp004
					πTemp002 = make([]*πg.Object, 0)
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a -x").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp004
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp005 = πg.NewList(πTemp002...).ToObject()
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp003 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("a -x b").ToObject(), πTemp006).ToObject()
					πTemp001[6] = πTemp004
					πTemp004 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestNargsZeroOrMore").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestNargsZeroOrMore.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1269: class TestNargsRemainder(ParserTestCase):
			πF.SetLineno(1269)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestNargsRemainder", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1270: """Tests specifying a positional with nargs=REMAINDER"""
					πF.SetLineno(1270)
					// line 1272: argument_signatures = [Sig('x'), Sig('y', nargs='...'), Sig('-z')]
					πF.SetLineno(1272)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßx.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßy.ToObject()
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("...").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-z").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1273: failures = ['', '-z', '-z Z']
					πF.SetLineno(1273)
					πTemp001 = make([]*πg.Object, 3)
					πTemp001[0] = ß.ToObject()
					πTemp001[1] = πg.NewStr("-z").ToObject()
					πTemp001[2] = πg.NewStr("-z Z").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1274: successes = [
					πF.SetLineno(1274)
					πTemp001 = make([]*πg.Object, 4)
					πTemp002 = make([]*πg.Object, 0)
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"x", ßX.ToObject()},
						{"y", πTemp004},
						{"z", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ßX.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp002 = make([]*πg.Object, 0)
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"x", ßX.ToObject()},
						{"y", πTemp004},
						{"z", ßZ.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-z Z X").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp002 = make([]*πg.Object, 4)
					πTemp002[0] = ßA.ToObject()
					πTemp002[1] = ßB.ToObject()
					πTemp002[2] = πg.NewStr("-z").ToObject()
					πTemp002[3] = ßZ.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"x", ßX.ToObject()},
						{"y", πTemp004},
						{"z", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("X A B -z Z").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					πTemp002 = make([]*πg.Object, 2)
					πTemp002[0] = ßY.ToObject()
					πTemp002[1] = πg.NewStr("--foo").ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"x", ßX.ToObject()},
						{"y", πTemp004},
						{"z", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("X Y --foo").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestNargsRemainder").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestNargsRemainder.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1282: class TestOptionLike(ParserTestCase):
			πF.SetLineno(1282)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionLike", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 πg.KWArgs
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1283: """Tests options that may or may not be arguments"""
					πF.SetLineno(1283)
					// line 1285: argument_signatures = [
					πF.SetLineno(1285)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-x").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßfloat); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"type", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp004); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("-3").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßfloat); πE != nil {
						continue
					}
					πTemp004 = πg.KWArgs{
						{"type", πTemp003},
						{"dest", ßy.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp004); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp005
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßz.ToObject()
					πTemp004 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp002, πTemp004); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp005
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1290: failures = ['-x', '-y2.5', '-xa', '-x -a',
					πF.SetLineno(1290)
					πTemp001 = make([]*πg.Object, 13)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp001[1] = πg.NewStr("-y2.5").ToObject()
					πTemp001[2] = πg.NewStr("-xa").ToObject()
					πTemp001[3] = πg.NewStr("-x -a").ToObject()
					πTemp001[4] = πg.NewStr("-x -3").ToObject()
					πTemp001[5] = πg.NewStr("-x -3.5").ToObject()
					πTemp001[6] = πg.NewStr("-3 -3.5").ToObject()
					πTemp001[7] = πg.NewStr("-x -2.5").ToObject()
					πTemp001[8] = πg.NewStr("-x -2.5 a").ToObject()
					πTemp001[9] = πg.NewStr("-3 -.5").ToObject()
					πTemp001[10] = πg.NewStr("a x -1").ToObject()
					πTemp001[11] = πg.NewStr("-x -1 a").ToObject()
					πTemp001[12] = πg.NewStr("-3 -1 a").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1294: successes = [
					πF.SetLineno(1294)
					πTemp001 = make([]*πg.Object, 11)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp007 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πg.NewFloat(2.5).ToObject()},
						{"y", πTemp005},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x 2.5").ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πg.NewFloat(2.5).ToObject()},
						{"y", πTemp005},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x 2.5 a").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πg.NewFloat(0.5).ToObject()},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-3.5").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.Neg(πF, πg.NewFloat(0.5).ToObject()); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp007 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-3-.5").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 0)
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πg.NewFloat(0.5).ToObject()},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-3 .5").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πg.NewFloat(0.5).ToObject()},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a -3.5").ToObject(), πTemp006).ToObject()
					πTemp001[6] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp007 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp006},
						{"z", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[7] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πg.NewFloat(1.0).ToObject()},
						{"y", πTemp005},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a -x 1").ToObject(), πTemp006).ToObject()
					πTemp001[8] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πg.NewFloat(1.0).ToObject()},
						{"y", πTemp005},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-x 1 a").ToObject(), πTemp006).ToObject()
					πTemp001[9] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßa.ToObject()
					πTemp006 = πg.NewList(πTemp002...).ToObject()
					πTemp004 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πg.NewFloat(1.0).ToObject()},
						{"z", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("-3 1 a").ToObject(), πTemp006).ToObject()
					πTemp001[10] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionLike").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionLike.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1309: class TestDefaultSuppress(ParserTestCase):
			πF.SetLineno(1309)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestDefaultSuppress", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 πg.KWArgs
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1310: """Test actions with suppressed defaults"""
					πF.SetLineno(1310)
					// line 1312: argument_signatures = [
					πF.SetLineno(1312)
					πTemp001 = make([]*πg.Object, 3)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßfoo.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", πTemp004},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[0] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ßbar.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
						{"default", πTemp004},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[1] = πTemp004
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("--baz").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"default", πTemp004},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp005); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					πTemp001[2] = πTemp004
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1317: failures = ['-x']
					πF.SetLineno(1317)
					πTemp001 = make([]*πg.Object, 1)
					πTemp001[0] = πg.NewStr("-x").ToObject()
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1318: successes = [
					πF.SetLineno(1318)
					πTemp001 = make([]*πg.Object, 6)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, nil); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp001[0] = πTemp003
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp001[1] = πTemp003
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp001[2] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"baz", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--baz").ToObject(), πTemp006).ToObject()
					πTemp001[3] = πTemp003
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"baz", πTemp004},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("a --baz").ToObject(), πTemp006).ToObject()
					πTemp001[4] = πTemp003
					πTemp002 = make([]*πg.Object, 1)
					πTemp002[0] = ßb.ToObject()
					πTemp004 = πg.NewList(πTemp002...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp005 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp004},
						{"baz", πTemp006},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--baz a b").ToObject(), πTemp006).ToObject()
					πTemp001[5] = πTemp003
					πTemp003 = πg.NewList(πTemp001...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestDefaultSuppress").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestDefaultSuppress.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1328: class TestParserDefaultSuppress(ParserTestCase):
			πF.SetLineno(1328)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestParserDefaultSuppress", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1329: """Test actions with a parser-level default of SUPPRESS"""
					πF.SetLineno(1329)
					// line 1331: parser_signature = Sig(argument_default=argparse.SUPPRESS)
					πF.SetLineno(1331)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"argument_default", πTemp002},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1332: argument_signatures = [
					πF.SetLineno(1332)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßfoo.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßbar.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--baz").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp002
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1337: failures = ['-x']
					πF.SetLineno(1337)
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("-x").ToObject()
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1338: successes = [
					πF.SetLineno(1338)
					πTemp004 = make([]*πg.Object, 6)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, nil, nil); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp001
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp004[1] = πTemp001
					πTemp005 = make([]*πg.Object, 1)
					πTemp005[0] = ßb.ToObject()
					πTemp002 = πg.NewList(πTemp005...).ToObject()
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp004[2] = πTemp001
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"baz", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("--baz").ToObject(), πTemp006).ToObject()
					πTemp004[3] = πTemp001
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"baz", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("a --baz").ToObject(), πTemp006).ToObject()
					πTemp004[4] = πTemp001
					πTemp005 = make([]*πg.Object, 1)
					πTemp005[0] = ßb.ToObject()
					πTemp002 = πg.NewList(πTemp005...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp002},
						{"baz", πTemp006},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					πTemp001 = πg.NewTuple2(πg.NewStr("--baz a b").ToObject(), πTemp006).ToObject()
					πTemp004[5] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestParserDefaultSuppress").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestParserDefaultSuppress.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1348: class TestParserDefault42(ParserTestCase):
			πF.SetLineno(1348)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestParserDefault42", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1349: """Test actions with a parser-level default of 42"""
					πF.SetLineno(1349)
					// line 1351: parser_signature = Sig(argument_default=42, version='1.0')
					πF.SetLineno(1351)
					πTemp001 = πg.KWArgs{
						{"argument_default", πg.NewInt(42).ToObject()},
						{"version", πg.NewStr("1.0").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1352: argument_signatures = [
					πF.SetLineno(1352)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßfoo.ToObject()
					πTemp001 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßbar.ToObject()
					πTemp001 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--baz").ToObject()
					πTemp001 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1357: failures = ['-x']
					πF.SetLineno(1357)
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("-x").ToObject()
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1358: successes = [
					πF.SetLineno(1358)
					πTemp004 = make([]*πg.Object, 6)
					πTemp001 = πg.KWArgs{
						{"foo", πg.NewInt(42).ToObject()},
						{"bar", πg.NewInt(42).ToObject()},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp002
					πTemp001 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πg.NewInt(42).ToObject()},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(ßa.ToObject(), πTemp006).ToObject()
					πTemp004[1] = πTemp002
					πTemp005 = make([]*πg.Object, 1)
					πTemp005[0] = ßb.ToObject()
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp003},
						{"baz", πg.NewInt(42).ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("a b").ToObject(), πTemp006).ToObject()
					πTemp004[2] = πTemp002
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"foo", πg.NewInt(42).ToObject()},
						{"bar", πg.NewInt(42).ToObject()},
						{"baz", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("--baz").ToObject(), πTemp006).ToObject()
					πTemp004[3] = πTemp002
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πg.NewInt(42).ToObject()},
						{"baz", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("a --baz").ToObject(), πTemp006).ToObject()
					πTemp004[4] = πTemp002
					πTemp005 = make([]*πg.Object, 1)
					πTemp005[0] = ßb.ToObject()
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"foo", ßa.ToObject()},
						{"bar", πTemp003},
						{"baz", πTemp006},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("--baz a b").ToObject(), πTemp006).ToObject()
					πTemp004[5] = πTemp002
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp002); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestParserDefault42").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestParserDefault42.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1438: class TestFileTypeRepr(TestCase):
			πF.SetLineno(1438)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestFileTypeRepr", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1440: def test_r(self):
					πF.SetLineno(1440)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_r", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtype *πg.Object = πg.UnboundLocal; _ = µtype
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1441: type = argparse.FileType('r')
							πF.SetLineno(1441)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßr.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßFileType, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtype = πTemp002
							// line 1442: self.assertEqual("FileType('r')", repr(type))
							πF.SetLineno(1442)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("FileType('r')").ToObject()
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtype, "type"); πE != nil {
								continue
							}
							πTemp004[0] = µtype
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_r.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1444: def test_wb_1(self):
					πF.SetLineno(1444)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_wb_1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtype *πg.Object = πg.UnboundLocal; _ = µtype
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1445: type = argparse.FileType('wb', 1)
							πF.SetLineno(1445)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßwb.ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßFileType, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtype = πTemp002
							// line 1446: self.assertEqual("FileType('wb', 1)", repr(type))
							πF.SetLineno(1446)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("FileType('wb', 1)").ToObject()
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtype, "type"); πE != nil {
								continue
							}
							πTemp004[0] = µtype
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_wb_1.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestFileTypeRepr").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestFileTypeRepr.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1449: class RFile(object):
			πF.SetLineno(1449)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("RFile", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Dict
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []πg.Param
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1450: seen = {}
					πF.SetLineno(1450)
					πTemp001 = πg.NewDict()
					πTemp002 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßseen.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1452: def __init__(self, name):
					πF.SetLineno(1452)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "name", Def: nil}
					πTemp002 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µname *πg.Object = πArgs[1]; _ = µname
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1453: self.name = name
							πF.SetLineno(1453)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µname); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßname, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1455: __hash__ = None
					πF.SetLineno(1455)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ß__hash__.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1457: def __eq__(self, other):
					πF.SetLineno(1457)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "other", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("__eq__", "build/src/__python__/test/test_argparse.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µother *πg.Object = πArgs[1]; _ = µother
						var µtext *πg.Object = πg.UnboundLocal; _ = µtext
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßseen, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, µother); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1458: if other in self.seen:
							πF.SetLineno(1458)
						Label1:
							// line 1459: text = self.seen[other]
							πF.SetLineno(1459)
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							πTemp001 = µother
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßseen, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µtext = πTemp002
							goto Label3
						Label2:
							// line 1461: text = self.seen[other] = other.read()
							πF.SetLineno(1461)
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µother, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtext = πTemp002
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßseen, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							πTemp005 = µother
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 1462: other.close()
							πF.SetLineno(1462)
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µother, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label3:
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πTemp006[0] = µtext
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							πTemp006[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							goto Label5
							// line 1463: if not isinstance(text, str):
							πF.SetLineno(1463)
						Label4:
							// line 1464: text = text.decode('ascii')
							πF.SetLineno(1464)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßascii.ToObject()
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtext, ßdecode, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µtext = πTemp002
							goto Label5
						Label5:
							// line 1465: return self.name == other.name == text
							πF.SetLineno(1465)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßname, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µother, ßname, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp004, µtext); πE != nil {
								continue
							}
						Label6:
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__eq__.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("RFile").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßRFile.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1532: class WFile(object):
			πF.SetLineno(1532)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("WFile", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []πg.Param
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1533: seen = set()
					πF.SetLineno(1533)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßset); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßseen.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1535: def __init__(self, name):
					πF.SetLineno(1535)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "name", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µname *πg.Object = πArgs[1]; _ = µname
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1536: self.name = name
							πF.SetLineno(1536)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µname); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßname, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1538: __hash__ = None
					πF.SetLineno(1538)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ß__hash__.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1540: def __eq__(self, other):
					πF.SetLineno(1540)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "other", Def: nil}
					πTemp002 = πg.NewFunction(πg.NewCode("__eq__", "build/src/__python__/test/test_argparse.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µother *πg.Object = πArgs[1]; _ = µother
						var µtext *πg.Object = πg.UnboundLocal; _ = µtext
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßseen, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, µother); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1541: if other not in self.seen:
							πF.SetLineno(1541)
						Label1:
							// line 1542: text = 'Check that file is writable.'
							πF.SetLineno(1542)
							µtext = πg.NewStr("Check that file is writable.").ToObject()
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µother, ßmode, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, ßb.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 1543: if 'b' in other.mode:
							πF.SetLineno(1543)
						Label3:
							// line 1544: text = text.encode('ascii')
							πF.SetLineno(1544)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßascii.ToObject()
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtext, ßencode, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µtext = πTemp002
							goto Label4
						Label4:
							// line 1545: other.write(text)
							πF.SetLineno(1545)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πTemp004[0] = µtext
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µother, ßwrite, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1546: other.close()
							πF.SetLineno(1546)
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µother, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1547: self.seen.add(other)
							πF.SetLineno(1547)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							πTemp004[0] = µother
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßseen, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßadd, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 1548: return self.name == other.name
							πF.SetLineno(1548)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßname, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µother, ßname, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__eq__.ToObject(), πTemp002); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("WFile").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßWFile.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1604: class TestTypeUserDefined(ParserTestCase):
			πF.SetLineno(1604)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTypeUserDefined", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Dict
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 []*πg.Object
				_ = πTemp006
				var πTemp007 πg.KWArgs
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1605: """Test a user-defined option/argument type"""
					πF.SetLineno(1605)
					// line 1607: class MyType(TestCase):
					πF.SetLineno(1607)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTestCase); πE != nil {
						continue
					}
					πTemp003[0] = πTemp005
					πTemp001 = πg.NewDict()
					if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
						continue
					}
					_, πE = πg.NewCode("MyType", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
						πClass := πTemp001
						_ = πClass
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1609: def __init__(self, value):
							πF.SetLineno(1609)
							πTemp002 = make([]πg.Param, 2)
							πTemp002[0] = πg.Param{Name: "self", Def: nil}
							πTemp002[1] = πg.Param{Name: "value", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µself *πg.Object = πArgs[0]; _ = µself
								var µvalue *πg.Object = πArgs[1]; _ = µvalue
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1610: self.value = value
									πF.SetLineno(1610)
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µvalue); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, µself, ßvalue, πTemp001); πE != nil {
										continue
									}
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
								continue
							}
							// line 1612: __hash__ = None
							πF.SetLineno(1612)
							if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
								continue
							}
							if πE = πClass.SetItem(πF, ß__hash__.ToObject(), πTemp003); πE != nil {
								continue
							}
							// line 1614: def __eq__(self, other):
							πF.SetLineno(1614)
							πTemp002 = make([]πg.Param, 2)
							πTemp002[0] = πg.Param{Name: "self", Def: nil}
							πTemp002[1] = πg.Param{Name: "other", Def: nil}
							πTemp003 = πg.NewFunction(πg.NewCode("__eq__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µself *πg.Object = πArgs[0]; _ = µself
								var µother *πg.Object = πArgs[1]; _ = µother
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 []*πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1615: return (type(self), self.value) == (type(other), other.value)
									πF.SetLineno(1615)
									πTemp003 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									πTemp003[0] = µself
									if πTemp004, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
										continue
									}
									if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp003)
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µself, ßvalue, nil); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple2(πTemp005, πTemp004).ToObject()
									πTemp003 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
										continue
									}
									πTemp003[0] = µother
									if πTemp005, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
										continue
									}
									if πTemp006, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp003)
									if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
										continue
									}
									if πTemp005, πE = πg.GetAttr(πF, µother, ßvalue, nil); πE != nil {
										continue
									}
									πTemp004 = πg.NewTuple2(πTemp006, πTemp005).ToObject()
									if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp004); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							if πE = πClass.SetItem(πF, ß__eq__.ToObject(), πTemp003); πE != nil {
								continue
							}
						}
						return nil, nil
					}).Eval(πF, πF.Globals(), nil, nil)
					if πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
						continue
					}
					if πTemp004 == nil {
						πTemp004 = πg.TypeType.ToObject()
					}
					if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("MyType").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßMyType.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 1617: argument_signatures = [
					πF.SetLineno(1617)
					πTemp003 = make([]*πg.Object, 2)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = πg.NewStr("-x").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßMyType); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"type", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp002.Call(πF, πTemp006, πTemp007); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp003[0] = πTemp004
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßspam.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßMyType); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"type", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp002.Call(πF, πTemp006, πTemp007); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp003[1] = πTemp004
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1621: failures = []
					πF.SetLineno(1621)
					πTemp003 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1622: successes = [
					πF.SetLineno(1622)
					πTemp003 = make([]*πg.Object, 2)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßb.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßMyType); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßa.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßMyType); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp007 = πg.KWArgs{
						{"x", πTemp005},
						{"spam", πTemp008},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("a -x b").ToObject(), πTemp005).ToObject()
					πTemp003[0] = πTemp002
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßf.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßMyType); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßg.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßMyType); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp007 = πg.KWArgs{
						{"x", πTemp005},
						{"spam", πTemp008},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("-xf g").ToObject(), πTemp005).ToObject()
					πTemp003[1] = πTemp002
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp002); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestTypeUserDefined").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTypeUserDefined.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1628: class TestTypeClassicClass(ParserTestCase):
			πF.SetLineno(1628)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTypeClassicClass", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Dict
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 []*πg.Object
				_ = πTemp006
				var πTemp007 πg.KWArgs
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1629: """Test a classic class type"""
					πF.SetLineno(1629)
					// line 1631: class C(object):
					πF.SetLineno(1631)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßobject); πE != nil {
						continue
					}
					πTemp003[0] = πTemp005
					πTemp001 = πg.NewDict()
					if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
						continue
					}
					_, πE = πg.NewCode("C", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
						πClass := πTemp001
						_ = πClass
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1633: def __init__(self, value):
							πF.SetLineno(1633)
							πTemp002 = make([]πg.Param, 2)
							πTemp002[0] = πg.Param{Name: "self", Def: nil}
							πTemp002[1] = πg.Param{Name: "value", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µself *πg.Object = πArgs[0]; _ = µself
								var µvalue *πg.Object = πArgs[1]; _ = µvalue
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1634: self.value = value
									πF.SetLineno(1634)
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µvalue); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, µself, ßvalue, πTemp001); πE != nil {
										continue
									}
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
								continue
							}
							// line 1636: __hash__ = None
							πF.SetLineno(1636)
							if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
								continue
							}
							if πE = πClass.SetItem(πF, ß__hash__.ToObject(), πTemp003); πE != nil {
								continue
							}
							// line 1638: def __eq__(self, other):
							πF.SetLineno(1638)
							πTemp002 = make([]πg.Param, 2)
							πTemp002[0] = πg.Param{Name: "self", Def: nil}
							πTemp002[1] = πg.Param{Name: "other", Def: nil}
							πTemp003 = πg.NewFunction(πg.NewCode("__eq__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µself *πg.Object = πArgs[0]; _ = µself
								var µother *πg.Object = πArgs[1]; _ = µother
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 []*πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1639: return (type(self), self.value) == (type(other), other.value)
									πF.SetLineno(1639)
									πTemp003 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									πTemp003[0] = µself
									if πTemp004, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
										continue
									}
									if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp003)
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µself, ßvalue, nil); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple2(πTemp005, πTemp004).ToObject()
									πTemp003 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
										continue
									}
									πTemp003[0] = µother
									if πTemp005, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
										continue
									}
									if πTemp006, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp003)
									if πE = πg.CheckLocal(πF, µother, "other"); πE != nil {
										continue
									}
									if πTemp005, πE = πg.GetAttr(πF, µother, ßvalue, nil); πE != nil {
										continue
									}
									πTemp004 = πg.NewTuple2(πTemp006, πTemp005).ToObject()
									if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp004); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							if πE = πClass.SetItem(πF, ß__eq__.ToObject(), πTemp003); πE != nil {
								continue
							}
						}
						return nil, nil
					}).Eval(πF, πF.Globals(), nil, nil)
					if πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
						continue
					}
					if πTemp004 == nil {
						πTemp004 = πg.TypeType.ToObject()
					}
					if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßC.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 1641: argument_signatures = [
					πF.SetLineno(1641)
					πTemp003 = make([]*πg.Object, 2)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = πg.NewStr("-x").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßC); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"type", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp002.Call(πF, πTemp006, πTemp007); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp003[0] = πTemp004
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßspam.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßC); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"type", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp002.Call(πF, πTemp006, πTemp007); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp003[1] = πTemp004
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1645: failures = []
					πF.SetLineno(1645)
					πTemp003 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1646: successes = [
					πF.SetLineno(1646)
					πTemp003 = make([]*πg.Object, 2)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßb.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßC); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßa.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßC); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp007 = πg.KWArgs{
						{"x", πTemp005},
						{"spam", πTemp008},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("a -x b").ToObject(), πTemp005).ToObject()
					πTemp003[0] = πTemp002
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßf.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßC); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = ßg.ToObject()
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßC); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp007 = πg.KWArgs{
						{"x", πTemp005},
						{"spam", πTemp008},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("-xf g").ToObject(), πTemp005).ToObject()
					πTemp003[1] = πTemp002
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp002); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestTypeClassicClass").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTypeClassicClass.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1652: class TestTypeRegistration(TestCase):
			πF.SetLineno(1652)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTypeRegistration", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1653: """Test a user-defined type by registering it"""
					πF.SetLineno(1653)
					// line 1655: def test(self):
					πF.SetLineno(1655)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µget_my_type *πg.Object = πg.UnboundLocal; _ = µget_my_type
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1657: def get_my_type(string):
							πF.SetLineno(1657)
							πTemp002 = make([]πg.Param, 1)
							πTemp002[0] = πg.Param{Name: "string", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("get_my_type", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µstring *πg.Object = πArgs[0]; _ = µstring
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1658: return 'my_type{%s}' % string
									πF.SetLineno(1658)
									if πE = πg.CheckLocal(πF, µstring, "string"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("my_type{%s}").ToObject(), µstring); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µget_my_type = πTemp001
							// line 1660: parser = argparse.ArgumentParser()
							πF.SetLineno(1660)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 1661: parser.register('type', 'my_type', get_my_type)
							πF.SetLineno(1661)
							πTemp005 = πF.MakeArgs(3)
							πTemp005[0] = ßtype.ToObject()
							πTemp005[1] = ßmy_type.ToObject()
							if πE = πg.CheckLocal(πF, µget_my_type, "get_my_type"); πE != nil {
								continue
							}
							πTemp005[2] = µget_my_type
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßregister, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1662: parser.add_argument('-x', type='my_type')
							πF.SetLineno(1662)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("-x").ToObject()
							πTemp006 = πg.KWArgs{
								{"type", ßmy_type.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1663: parser.add_argument('y', type='my_type')
							πF.SetLineno(1663)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßy.ToObject()
							πTemp006 = πg.KWArgs{
								{"type", ßmy_type.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1665: self.assertEqual(parser.parse_args('1'.split()),
							πF.SetLineno(1665)
							πTemp005 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, ß1.ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp005[0] = πTemp004
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"x", πTemp003},
								{"y", πg.NewStr("my_type{1}").ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp005[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1667: self.assertEqual(parser.parse_args('-x 1 42'.split()),
							πF.SetLineno(1667)
							πTemp005 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("-x 1 42").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp005[0] = πTemp004
							πTemp006 = πg.KWArgs{
								{"x", πg.NewStr("my_type{1}").ToObject()},
								{"y", πg.NewStr("my_type{42}").ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp005[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestTypeRegistration").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTypeRegistration.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1675: class TestActionUserDefined(ParserTestCase):
			πF.SetLineno(1675)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßParserTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestActionUserDefined", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Dict
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 πg.KWArgs
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1676: """Test a user-defined option/argument action"""
					πF.SetLineno(1676)
					// line 1678: class OptionalAction(argparse.Action):
					πF.SetLineno(1678)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßAction, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp006
					πTemp001 = πg.NewDict()
					if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
						continue
					}
					_, πE = πg.NewCode("OptionalAction", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
						πClass := πTemp001
						_ = πClass
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1680: def __call__(self, parser, namespace, value, option_string=None):
							πF.SetLineno(1680)
							πTemp002 = make([]πg.Param, 5)
							πTemp002[0] = πg.Param{Name: "self", Def: nil}
							πTemp002[1] = πg.Param{Name: "parser", Def: nil}
							πTemp002[2] = πg.Param{Name: "namespace", Def: nil}
							πTemp002[3] = πg.Param{Name: "value", Def: nil}
							if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
								continue
							}
							πTemp002[4] = πg.Param{Name: "option_string", Def: πTemp003}
							πTemp001 = πg.NewFunction(πg.NewCode("__call__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µself *πg.Object = πArgs[0]; _ = µself
								var µparser *πg.Object = πArgs[1]; _ = µparser
								var µnamespace *πg.Object = πArgs[2]; _ = µnamespace
								var µvalue *πg.Object = πArgs[3]; _ = µvalue
								var µoption_string *πg.Object = πArgs[4]; _ = µoption_string
								var µexpected_ns *πg.Object = πg.UnboundLocal; _ = µexpected_ns
								var µe *πg.Object = πg.UnboundLocal; _ = µe
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 πg.KWArgs
								_ = πTemp004
								var πTemp005 []*πg.Object
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 *πg.BaseException
								_ = πTemp007
								var πTemp008 *πg.Traceback
								_ = πTemp008
								var πTemp009 *πg.Object
								_ = πTemp009
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									case 2: goto Label2
									default: panic("unexpected function state")
									}
									// line 1681: try:
									πF.SetLineno(1681)
									πF.PushCheckpoint(2)
									// line 1683: assert self.dest == 'spam', 'dest: %s' % self.dest
									πF.SetLineno(1683)
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µself, ßdest, nil); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("dest: %s").ToObject(), πTemp002); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.GetAttr(πF, µself, ßdest, nil); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Eq(πF, πTemp003, ßspam.ToObject()); πE != nil {
										continue
									}
									if πE = πg.Assert(πF, πTemp002, πTemp001); πE != nil {
										continue
									}
									// line 1684: assert option_string == '-s', 'flag: %s' % option_string
									πF.SetLineno(1684)
									if πE = πg.CheckLocal(πF, µoption_string, "option_string"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("flag: %s").ToObject(), µoption_string); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µoption_string, "option_string"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Eq(πF, µoption_string, πg.NewStr("-s").ToObject()); πE != nil {
										continue
									}
									if πE = πg.Assert(πF, πTemp002, πTemp001); πE != nil {
										continue
									}
									// line 1687: expected_ns = NS(spam=0.25)
									πF.SetLineno(1687)
									πTemp004 = πg.KWArgs{
										{"spam", πg.NewFloat(0.25).ToObject()},
									}
									if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
										continue
									}
									µexpected_ns = πTemp002
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									πTemp005 = make([]*πg.Object, 2)
									πTemp005[0] = πg.NewFloat(0.125).ToObject()
									πTemp005[1] = πg.NewFloat(0.625).ToObject()
									πTemp002 = πg.NewList(πTemp005...).ToObject()
									if πTemp006, πE = πg.Contains(πF, πTemp002, µvalue); πE != nil {
										continue
									}
									πTemp001 = πg.GetBool(πTemp006).ToObject()
									if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
										continue
									}
									if πTemp006 {
										goto Label3
									}
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									πTemp005 = make([]*πg.Object, 1)
									πTemp005[0] = πg.NewFloat(2.0).ToObject()
									πTemp002 = πg.NewList(πTemp005...).ToObject()
									if πTemp006, πE = πg.Contains(πF, πTemp002, µvalue); πE != nil {
										continue
									}
									πTemp001 = πg.GetBool(πTemp006).ToObject()
									if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
										continue
									}
									if πTemp006 {
										goto Label4
									}
									goto Label5
									// line 1688: if value in [0.125, 0.625]:
									πF.SetLineno(1688)
								Label3:
									// line 1689: expected_ns.badger = 2
									πF.SetLineno(1689)
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewInt(2).ToObject()); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, µexpected_ns, ßbadger, πTemp001); πE != nil {
										continue
									}
									goto Label6
									// line 1690: elif value in [2.0]:
									πF.SetLineno(1690)
								Label4:
									// line 1691: expected_ns.badger = 84
									πF.SetLineno(1691)
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewInt(84).ToObject()); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, µexpected_ns, ßbadger, πTemp001); πE != nil {
										continue
									}
									goto Label6
								Label5:
									πTemp005 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("value: %s").ToObject(), µvalue); πE != nil {
										continue
									}
									πTemp005[0] = πTemp001
									if πTemp001, πE = πg.ResolveGlobal(πF, ßAssertionError); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp005)
									// line 1693: raise AssertionError('value: %s' % value)
									πF.SetLineno(1693)
									πE = πF.Raise(πTemp002, nil, nil)
									continue
									goto Label6
								Label6:
									// line 1694: assert expected_ns == namespace, ('expected %s, got %s' %
									πF.SetLineno(1694)
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnamespace, "namespace"); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple2(µexpected_ns, µnamespace).ToObject()
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("expected %s, got %s").ToObject(), πTemp002); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnamespace, "namespace"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Eq(πF, µexpected_ns, µnamespace); πE != nil {
										continue
									}
									if πE = πg.Assert(πF, πTemp002, πTemp001); πE != nil {
										continue
									}
									πF.PopCheckpoint()
									goto Label1
								Label2:
									if πE == nil {
									  continue
									}
									πE = nil
									πTemp007, πTemp008 = πF.ExcInfo()
									if πTemp001, πE = πg.ResolveGlobal(πF, ßAssertionError); πE != nil {
										continue
									}
									if πTemp006, πE = πg.IsInstance(πF, πTemp007.ToObject(), πTemp001); πE != nil {
										continue
									}
									if πTemp006 {
										goto Label7
									}
									πE = πF.Raise(πTemp007.ToObject(), nil, πTemp008.ToObject())
									continue
									// line 1696: except AssertionError:
									πF.SetLineno(1696)
								Label7:
									// line 1697: e = sys.exc_info()[1]
									πF.SetLineno(1697)
									πTemp001 = πg.NewInt(1).ToObject()
									if πTemp003, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
										continue
									}
									if πTemp009, πE = πg.GetAttr(πF, πTemp003, ßexc_info, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp009.Call(πF, nil, nil); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
										continue
									}
									µe = πTemp002
									πTemp005 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("opt_action failed: %s").ToObject(), µe); πE != nil {
										continue
									}
									πTemp005[0] = πTemp001
									if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp005)
									// line 1698: raise ArgumentParserError('opt_action failed: %s' % e)
									πF.SetLineno(1698)
									πE = πF.Raise(πTemp002, nil, nil)
									continue
									πF.RestoreExc(nil, nil)
									goto Label1
								Label1:
									// line 1699: setattr(namespace, 'spam', value)
									πF.SetLineno(1699)
									πTemp005 = πF.MakeArgs(3)
									if πE = πg.CheckLocal(πF, µnamespace, "namespace"); πE != nil {
										continue
									}
									πTemp005[0] = µnamespace
									πTemp005[1] = ßspam.ToObject()
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									πTemp005[2] = µvalue
									if πTemp001, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp005)
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							if πE = πClass.SetItem(πF, ß__call__.ToObject(), πTemp001); πE != nil {
								continue
							}
						}
						return nil, nil
					}).Eval(πF, πF.Globals(), nil, nil)
					if πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
						continue
					}
					if πTemp004 == nil {
						πTemp004 = πg.TypeType.ToObject()
					}
					if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("OptionalAction").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßOptionalAction.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 1701: class PositionalAction(argparse.Action):
					πF.SetLineno(1701)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßAction, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp006
					πTemp001 = πg.NewDict()
					if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
						continue
					}
					_, πE = πg.NewCode("PositionalAction", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
						πClass := πTemp001
						_ = πClass
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1703: def __call__(self, parser, namespace, value, option_string=None):
							πF.SetLineno(1703)
							πTemp002 = make([]πg.Param, 5)
							πTemp002[0] = πg.Param{Name: "self", Def: nil}
							πTemp002[1] = πg.Param{Name: "parser", Def: nil}
							πTemp002[2] = πg.Param{Name: "namespace", Def: nil}
							πTemp002[3] = πg.Param{Name: "value", Def: nil}
							if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
								continue
							}
							πTemp002[4] = πg.Param{Name: "option_string", Def: πTemp003}
							πTemp001 = πg.NewFunction(πg.NewCode("__call__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µself *πg.Object = πArgs[0]; _ = µself
								var µparser *πg.Object = πArgs[1]; _ = µparser
								var µnamespace *πg.Object = πArgs[2]; _ = µnamespace
								var µvalue *πg.Object = πArgs[3]; _ = µvalue
								var µoption_string *πg.Object = πArgs[4]; _ = µoption_string
								var µexpected_ns *πg.Object = πg.UnboundLocal; _ = µexpected_ns
								var µe *πg.Object = πg.UnboundLocal; _ = µe
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 πg.KWArgs
								_ = πTemp004
								var πTemp005 []*πg.Object
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 *πg.BaseException
								_ = πTemp007
								var πTemp008 *πg.Traceback
								_ = πTemp008
								var πTemp009 *πg.Object
								_ = πTemp009
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									case 2: goto Label2
									default: panic("unexpected function state")
									}
									// line 1704: try:
									πF.SetLineno(1704)
									πF.PushCheckpoint(2)
									// line 1705: assert option_string is None, ('option_string: %s' %
									πF.SetLineno(1705)
									if πE = πg.CheckLocal(πF, µoption_string, "option_string"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("option_string: %s").ToObject(), µoption_string); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µoption_string, "option_string"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
										continue
									}
									πTemp002 = πg.GetBool(µoption_string == πTemp003).ToObject()
									if πE = πg.Assert(πF, πTemp002, πTemp001); πE != nil {
										continue
									}
									// line 1708: assert self.dest == 'badger', 'dest: %s' % self.dest
									πF.SetLineno(1708)
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µself, ßdest, nil); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("dest: %s").ToObject(), πTemp002); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.GetAttr(πF, µself, ßdest, nil); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Eq(πF, πTemp003, ßbadger.ToObject()); πE != nil {
										continue
									}
									if πE = πg.Assert(πF, πTemp002, πTemp001); πE != nil {
										continue
									}
									// line 1711: expected_ns = NS(badger=2)
									πF.SetLineno(1711)
									πTemp004 = πg.KWArgs{
										{"badger", πg.NewInt(2).ToObject()},
									}
									if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
										continue
									}
									µexpected_ns = πTemp002
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									πTemp005 = make([]*πg.Object, 2)
									πTemp005[0] = πg.NewInt(42).ToObject()
									πTemp005[1] = πg.NewInt(84).ToObject()
									πTemp002 = πg.NewList(πTemp005...).ToObject()
									if πTemp006, πE = πg.Contains(πF, πTemp002, µvalue); πE != nil {
										continue
									}
									πTemp001 = πg.GetBool(πTemp006).ToObject()
									if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
										continue
									}
									if πTemp006 {
										goto Label3
									}
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									πTemp005 = make([]*πg.Object, 1)
									πTemp005[0] = πg.NewInt(1).ToObject()
									πTemp002 = πg.NewList(πTemp005...).ToObject()
									if πTemp006, πE = πg.Contains(πF, πTemp002, µvalue); πE != nil {
										continue
									}
									πTemp001 = πg.GetBool(πTemp006).ToObject()
									if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
										continue
									}
									if πTemp006 {
										goto Label4
									}
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									πTemp005 = make([]*πg.Object, 1)
									πTemp005[0] = πg.NewInt(2).ToObject()
									πTemp002 = πg.NewList(πTemp005...).ToObject()
									if πTemp006, πE = πg.Contains(πF, πTemp002, µvalue); πE != nil {
										continue
									}
									πTemp001 = πg.GetBool(πTemp006).ToObject()
									if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
										continue
									}
									if πTemp006 {
										goto Label5
									}
									goto Label6
									// line 1712: if value in [42, 84]:
									πF.SetLineno(1712)
								Label3:
									// line 1713: expected_ns.spam = 0.25
									πF.SetLineno(1713)
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewFloat(0.25).ToObject()); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, µexpected_ns, ßspam, πTemp001); πE != nil {
										continue
									}
									goto Label7
									// line 1714: elif value in [1]:
									πF.SetLineno(1714)
								Label4:
									// line 1715: expected_ns.spam = 0.625
									πF.SetLineno(1715)
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewFloat(0.625).ToObject()); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, µexpected_ns, ßspam, πTemp001); πE != nil {
										continue
									}
									goto Label7
									// line 1716: elif value in [2]:
									πF.SetLineno(1716)
								Label5:
									// line 1717: expected_ns.spam = 0.125
									πF.SetLineno(1717)
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewFloat(0.125).ToObject()); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.SetAttr(πF, µexpected_ns, ßspam, πTemp001); πE != nil {
										continue
									}
									goto Label7
								Label6:
									πTemp005 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("value: %s").ToObject(), µvalue); πE != nil {
										continue
									}
									πTemp005[0] = πTemp001
									if πTemp001, πE = πg.ResolveGlobal(πF, ßAssertionError); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp005)
									// line 1719: raise AssertionError('value: %s' % value)
									πF.SetLineno(1719)
									πE = πF.Raise(πTemp002, nil, nil)
									continue
									goto Label7
								Label7:
									// line 1720: assert expected_ns == namespace, ('expected %s, got %s' %
									πF.SetLineno(1720)
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnamespace, "namespace"); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple2(µexpected_ns, µnamespace).ToObject()
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("expected %s, got %s").ToObject(), πTemp002); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnamespace, "namespace"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Eq(πF, µexpected_ns, µnamespace); πE != nil {
										continue
									}
									if πE = πg.Assert(πF, πTemp002, πTemp001); πE != nil {
										continue
									}
									πF.PopCheckpoint()
									goto Label1
								Label2:
									if πE == nil {
									  continue
									}
									πE = nil
									πTemp007, πTemp008 = πF.ExcInfo()
									if πTemp001, πE = πg.ResolveGlobal(πF, ßAssertionError); πE != nil {
										continue
									}
									if πTemp006, πE = πg.IsInstance(πF, πTemp007.ToObject(), πTemp001); πE != nil {
										continue
									}
									if πTemp006 {
										goto Label8
									}
									πE = πF.Raise(πTemp007.ToObject(), nil, πTemp008.ToObject())
									continue
									// line 1722: except AssertionError:
									πF.SetLineno(1722)
								Label8:
									// line 1723: e = sys.exc_info()[1]
									πF.SetLineno(1723)
									πTemp001 = πg.NewInt(1).ToObject()
									if πTemp003, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
										continue
									}
									if πTemp009, πE = πg.GetAttr(πF, πTemp003, ßexc_info, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp009.Call(πF, nil, nil); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
										continue
									}
									µe = πTemp002
									πTemp005 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("arg_action failed: %s").ToObject(), µe); πE != nil {
										continue
									}
									πTemp005[0] = πTemp001
									if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp005)
									// line 1724: raise ArgumentParserError('arg_action failed: %s' % e)
									πF.SetLineno(1724)
									πE = πF.Raise(πTemp002, nil, nil)
									continue
									πF.RestoreExc(nil, nil)
									goto Label1
								Label1:
									// line 1725: setattr(namespace, 'badger', value)
									πF.SetLineno(1725)
									πTemp005 = πF.MakeArgs(3)
									if πE = πg.CheckLocal(πF, µnamespace, "namespace"); πE != nil {
										continue
									}
									πTemp005[0] = µnamespace
									πTemp005[1] = ßbadger.ToObject()
									if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
										continue
									}
									πTemp005[2] = µvalue
									if πTemp001, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp005)
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							if πE = πClass.SetItem(πF, ß__call__.ToObject(), πTemp001); πE != nil {
								continue
							}
						}
						return nil, nil
					}).Eval(πF, πF.Globals(), nil, nil)
					if πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
						continue
					}
					if πTemp004 == nil {
						πTemp004 = πg.TypeType.ToObject()
					}
					if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("PositionalAction").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßPositionalAction.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 1727: argument_signatures = [
					πF.SetLineno(1727)
					πTemp003 = make([]*πg.Object, 2)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-s").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßOptionalAction); πE != nil {
						continue
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßfloat); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"dest", ßspam.ToObject()},
						{"action", πTemp002},
						{"type", πTemp004},
						{"default", πg.NewFloat(0.25).ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp002.Call(πF, πTemp007, πTemp008); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp003[0] = πTemp004
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßbadger.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßPositionalAction); πE != nil {
						continue
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"action", πTemp002},
						{"type", πTemp004},
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", πg.NewInt(2).ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp002.Call(πF, πTemp007, πTemp008); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp003[1] = πTemp004
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1733: failures = []
					πF.SetLineno(1733)
					πTemp003 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 1734: successes = [
					πF.SetLineno(1734)
					πTemp003 = make([]*πg.Object, 4)
					πTemp008 = πg.KWArgs{
						{"spam", πg.NewFloat(0.125).ToObject()},
						{"badger", πg.NewInt(2).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("-s0.125").ToObject(), πTemp005).ToObject()
					πTemp003[0] = πTemp002
					πTemp008 = πg.KWArgs{
						{"spam", πg.NewFloat(0.25).ToObject()},
						{"badger", πg.NewInt(42).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(ß42.ToObject(), πTemp005).ToObject()
					πTemp003[1] = πTemp002
					πTemp008 = πg.KWArgs{
						{"spam", πg.NewFloat(0.625).ToObject()},
						{"badger", πg.NewInt(1).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("-s 0.625 1").ToObject(), πTemp005).ToObject()
					πTemp003[2] = πTemp002
					πTemp008 = πg.KWArgs{
						{"spam", πg.NewFloat(2.0).ToObject()},
						{"badger", πg.NewInt(84).ToObject()},
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp004.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewStr("84 -s2").ToObject(), πTemp005).ToObject()
					πTemp003[3] = πTemp002
					πTemp002 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp002); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestActionUserDefined").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestActionUserDefined.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1742: class TestActionRegistration(TestCase):
			πF.SetLineno(1742)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestActionRegistration", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Dict
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []πg.Param
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1743: """Test a user-defined action supplied by registering it"""
					πF.SetLineno(1743)
					// line 1745: class MyAction(argparse.Action):
					πF.SetLineno(1745)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßAction, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp006
					πTemp001 = πg.NewDict()
					if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
						continue
					}
					_, πE = πg.NewCode("MyAction", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
						πClass := πTemp001
						_ = πClass
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1747: def __call__(self, parser, namespace, values, option_string=None):
							πF.SetLineno(1747)
							πTemp002 = make([]πg.Param, 5)
							πTemp002[0] = πg.Param{Name: "self", Def: nil}
							πTemp002[1] = πg.Param{Name: "parser", Def: nil}
							πTemp002[2] = πg.Param{Name: "namespace", Def: nil}
							πTemp002[3] = πg.Param{Name: "values", Def: nil}
							if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
								continue
							}
							πTemp002[4] = πg.Param{Name: "option_string", Def: πTemp003}
							πTemp001 = πg.NewFunction(πg.NewCode("__call__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µself *πg.Object = πArgs[0]; _ = µself
								var µparser *πg.Object = πArgs[1]; _ = µparser
								var µnamespace *πg.Object = πArgs[2]; _ = µnamespace
								var µvalues *πg.Object = πArgs[3]; _ = µvalues
								var µoption_string *πg.Object = πArgs[4]; _ = µoption_string
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1748: setattr(namespace, self.dest, 'foo[%s]' % values)
									πF.SetLineno(1748)
									πTemp001 = πF.MakeArgs(3)
									if πE = πg.CheckLocal(πF, µnamespace, "namespace"); πE != nil {
										continue
									}
									πTemp001[0] = µnamespace
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µself, ßdest, nil); πE != nil {
										continue
									}
									πTemp001[1] = πTemp002
									if πE = πg.CheckLocal(πF, µvalues, "values"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Mod(πF, πg.NewStr("foo[%s]").ToObject(), µvalues); πE != nil {
										continue
									}
									πTemp001[2] = πTemp002
									if πTemp002, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							if πE = πClass.SetItem(πF, ß__call__.ToObject(), πTemp001); πE != nil {
								continue
							}
						}
						return nil, nil
					}).Eval(πF, πF.Globals(), nil, nil)
					if πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
						continue
					}
					if πTemp004 == nil {
						πTemp004 = πg.TypeType.ToObject()
					}
					if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("MyAction").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßMyAction.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 1750: def test(self):
					πF.SetLineno(1750)
					πTemp007 = make([]πg.Param, 1)
					πTemp007[0] = πg.Param{Name: "self", Def: nil}
					πTemp002 = πg.NewFunction(πg.NewCode("test", "build/src/__python__/test/test_argparse.py", πTemp007, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1752: parser = argparse.ArgumentParser()
							πF.SetLineno(1752)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 1753: parser.register('action', 'my_action', self.MyAction)
							πF.SetLineno(1753)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = ßaction.ToObject()
							πTemp003[1] = ßmy_action.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßMyAction, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßregister, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1754: parser.add_argument('badger', action='my_action')
							πF.SetLineno(1754)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbadger.ToObject()
							πTemp004 = πg.KWArgs{
								{"action", ßmy_action.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1756: self.assertEqual(parser.parse_args(['1']), NS(badger='foo[1]'))
							πF.SetLineno(1756)
							πTemp003 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 1)
							πTemp006[0] = ß1.ToObject()
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							πTemp004 = πg.KWArgs{
								{"badger", πg.NewStr("foo[1]").ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1757: self.assertEqual(parser.parse_args(['42']), NS(badger='foo[42]'))
							πF.SetLineno(1757)
							πTemp003 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 1)
							πTemp006[0] = ß42.ToObject()
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							πTemp004 = πg.KWArgs{
								{"badger", πg.NewStr("foo[42]").ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest.ToObject(), πTemp002); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestActionRegistration").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestActionRegistration.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 1764: class TestAddSubparsers(TestCase):
			πF.SetLineno(1764)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestAddSubparsers", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 []*πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1765: """Test the add_subparsers method"""
					πF.SetLineno(1765)
					// line 1767: def assertArgumentParserError(self, *args, **kwargs):
					πF.SetLineno(1767)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("assertArgumentParserError", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1768: self.assertRaises(ArgumentParserError, *args, **kwargs)
							πF.SetLineno(1768)
							πTemp001 = πF.MakeArgs(1)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, πTemp001, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertArgumentParserError.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1770: def _get_parser(self, subparser_help=False, prefix_chars=None):
					πF.SetLineno(1770)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002[1] = πg.Param{Name: "subparser_help", Def: πTemp004}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "prefix_chars", Def: πTemp004}
					πTemp003 = πg.NewFunction(πg.NewCode("_get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µsubparser_help *πg.Object = πArgs[1]; _ = µsubparser_help
						var µprefix_chars *πg.Object = πArgs[2]; _ = µprefix_chars
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µsubparsers *πg.Object = πg.UnboundLocal; _ = µsubparsers
						var µparser1_kwargs *πg.Object = πg.UnboundLocal; _ = µparser1_kwargs
						var µparser1 *πg.Object = πg.UnboundLocal; _ = µparser1
						var µparser2_kwargs *πg.Object = πg.UnboundLocal; _ = µparser2_kwargs
						var µparser2 *πg.Object = πg.UnboundLocal; _ = µparser2
						var µparser3_kwargs *πg.Object = πg.UnboundLocal; _ = µparser3_kwargs
						var µparser3 *πg.Object = πg.UnboundLocal; _ = µparser3
						var πTemp001 bool
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µprefix_chars, "prefix_chars"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IsTrue(πF, µprefix_chars); πE != nil {
								continue
							}
							if πTemp001 {
								goto Label1
							}
							goto Label2
							// line 1772: if prefix_chars:
							πF.SetLineno(1772)
						Label1:
							// line 1773: parser = ErrorRaisingArgumentParser(
							πF.SetLineno(1773)
							if πE = πg.CheckLocal(πF, µprefix_chars, "prefix_chars"); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
								{"description", πg.NewStr("main description").ToObject()},
								{"prefix_chars", µprefix_chars},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 1775: parser.add_argument(
							πF.SetLineno(1775)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µprefix_chars, "prefix_chars"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, µprefix_chars, πTemp006); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Mul(πF, πTemp007, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp004, ßfoo.ToObject()); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							πTemp002 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("foo help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label2:
							// line 1778: parser = ErrorRaisingArgumentParser(
							πF.SetLineno(1778)
							πTemp002 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
								{"description", πg.NewStr("main description").ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 1780: parser.add_argument(
							πF.SetLineno(1780)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("--foo").ToObject()
							πTemp002 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("foo help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
							// line 1782: parser.add_argument(
							πF.SetLineno(1782)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßbar.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"type", πTemp003},
								{"help", πg.NewStr("bar help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1786: subparsers = parser.add_subparsers(help='command help')
							πF.SetLineno(1786)
							πTemp002 = πg.KWArgs{
								{"help", πg.NewStr("command help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µsubparsers = πTemp004
							// line 1787: self.assertArgumentParserError(parser.add_subparsers)
							πF.SetLineno(1787)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1790: parser1_kwargs = dict(description='1 description')
							πF.SetLineno(1790)
							πTemp002 = πg.KWArgs{
								{"description", πg.NewStr("1 description").ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßdict); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser1_kwargs = πTemp004
							if πE = πg.CheckLocal(πF, µsubparser_help, "subparser_help"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IsTrue(πF, µsubparser_help); πE != nil {
								continue
							}
							if πTemp001 {
								goto Label4
							}
							goto Label5
							// line 1791: if subparser_help:
							πF.SetLineno(1791)
						Label4:
							// line 1792: parser1_kwargs['help'] = '1 help'
							πF.SetLineno(1792)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πg.NewStr("1 help").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µparser1_kwargs, "parser1_kwargs"); πE != nil {
								continue
							}
							πTemp004 = ßhelp.ToObject()
							if πE = πg.SetItem(πF, µparser1_kwargs, πTemp004, πTemp003); πE != nil {
								continue
							}
							goto Label5
						Label5:
							// line 1793: parser1 = subparsers.add_parser('1', **parser1_kwargs)
							πF.SetLineno(1793)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ß1.ToObject()
							if πE = πg.CheckLocal(πF, µparser1_kwargs, "parser1_kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp003, πTemp005, nil, nil, µparser1_kwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µparser1 = πTemp004
							// line 1794: parser1.add_argument('-w', type=int, help='w help')
							πF.SetLineno(1794)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("-w").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"type", πTemp003},
								{"help", πg.NewStr("w help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser1, "parser1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser1, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1795: parser1.add_argument('x', choices='abc', help='x help')
							πF.SetLineno(1795)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßx.ToObject()
							πTemp002 = πg.KWArgs{
								{"choices", ßabc.ToObject()},
								{"help", πg.NewStr("x help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser1, "parser1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser1, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1798: parser2_kwargs = dict(description='2 description')
							πF.SetLineno(1798)
							πTemp002 = πg.KWArgs{
								{"description", πg.NewStr("2 description").ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßdict); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser2_kwargs = πTemp004
							if πE = πg.CheckLocal(πF, µsubparser_help, "subparser_help"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IsTrue(πF, µsubparser_help); πE != nil {
								continue
							}
							if πTemp001 {
								goto Label6
							}
							goto Label7
							// line 1799: if subparser_help:
							πF.SetLineno(1799)
						Label6:
							// line 1800: parser2_kwargs['help'] = '2 help'
							πF.SetLineno(1800)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πg.NewStr("2 help").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µparser2_kwargs, "parser2_kwargs"); πE != nil {
								continue
							}
							πTemp004 = ßhelp.ToObject()
							if πE = πg.SetItem(πF, µparser2_kwargs, πTemp004, πTemp003); πE != nil {
								continue
							}
							goto Label7
						Label7:
							// line 1801: parser2 = subparsers.add_parser('2', **parser2_kwargs)
							πF.SetLineno(1801)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ß2.ToObject()
							if πE = πg.CheckLocal(πF, µparser2_kwargs, "parser2_kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp003, πTemp005, nil, nil, µparser2_kwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µparser2 = πTemp004
							// line 1802: parser2.add_argument('-y', choices='123', help='y help')
							πF.SetLineno(1802)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("-y").ToObject()
							πTemp002 = πg.KWArgs{
								{"choices", ß123.ToObject()},
								{"help", πg.NewStr("y help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser2, "parser2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser2, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1806: parser3_kwargs = dict(description='3 description')
							πF.SetLineno(1806)
							πTemp002 = πg.KWArgs{
								{"description", πg.NewStr("3 description").ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßdict); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser3_kwargs = πTemp004
							if πE = πg.CheckLocal(πF, µsubparser_help, "subparser_help"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IsTrue(πF, µsubparser_help); πE != nil {
								continue
							}
							if πTemp001 {
								goto Label8
							}
							goto Label9
							// line 1807: if subparser_help:
							πF.SetLineno(1807)
						Label8:
							// line 1808: parser3_kwargs['help'] = '3 help'
							πF.SetLineno(1808)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πg.NewStr("3 help").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µparser3_kwargs, "parser3_kwargs"); πE != nil {
								continue
							}
							πTemp004 = ßhelp.ToObject()
							if πE = πg.SetItem(πF, µparser3_kwargs, πTemp004, πTemp003); πE != nil {
								continue
							}
							goto Label9
						Label9:
							// line 1809: parser3 = subparsers.add_parser('3', **parser3_kwargs)
							πF.SetLineno(1809)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ß3.ToObject()
							if πE = πg.CheckLocal(πF, µparser3_kwargs, "parser3_kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp003, πTemp005, nil, nil, µparser3_kwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µparser3 = πTemp004
							// line 1810: parser3.add_argument('t', type=int, help='t help')
							πF.SetLineno(1810)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßt.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"type", πTemp003},
								{"help", πg.NewStr("t help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser3, "parser3"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser3, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1811: parser3.add_argument('u', nargs='...', help='u help')
							πF.SetLineno(1811)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßu.ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("...").ToObject()},
								{"help", πg.NewStr("u help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser3, "parser3"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser3, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1814: return parser
							πF.SetLineno(1814)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß_get_parser.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1816: def setUp(self):
					πF.SetLineno(1816)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("setUp", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1817: super(TestAddSubparsers, self).setUp()
							πF.SetLineno(1817)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTestAddSubparsers); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[1] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsuper); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsetUp, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1818: self.parser = self._get_parser()
							πF.SetLineno(1818)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßparser, πTemp002); πE != nil {
								continue
							}
							// line 1819: self.command_help_parser = self._get_parser(subparser_help=True)
							πF.SetLineno(1819)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"subparser_help", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcommand_help_parser, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsetUp.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1821: def test_parse_args_failures(self):
					πF.SetLineno(1821)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_parse_args_failures", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs_str *πg.Object = πg.UnboundLocal; _ = µargs_str
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp002 = make([]*πg.Object, 7)
							πTemp002[0] = ß.ToObject()
							πTemp002[1] = ßa.ToObject()
							πTemp002[2] = πg.NewStr("a a").ToObject()
							πTemp002[3] = πg.NewStr("0.5 a").ToObject()
							πTemp002[4] = πg.NewStr("0.5 1").ToObject()
							πTemp002[5] = πg.NewStr("0.5 1 -y").ToObject()
							πTemp002[6] = πg.NewStr("0.5 2 -w").ToObject()
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µargs_str = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1825: args = args_str.split()
							πF.SetLineno(1825)
							if πE = πg.CheckLocal(πF, µargs_str, "args_str"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µargs_str, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µargs = πTemp006
							// line 1826: self.assertArgumentParserError(self.parser.parse_args, args)
							πF.SetLineno(1826)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp006
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp002[1] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_parse_args_failures.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 1828: def test_parse_args(self):
					πF.SetLineno(1828)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_parse_args", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1830: self.assertEqual(
							πF.SetLineno(1830)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("0.5 1 b -w 7").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"foo", πTemp003},
								{"bar", πg.NewFloat(0.5).ToObject()},
								{"w", πg.NewInt(7).ToObject()},
								{"x", ßb.ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1838: self.assertEqual(
							πF.SetLineno(1838)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("--foo 0.125 1 c").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"foo", πTemp003},
								{"bar", πg.NewFloat(0.125).ToObject()},
								{"w", πTemp004},
								{"x", ßc.ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1842: self.assertEqual(
							πF.SetLineno(1842)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("-1.5 3 11 -- a --foo 7 -- b").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Neg(πF, πg.NewFloat(1.5).ToObject()); πE != nil {
								continue
							}
							πTemp002 = make([]*πg.Object, 5)
							πTemp002[0] = ßa.ToObject()
							πTemp002[1] = πg.NewStr("--foo").ToObject()
							πTemp002[2] = ß7.ToObject()
							πTemp002[3] = πg.NewStr("--").ToObject()
							πTemp002[4] = ßb.ToObject()
							πTemp006 = πg.NewList(πTemp002...).ToObject()
							πTemp005 = πg.KWArgs{
								{"foo", πTemp003},
								{"bar", πTemp004},
								{"t", πg.NewInt(11).ToObject()},
								{"u", πTemp006},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_parse_args.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 1847: def test_parse_known_args(self):
					πF.SetLineno(1847)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_parse_known_args", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1848: self.assertEqual(
							πF.SetLineno(1848)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("0.5 1 b -w 7").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_known_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"foo", πTemp004},
								{"bar", πg.NewFloat(0.5).ToObject()},
								{"w", πg.NewInt(7).ToObject()},
								{"x", ßb.ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp002 = make([]*πg.Object, 0)
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp003 = πg.NewTuple2(πTemp006, πTemp004).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1852: self.assertEqual(
							πF.SetLineno(1852)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("0.5 -p 1 b -w 7").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_known_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"foo", πTemp004},
								{"bar", πg.NewFloat(0.5).ToObject()},
								{"w", πg.NewInt(7).ToObject()},
								{"x", ßb.ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp002 = make([]*πg.Object, 1)
							πTemp002[0] = πg.NewStr("-p").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp003 = πg.NewTuple2(πTemp006, πTemp004).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1856: self.assertEqual(
							πF.SetLineno(1856)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("0.5 1 b -w 7 -p").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_known_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"foo", πTemp004},
								{"bar", πg.NewFloat(0.5).ToObject()},
								{"w", πg.NewInt(7).ToObject()},
								{"x", ßb.ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp002 = make([]*πg.Object, 1)
							πTemp002[0] = πg.NewStr("-p").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp003 = πg.NewTuple2(πTemp006, πTemp004).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1860: self.assertEqual(
							πF.SetLineno(1860)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("0.5 1 b -q -rs -w 7").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_known_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"foo", πTemp004},
								{"bar", πg.NewFloat(0.5).ToObject()},
								{"w", πg.NewInt(7).ToObject()},
								{"x", ßb.ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp002 = make([]*πg.Object, 2)
							πTemp002[0] = πg.NewStr("-q").ToObject()
							πTemp002[1] = πg.NewStr("-rs").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp003 = πg.NewTuple2(πTemp006, πTemp004).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1864: self.assertEqual(
							πF.SetLineno(1864)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("0.5 -W 1 b -X Y -w 7 Z").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparse_known_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"foo", πTemp004},
								{"bar", πg.NewFloat(0.5).ToObject()},
								{"w", πg.NewInt(7).ToObject()},
								{"x", ßb.ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp002 = make([]*πg.Object, 4)
							πTemp002[0] = πg.NewStr("-W").ToObject()
							πTemp002[1] = πg.NewStr("-X").ToObject()
							πTemp002[2] = ßY.ToObject()
							πTemp002[3] = ßZ.ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp003 = πg.NewTuple2(πTemp006, πTemp004).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_parse_known_args.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 1869: def test_dest(self):
					πF.SetLineno(1869)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_dest", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µsubparsers *πg.Object = πg.UnboundLocal; _ = µsubparsers
						var µparser1 *πg.Object = πg.UnboundLocal; _ = µparser1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1870: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(1870)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 1871: parser.add_argument('--foo', action='store_true')
							πF.SetLineno(1871)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--foo").ToObject()
							πTemp004 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1872: subparsers = parser.add_subparsers(dest='bar')
							πF.SetLineno(1872)
							πTemp004 = πg.KWArgs{
								{"dest", ßbar.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µsubparsers = πTemp002
							// line 1873: parser1 = subparsers.add_parser('1')
							πF.SetLineno(1873)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ß1.ToObject()
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µparser1 = πTemp002
							// line 1874: parser1.add_argument('baz')
							πF.SetLineno(1874)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbaz.ToObject()
							if πE = πg.CheckLocal(πF, µparser1, "parser1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser1, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1875: self.assertEqual(NS(foo=False, bar='1', baz='2'),
							πF.SetLineno(1875)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"foo", πTemp001},
								{"bar", ß1.ToObject()},
								{"baz", ß2.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("1 2").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_dest.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 1878: def test_help(self):
					πF.SetLineno(1878)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1879: self.assertEqual(self.parser.format_usage(),
							πF.SetLineno(1879)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßformat_usage, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("usage: PROG [-h] [--foo] bar {1,2,3} ...\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1881: self.assertEqual(self.parser.format_help(), textwrap.dedent('''\
							πF.SetLineno(1881)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("            usage: PROG [-h] [--foo] bar {1,2,3} ...\n\n            main description\n\n            positional arguments:\n              bar         bar help\n              {1,2,3}     command help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              --foo       foo help\n            ").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_help.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 1895: def test_help_extra_prefix_chars(self):
					πF.SetLineno(1895)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_help_extra_prefix_chars", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1897: parser = self._get_parser(prefix_chars='+:-')
							πF.SetLineno(1897)
							πTemp001 = πg.KWArgs{
								{"prefix_chars", πg.NewStr("+:-").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 1898: self.assertEqual(parser.format_usage(),
							πF.SetLineno(1898)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_usage, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp004[1] = πg.NewStr("usage: PROG [-h] [++foo] bar {1,2,3} ...\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1900: self.assertEqual(parser.format_help(), textwrap.dedent('''\
							πF.SetLineno(1900)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("            usage: PROG [-h] [++foo] bar {1,2,3} ...\n\n            main description\n\n            positional arguments:\n              bar         bar help\n              {1,2,3}     command help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              ++foo       foo help\n            ").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_help_extra_prefix_chars.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 1915: def test_help_alternate_prefix_chars(self):
					πF.SetLineno(1915)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_help_alternate_prefix_chars", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1916: parser = self._get_parser(prefix_chars='+:/')
							πF.SetLineno(1916)
							πTemp001 = πg.KWArgs{
								{"prefix_chars", πg.NewStr("+:/").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 1917: self.assertEqual(parser.format_usage(),
							πF.SetLineno(1917)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_usage, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp004[1] = πg.NewStr("usage: PROG [+h] [++foo] bar {1,2,3} ...\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1919: self.assertEqual(parser.format_help(), textwrap.dedent('''\
							πF.SetLineno(1919)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("            usage: PROG [+h] [++foo] bar {1,2,3} ...\n\n            main description\n\n            positional arguments:\n              bar         bar help\n              {1,2,3}     command help\n\n            optional arguments:\n              +h, ++help  show this help message and exit\n              ++foo       foo help\n            ").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_help_alternate_prefix_chars.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 1933: def test_parser_command_help(self):
					πF.SetLineno(1933)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_parser_command_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1934: self.assertEqual(self.command_help_parser.format_usage(),
							πF.SetLineno(1934)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcommand_help_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßformat_usage, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("usage: PROG [-h] [--foo] bar {1,2,3} ...\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1936: self.assertEqual(self.command_help_parser.format_help(),
							πF.SetLineno(1936)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcommand_help_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("            usage: PROG [-h] [--foo] bar {1,2,3} ...\n\n            main description\n\n            positional arguments:\n              bar         bar help\n              {1,2,3}     command help\n                1         1 help\n                2         2 help\n                3         3 help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              --foo       foo help\n            ").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_parser_command_help.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 1954: def test_subparser_title_help(self):
					πF.SetLineno(1954)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_subparser_title_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µsubparsers *πg.Object = πg.UnboundLocal; _ = µsubparsers
						var µparser1 *πg.Object = πg.UnboundLocal; _ = µparser1
						var µparser2 *πg.Object = πg.UnboundLocal; _ = µparser2
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1955: parser = ErrorRaisingArgumentParser(prog='PROG',
							πF.SetLineno(1955)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
								{"description", πg.NewStr("main description").ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 1957: parser.add_argument('--foo', action='store_true', help='foo help')
							πF.SetLineno(1957)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--foo").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("foo help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1958: parser.add_argument('bar', help='bar help')
							πF.SetLineno(1958)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßbar.ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("bar help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1959: subparsers = parser.add_subparsers(title='subcommands',
							πF.SetLineno(1959)
							πTemp001 = πg.KWArgs{
								{"title", ßsubcommands.ToObject()},
								{"description", πg.NewStr("command help").ToObject()},
								{"help", πg.NewStr("additional text").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µsubparsers = πTemp003
							// line 1962: parser1 = subparsers.add_parser('1')
							πF.SetLineno(1962)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß1.ToObject()
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µparser1 = πTemp003
							// line 1963: parser2 = subparsers.add_parser('2')
							πF.SetLineno(1963)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß2.ToObject()
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µparser2 = πTemp003
							// line 1964: self.assertEqual(parser.format_usage(),
							πF.SetLineno(1964)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_usage, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp004[1] = πg.NewStr("usage: PROG [-h] [--foo] bar {1,2} ...\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1966: self.assertEqual(parser.format_help(), textwrap.dedent('''\
							πF.SetLineno(1966)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("            usage: PROG [-h] [--foo] bar {1,2} ...\n\n            main description\n\n            positional arguments:\n              bar         bar help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              --foo       foo help\n\n            subcommands:\n              command help\n\n              {1,2}       additional text\n            ").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subparser_title_help.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 1984: def _test_subparser_help(self, args_str, expected_help):
					πF.SetLineno(1984)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "args_str", Def: nil}
					πTemp002[2] = πg.Param{Name: "expected_help", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("_test_subparser_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs_str *πg.Object = πArgs[1]; _ = µargs_str
						var µexpected_help *πg.Object = πArgs[2]; _ = µexpected_help
						var µerr *πg.Object = πg.UnboundLocal; _ = µerr
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.BaseException
						_ = πTemp004
						var πTemp005 *πg.Traceback
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1985: try:
							πF.SetLineno(1985)
							πF.PushCheckpoint(2)
							// line 1986: self.parser.parse_args(args_str.split())
							πF.SetLineno(1986)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µargs_str, "args_str"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µargs_str, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
							  continue
							}
							πE = nil
							πTemp004, πTemp005 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsInstance(πF, πTemp004.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label3
							}
							πE = πF.Raise(πTemp004.ToObject(), nil, πTemp005.ToObject())
							continue
							// line 1987: except ArgumentParserError:
							πF.SetLineno(1987)
						Label3:
							// line 1988: err = sys.exc_info()[1]
							πF.SetLineno(1988)
							πTemp002 = πg.NewInt(1).ToObject()
							if πTemp007, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßexc_info, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp008.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp007, πTemp002); πE != nil {
								continue
							}
							µerr = πTemp003
							if πE = πg.CheckLocal(πF, µerr, "err"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µerr, ßstdout, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µexpected_help, "expected_help"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, πTemp003, µexpected_help); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label4
							}
							goto Label5
							// line 1989: if err.stdout != expected_help:
							πF.SetLineno(1989)
						Label4:
							// line 1990: print(repr(expected_help))
							πF.SetLineno(1990)
							πTemp001 = make([]*πg.Object, 1)
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µexpected_help, "expected_help"); πE != nil {
								continue
							}
							πTemp009[0] = µexpected_help
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp001[0] = πTemp003
							if πE = πg.Print(πF, πTemp001, true); πE != nil {
								continue
							}
							// line 1991: print(repr(err.stdout))
							πF.SetLineno(1991)
							πTemp001 = make([]*πg.Object, 1)
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µerr, "err"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µerr, ßstdout, nil); πE != nil {
								continue
							}
							πTemp009[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp001[0] = πTemp003
							if πE = πg.Print(πF, πTemp001, true); πE != nil {
								continue
							}
							goto Label5
						Label5:
							// line 1992: self.assertEqual(err.stdout, expected_help)
							πF.SetLineno(1992)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µerr, "err"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µerr, ßstdout, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µexpected_help, "expected_help"); πE != nil {
								continue
							}
							πTemp001[1] = µexpected_help
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß_test_subparser_help.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 1994: def test_subparser1_help(self):
					πF.SetLineno(1994)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_subparser1_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1995: self._test_subparser_help('5.0 1 -h', textwrap.dedent('''\
							πF.SetLineno(1995)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("5.0 1 -h").ToObject()
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("            usage: PROG bar 1 [-h] [-w W] {a,b,c}\n\n            1 description\n\n            positional arguments:\n              {a,b,c}     x help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              -w W        w help\n            ").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_test_subparser_help, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subparser1_help.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 2009: def test_subparser2_help(self):
					πF.SetLineno(2009)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_subparser2_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2010: self._test_subparser_help('5.0 2 -h', textwrap.dedent('''\
							πF.SetLineno(2010)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("5.0 2 -h").ToObject()
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("            usage: PROG bar 2 [-h] [-y {1,2,3}] [z [z ...]]\n\n            2 description\n\n            positional arguments:\n              z           z help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              -y {1,2,3}  y help\n            ").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_test_subparser_help, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subparser2_help.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 2008: @unittest.expectedFailure
					πF.SetLineno(2008)
					πTemp017 = πF.MakeArgs(1)
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßtest_subparser2_help); πE != nil {
						continue
					}
					πTemp017[0] = πTemp018
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp019, πE = πg.GetAttr(πF, πTemp018, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp018, πE = πTemp019.Call(πF, πTemp017, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp017)
					if πE = πClass.SetItem(πF, ßtest_subparser2_help.ToObject(), πTemp018); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestAddSubparsers").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestAddSubparsers.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2027: class TestPositionalsGroups(TestCase):
			πF.SetLineno(2027)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestPositionalsGroups", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2028: """Tests that order of group positionals matches construction order"""
					πF.SetLineno(2028)
					// line 2030: def test_nongroup_first(self):
					πF.SetLineno(2030)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_nongroup_first", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µresult *πg.Object = πg.UnboundLocal; _ = µresult
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2031: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2031)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2032: parser.add_argument('foo')
							πF.SetLineno(2032)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2033: group = parser.add_argument_group('g')
							πF.SetLineno(2033)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßg.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µgroup = πTemp002
							// line 2034: group.add_argument('bar')
							πF.SetLineno(2034)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2035: parser.add_argument('baz')
							πF.SetLineno(2035)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbaz.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2036: expected = NS(foo='1', bar='2', baz='3')
							πF.SetLineno(2036)
							πTemp004 = πg.KWArgs{
								{"foo", ß1.ToObject()},
								{"bar", ß2.ToObject()},
								{"baz", ß3.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µexpected = πTemp002
							// line 2037: result = parser.parse_args('1 2 3'.split())
							πF.SetLineno(2037)
							πTemp003 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("1 2 3").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µresult = πTemp002
							// line 2038: self.assertEqual(expected, result)
							πF.SetLineno(2038)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[0] = µexpected
							if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
								continue
							}
							πTemp003[1] = µresult
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nongroup_first.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2040: def test_group_first(self):
					πF.SetLineno(2040)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_group_first", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µresult *πg.Object = πg.UnboundLocal; _ = µresult
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2041: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2041)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2042: group = parser.add_argument_group('xxx')
							πF.SetLineno(2042)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßxxx.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µgroup = πTemp002
							// line 2043: group.add_argument('foo')
							πF.SetLineno(2043)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2044: parser.add_argument('bar')
							πF.SetLineno(2044)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2045: parser.add_argument('baz')
							πF.SetLineno(2045)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbaz.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2046: expected = NS(foo='1', bar='2', baz='3')
							πF.SetLineno(2046)
							πTemp004 = πg.KWArgs{
								{"foo", ß1.ToObject()},
								{"bar", ß2.ToObject()},
								{"baz", ß3.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µexpected = πTemp002
							// line 2047: result = parser.parse_args('1 2 3'.split())
							πF.SetLineno(2047)
							πTemp003 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("1 2 3").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µresult = πTemp002
							// line 2048: self.assertEqual(expected, result)
							πF.SetLineno(2048)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[0] = µexpected
							if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
								continue
							}
							πTemp003[1] = µresult
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_group_first.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2050: def test_interleaved_groups(self):
					πF.SetLineno(2050)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_interleaved_groups", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µresult *πg.Object = πg.UnboundLocal; _ = µresult
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2051: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2051)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2052: group = parser.add_argument_group('xxx')
							πF.SetLineno(2052)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßxxx.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µgroup = πTemp002
							// line 2053: parser.add_argument('foo')
							πF.SetLineno(2053)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2054: group.add_argument('bar')
							πF.SetLineno(2054)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2055: parser.add_argument('baz')
							πF.SetLineno(2055)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbaz.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2056: group = parser.add_argument_group('yyy')
							πF.SetLineno(2056)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßyyy.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µgroup = πTemp002
							// line 2057: group.add_argument('frell')
							πF.SetLineno(2057)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßfrell.ToObject()
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2058: expected = NS(foo='1', bar='2', baz='3', frell='4')
							πF.SetLineno(2058)
							πTemp004 = πg.KWArgs{
								{"foo", ß1.ToObject()},
								{"bar", ß2.ToObject()},
								{"baz", ß3.ToObject()},
								{"frell", ß4.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µexpected = πTemp002
							// line 2059: result = parser.parse_args('1 2 3 4'.split())
							πF.SetLineno(2059)
							πTemp003 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("1 2 3 4").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µresult = πTemp002
							// line 2060: self.assertEqual(expected, result)
							πF.SetLineno(2060)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[0] = µexpected
							if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
								continue
							}
							πTemp003[1] = µresult
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_interleaved_groups.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestPositionalsGroups").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestPositionalsGroups.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2066: class TestParentParsers(TestCase):
			πF.SetLineno(2066)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestParentParsers", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 []*πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2067: """Tests that parsers can be created with parent parsers"""
					πF.SetLineno(2067)
					// line 2069: def assertArgumentParserError(self, *args, **kwargs):
					πF.SetLineno(2069)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("assertArgumentParserError", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2070: self.assertRaises(ArgumentParserError, *args, **kwargs)
							πF.SetLineno(2070)
							πTemp001 = πF.MakeArgs(1)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, πTemp001, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertArgumentParserError.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2072: def setUp(self):
					πF.SetLineno(2072)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("setUp", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µx_group *πg.Object = πg.UnboundLocal; _ = µx_group
						var µc_group *πg.Object = πg.UnboundLocal; _ = µc_group
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2073: super(TestParentParsers, self).setUp()
							πF.SetLineno(2073)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTestParentParsers); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[1] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsuper); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsetUp, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2074: self.wxyz_parent = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(2074)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"add_help", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßwxyz_parent, πTemp002); πE != nil {
								continue
							}
							// line 2075: self.wxyz_parent.add_argument('--w')
							πF.SetLineno(2075)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--w").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2076: x_group = self.wxyz_parent.add_argument_group('x')
							πF.SetLineno(2076)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßx.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µx_group = πTemp002
							// line 2077: x_group.add_argument('-y')
							πF.SetLineno(2077)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-y").ToObject()
							if πE = πg.CheckLocal(πF, µx_group, "x_group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µx_group, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2078: self.wxyz_parent.add_argument('z')
							πF.SetLineno(2078)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßz.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2080: self.abcd_parent = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(2080)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"add_help", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßabcd_parent, πTemp002); πE != nil {
								continue
							}
							// line 2081: self.abcd_parent.add_argument('a')
							πF.SetLineno(2081)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßa.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßabcd_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2082: self.abcd_parent.add_argument('-b')
							πF.SetLineno(2082)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-b").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßabcd_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2083: c_group = self.abcd_parent.add_argument_group('c')
							πF.SetLineno(2083)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßc.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßabcd_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µc_group = πTemp002
							// line 2084: c_group.add_argument('--d')
							πF.SetLineno(2084)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--d").ToObject()
							if πE = πg.CheckLocal(πF, µc_group, "c_group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µc_group, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2086: self.w_parent = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(2086)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"add_help", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßw_parent, πTemp002); πE != nil {
								continue
							}
							// line 2087: self.w_parent.add_argument('--w')
							πF.SetLineno(2087)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--w").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßw_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2089: self.z_parent = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(2089)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"add_help", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßz_parent, πTemp002); πE != nil {
								continue
							}
							// line 2090: self.z_parent.add_argument('z')
							πF.SetLineno(2090)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßz.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßz_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2093: self.ab_mutex_parent = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(2093)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"add_help", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßab_mutex_parent, πTemp002); πE != nil {
								continue
							}
							// line 2094: group = self.ab_mutex_parent.add_mutually_exclusive_group()
							πF.SetLineno(2094)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µgroup = πTemp002
							// line 2095: group.add_argument('-a', action='store_true')
							πF.SetLineno(2095)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-a").ToObject()
							πTemp004 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2096: group.add_argument('-b', action='store_true')
							πF.SetLineno(2096)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-b").ToObject()
							πTemp004 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2098: self.main_program = os.path.basename(sys.argv[0])
							πF.SetLineno(2098)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πg.NewInt(0).ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßargv, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp006, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpath, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßbasename, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßmain_program, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsetUp.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2100: def test_single_parent(self):
					πF.SetLineno(2100)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_single_parent", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2101: parser = ErrorRaisingArgumentParser(parents=[self.wxyz_parent])
							πF.SetLineno(2101)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							πTemp003 = πg.KWArgs{
								{"parents", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2102: self.assertEqual(parser.parse_args('-y 1 2 --w 3'.split()),
							πF.SetLineno(2102)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("-y 1 2 --w 3").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp004
							πTemp003 = πg.KWArgs{
								{"w", ß3.ToObject()},
								{"y", ß1.ToObject()},
								{"z", ß2.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_single_parent.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2105: def test_single_parent_mutex(self):
					πF.SetLineno(2105)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_single_parent_mutex", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2106: self._test_mutex_ab(self.ab_mutex_parent.parse_args)
							πF.SetLineno(2106)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_test_mutex_ab, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2107: parser = ErrorRaisingArgumentParser(parents=[self.ab_mutex_parent])
							πF.SetLineno(2107)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							πTemp004 = πg.KWArgs{
								{"parents", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2108: self._test_mutex_ab(parser.parse_args)
							πF.SetLineno(2108)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_test_mutex_ab, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_single_parent_mutex.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 2110: def test_single_granparent_mutex(self):
					πF.SetLineno(2110)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_single_granparent_mutex", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparents *πg.Object = πg.UnboundLocal; _ = µparents
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2111: parents = [self.ab_mutex_parent]
							πF.SetLineno(2111)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µparents = πTemp002
							// line 2112: parser = ErrorRaisingArgumentParser(add_help=False, parents=parents)
							πF.SetLineno(2112)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µparents, "parents"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"add_help", πTemp002},
								{"parents", µparents},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2113: parser = ErrorRaisingArgumentParser(parents=[parser])
							πF.SetLineno(2113)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp001[0] = µparser
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							πTemp003 = πg.KWArgs{
								{"parents", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2114: self._test_mutex_ab(parser.parse_args)
							πF.SetLineno(2114)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_test_mutex_ab, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_single_granparent_mutex.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 2116: def _test_mutex_ab(self, parse_args):
					πF.SetLineno(2116)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "parse_args", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("_test_mutex_ab", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparse_args *πg.Object = πArgs[1]; _ = µparse_args
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2117: self.assertEqual(parse_args([]), NS(a=False, b=False))
							πF.SetLineno(2117)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = make([]*πg.Object, 0)
							πTemp004 = πg.NewList(πTemp003...).ToObject()
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							if πTemp004, πE = µparse_args.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"a", πTemp004},
								{"b", πTemp005},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp001[1] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2118: self.assertEqual(parse_args(['-a']), NS(a=True, b=False))
							πF.SetLineno(2118)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = make([]*πg.Object, 1)
							πTemp003[0] = πg.NewStr("-a").ToObject()
							πTemp004 = πg.NewList(πTemp003...).ToObject()
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							if πTemp004, πE = µparse_args.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"a", πTemp004},
								{"b", πTemp005},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp001[1] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2119: self.assertEqual(parse_args(['-b']), NS(a=False, b=True))
							πF.SetLineno(2119)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = make([]*πg.Object, 1)
							πTemp003[0] = πg.NewStr("-b").ToObject()
							πTemp004 = πg.NewList(πTemp003...).ToObject()
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							if πTemp004, πE = µparse_args.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"a", πTemp004},
								{"b", πTemp005},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp001[1] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2120: self.assertArgumentParserError(parse_args, ['-a', '-b'])
							πF.SetLineno(2120)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp001[0] = µparse_args
							πTemp002 = make([]*πg.Object, 2)
							πTemp002[0] = πg.NewStr("-a").ToObject()
							πTemp002[1] = πg.NewStr("-b").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2121: self.assertArgumentParserError(parse_args, ['-b', '-a'])
							πF.SetLineno(2121)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp001[0] = µparse_args
							πTemp002 = make([]*πg.Object, 2)
							πTemp002[0] = πg.NewStr("-b").ToObject()
							πTemp002[1] = πg.NewStr("-a").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2122: self.assertArgumentParserError(parse_args, ['-c'])
							πF.SetLineno(2122)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp001[0] = µparse_args
							πTemp002 = make([]*πg.Object, 1)
							πTemp002[0] = πg.NewStr("-c").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2123: self.assertArgumentParserError(parse_args, ['-a', '-c'])
							πF.SetLineno(2123)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp001[0] = µparse_args
							πTemp002 = make([]*πg.Object, 2)
							πTemp002[0] = πg.NewStr("-a").ToObject()
							πTemp002[1] = πg.NewStr("-c").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2124: self.assertArgumentParserError(parse_args, ['-b', '-c'])
							πF.SetLineno(2124)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp001[0] = µparse_args
							πTemp002 = make([]*πg.Object, 2)
							πTemp002[0] = πg.NewStr("-b").ToObject()
							πTemp002[1] = πg.NewStr("-c").ToObject()
							πTemp004 = πg.NewList(πTemp002...).ToObject()
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß_test_mutex_ab.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 2126: def test_multiple_parents(self):
					πF.SetLineno(2126)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_multiple_parents", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparents *πg.Object = πg.UnboundLocal; _ = µparents
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2127: parents = [self.abcd_parent, self.wxyz_parent]
							πF.SetLineno(2127)
							πTemp001 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßabcd_parent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µparents = πTemp002
							// line 2128: parser = ErrorRaisingArgumentParser(parents=parents)
							πF.SetLineno(2128)
							if πE = πg.CheckLocal(πF, µparents, "parents"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"parents", µparents},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2129: self.assertEqual(parser.parse_args('--d 1 --w 2 3 4'.split()),
							πF.SetLineno(2129)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("--d 1 --w 2 3 4").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp004
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"a", ß3.ToObject()},
								{"b", πTemp002},
								{"d", ß1.ToObject()},
								{"w", ß2.ToObject()},
								{"y", πTemp004},
								{"z", ß4.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_multiple_parents.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 2132: def test_multiple_parents_mutex(self):
					πF.SetLineno(2132)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_multiple_parents_mutex", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparents *πg.Object = πg.UnboundLocal; _ = µparents
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2133: parents = [self.ab_mutex_parent, self.wxyz_parent]
							πF.SetLineno(2133)
							πTemp001 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µparents = πTemp002
							// line 2134: parser = ErrorRaisingArgumentParser(parents=parents)
							πF.SetLineno(2134)
							if πE = πg.CheckLocal(πF, µparents, "parents"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"parents", µparents},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2135: self.assertEqual(parser.parse_args('-a --w 2 3'.split()),
							πF.SetLineno(2135)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("-a --w 2 3").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp004
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"a", πTemp002},
								{"b", πTemp004},
								{"w", ß2.ToObject()},
								{"y", πTemp006},
								{"z", ß3.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2137: self.assertArgumentParserError(
							πF.SetLineno(2137)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("-a --w 2 3 -b").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2139: self.assertArgumentParserError(
							πF.SetLineno(2139)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("-a -b --w 2 3").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_multiple_parents_mutex.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 2142: def test_conflicting_parents(self):
					πF.SetLineno(2142)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_conflicting_parents", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2143: self.assertRaises(
							πF.SetLineno(2143)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentError, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentParser, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							πTemp004 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßw_parent, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							πTemp005 = πg.KWArgs{
								{"parents", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_conflicting_parents.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 2148: def test_conflicting_parents_mutex(self):
					πF.SetLineno(2148)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_conflicting_parents_mutex", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2149: self.assertRaises(
							πF.SetLineno(2149)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentError, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentParser, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							πTemp004 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßabcd_parent, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							πTemp005 = πg.KWArgs{
								{"parents", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_conflicting_parents_mutex.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 2154: def test_same_argument_name_parents(self):
					πF.SetLineno(2154)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_same_argument_name_parents", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparents *πg.Object = πg.UnboundLocal; _ = µparents
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2155: parents = [self.wxyz_parent, self.z_parent]
							πF.SetLineno(2155)
							πTemp001 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßz_parent, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µparents = πTemp002
							// line 2156: parser = ErrorRaisingArgumentParser(parents=parents)
							πF.SetLineno(2156)
							if πE = πg.CheckLocal(πF, µparents, "parents"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"parents", µparents},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2157: self.assertEqual(parser.parse_args('1 2'.split()),
							πF.SetLineno(2157)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("1 2").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp004
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"w", πTemp002},
								{"y", πTemp004},
								{"z", ß2.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_same_argument_name_parents.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 2160: def test_subparser_parents(self):
					πF.SetLineno(2160)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_subparser_parents", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µsubparsers *πg.Object = πg.UnboundLocal; _ = µsubparsers
						var µabcde_parser *πg.Object = πg.UnboundLocal; _ = µabcde_parser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2161: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2161)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2162: subparsers = parser.add_subparsers()
							πF.SetLineno(2162)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µsubparsers = πTemp002
							// line 2163: abcde_parser = subparsers.add_parser('bar', parents=[self.abcd_parent])
							πF.SetLineno(2163)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbar.ToObject()
							πTemp004 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßabcd_parent, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp005 = πg.KWArgs{
								{"parents", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µabcde_parser = πTemp002
							// line 2164: abcde_parser.add_argument('e')
							πF.SetLineno(2164)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ße.ToObject()
							if πE = πg.CheckLocal(πF, µabcde_parser, "abcde_parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µabcde_parser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2165: self.assertEqual(parser.parse_args('bar -b 1 --d 2 3 4'.split()),
							πF.SetLineno(2165)
							πTemp003 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("bar -b 1 --d 2 3 4").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[0] = πTemp002
							πTemp005 = πg.KWArgs{
								{"a", ß3.ToObject()},
								{"b", ß1.ToObject()},
								{"d", ß2.ToObject()},
								{"e", ß4.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subparser_parents.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 2168: def test_subparser_parents_mutex(self):
					πF.SetLineno(2168)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_subparser_parents_mutex", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µsubparsers *πg.Object = πg.UnboundLocal; _ = µsubparsers
						var µparents *πg.Object = πg.UnboundLocal; _ = µparents
						var µabc_parser *πg.Object = πg.UnboundLocal; _ = µabc_parser
						var µc_group *πg.Object = πg.UnboundLocal; _ = µc_group
						var µwxyzabe_parser *πg.Object = πg.UnboundLocal; _ = µwxyzabe_parser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2169: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2169)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2170: subparsers = parser.add_subparsers()
							πF.SetLineno(2170)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µsubparsers = πTemp002
							// line 2171: parents = [self.ab_mutex_parent]
							πF.SetLineno(2171)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							µparents = πTemp001
							// line 2172: abc_parser = subparsers.add_parser('foo', parents=parents)
							πF.SetLineno(2172)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparents, "parents"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"parents", µparents},
							}
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µabc_parser = πTemp002
							// line 2173: c_group = abc_parser.add_argument_group('c_group')
							πF.SetLineno(2173)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßc_group.ToObject()
							if πE = πg.CheckLocal(πF, µabc_parser, "abc_parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µabc_parser, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µc_group = πTemp002
							// line 2174: c_group.add_argument('c')
							πF.SetLineno(2174)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßc.ToObject()
							if πE = πg.CheckLocal(πF, µc_group, "c_group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µc_group, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2175: parents = [self.wxyz_parent, self.ab_mutex_parent]
							πF.SetLineno(2175)
							πTemp003 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßab_mutex_parent, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							µparents = πTemp001
							// line 2176: wxyzabe_parser = subparsers.add_parser('bar', parents=parents)
							πF.SetLineno(2176)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µparents, "parents"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"parents", µparents},
							}
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µwxyzabe_parser = πTemp002
							// line 2177: wxyzabe_parser.add_argument('e')
							πF.SetLineno(2177)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ße.ToObject()
							if πE = πg.CheckLocal(πF, µwxyzabe_parser, "wxyzabe_parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µwxyzabe_parser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2178: self.assertEqual(parser.parse_args('foo -a 4'.split()),
							πF.SetLineno(2178)
							πTemp003 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("foo -a 4").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"a", πTemp001},
								{"b", πTemp002},
								{"c", ß4.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2180: self.assertEqual(parser.parse_args('bar -b  --w 2 3 4'.split()),
							πF.SetLineno(2180)
							πTemp003 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("bar -b  --w 2 3 4").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"a", πTemp001},
								{"b", πTemp002},
								{"w", ß2.ToObject()},
								{"y", πTemp006},
								{"z", ß3.ToObject()},
								{"e", ß4.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2182: self.assertArgumentParserError(
							πF.SetLineno(2182)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("foo -a -b 4").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2184: self.assertArgumentParserError(
							πF.SetLineno(2184)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("bar -b -a 4").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subparser_parents_mutex.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 2187: def test_parent_help(self):
					πF.SetLineno(2187)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_parent_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparents *πg.Object = πg.UnboundLocal; _ = µparents
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µparser_help *πg.Object = πg.UnboundLocal; _ = µparser_help
						var µprogname *πg.Object = πg.UnboundLocal; _ = µprogname
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2188: parents = [self.abcd_parent, self.wxyz_parent]
							πF.SetLineno(2188)
							πTemp001 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßabcd_parent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwxyz_parent, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µparents = πTemp002
							// line 2189: parser = ErrorRaisingArgumentParser(parents=parents)
							πF.SetLineno(2189)
							if πE = πg.CheckLocal(πF, µparents, "parents"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"parents", µparents},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2190: parser_help = parser.format_help()
							πF.SetLineno(2190)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser_help = πTemp004
							// line 2191: progname = self.main_program
							πF.SetLineno(2191)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßmain_program, nil); πE != nil {
								continue
							}
							µprogname = πTemp002
							// line 2192: self.assertEqual(parser_help, textwrap.dedent('''\
							πF.SetLineno(2192)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser_help, "parser_help"); πE != nil {
								continue
							}
							πTemp001[0] = µparser_help
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µprogname, "progname"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, µprogname); πE != nil {
								continue
							}
							if !πTemp006 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µprogname, "progname"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µprogname, πg.NewStr(" ").ToObject()); πE != nil {
								continue
							}
							πTemp004 = πTemp007
							goto Label2
						Label1:
							πTemp004 = ß.ToObject()
						Label2:
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("            usage: %s[-h] [-b B] [--d D] [--w W] [-y Y] a z\n\n            positional arguments:\n              a\n              z\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              -b B\n              --w W\n\n            c:\n              --d D\n\n            x:\n              -y Y\n        ").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_parent_help.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 2212: def test_groups_parents(self):
					πF.SetLineno(2212)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_groups_parents", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparent *πg.Object = πg.UnboundLocal; _ = µparent
						var µg *πg.Object = πg.UnboundLocal; _ = µg
						var µm *πg.Object = πg.UnboundLocal; _ = µm
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µparser_help *πg.Object = πg.UnboundLocal; _ = µparser_help
						var µprogname *πg.Object = πg.UnboundLocal; _ = µprogname
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2213: parent = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(2213)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"add_help", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparent = πTemp003
							// line 2214: g = parent.add_argument_group(title='g', description='gd')
							πF.SetLineno(2214)
							πTemp002 = πg.KWArgs{
								{"title", ßg.ToObject()},
								{"description", ßgd.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparent, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µg = πTemp003
							// line 2215: g.add_argument('-w')
							πF.SetLineno(2215)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-w").ToObject()
							if πE = πg.CheckLocal(πF, µg, "g"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µg, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2216: g.add_argument('-x')
							πF.SetLineno(2216)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µg, "g"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µg, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2217: m = parent.add_mutually_exclusive_group()
							πF.SetLineno(2217)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparent, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µm = πTemp003
							// line 2218: m.add_argument('-y')
							πF.SetLineno(2218)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-y").ToObject()
							if πE = πg.CheckLocal(πF, µm, "m"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µm, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2219: m.add_argument('-z')
							πF.SetLineno(2219)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-z").ToObject()
							if πE = πg.CheckLocal(πF, µm, "m"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µm, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2220: parser = ErrorRaisingArgumentParser(parents=[parent])
							πF.SetLineno(2220)
							πTemp004 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp004[0] = µparent
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp002 = πg.KWArgs{
								{"parents", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2222: self.assertRaises(ArgumentParserError, parser.parse_args,
							πF.SetLineno(2222)
							πTemp004 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							πTemp005 = make([]*πg.Object, 4)
							πTemp005[0] = πg.NewStr("-y").ToObject()
							πTemp005[1] = ßY.ToObject()
							πTemp005[2] = πg.NewStr("-z").ToObject()
							πTemp005[3] = ßZ.ToObject()
							πTemp001 = πg.NewList(πTemp005...).ToObject()
							πTemp004[2] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2225: parser_help = parser.format_help()
							πF.SetLineno(2225)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser_help = πTemp003
							// line 2226: progname = self.main_program
							πF.SetLineno(2226)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßmain_program, nil); πE != nil {
								continue
							}
							µprogname = πTemp001
							// line 2227: self.assertEqual(parser_help, textwrap.dedent('''\
							πF.SetLineno(2227)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser_help, "parser_help"); πE != nil {
								continue
							}
							πTemp004[0] = µparser_help
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µprogname, "progname"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, µprogname); πE != nil {
								continue
							}
							if !πTemp006 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µprogname, "progname"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µprogname, πg.NewStr(" ").ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp007
							goto Label2
						Label1:
							πTemp003 = ß.ToObject()
						Label2:
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("            usage: %s[-h] [-w W] [-x X] [-y Y | -z Z]\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              -y Y\n              -z Z\n\n            g:\n              gd\n\n              -w W\n              -x X\n        ").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_groups_parents.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 2211: @unittest.expectedFailure
					πF.SetLineno(2211)
					πTemp017 = πF.MakeArgs(1)
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßtest_groups_parents); πE != nil {
						continue
					}
					πTemp017[0] = πTemp018
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp019, πE = πg.GetAttr(πF, πTemp018, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp018, πE = πTemp019.Call(πF, πTemp017, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp017)
					if πE = πClass.SetItem(πF, ßtest_groups_parents.ToObject(), πTemp018); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestParentParsers").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestParentParsers.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2246: class TestMutuallyExclusiveGroupErrors(TestCase):
			πF.SetLineno(2246)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveGroupErrors", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2248: def test_invalid_add_argument_group(self):
					πF.SetLineno(2248)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_invalid_add_argument_group", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µraises *πg.Object = πg.UnboundLocal; _ = µraises
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2249: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2249)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2250: raises = self.assertRaises
							πF.SetLineno(2250)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							µraises = πTemp001
							// line 2251: raises(TypeError, parser.add_mutually_exclusive_group, title='foo')
							πF.SetLineno(2251)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							πTemp004 = πg.KWArgs{
								{"title", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µraises, "raises"); πE != nil {
								continue
							}
							if πTemp001, πE = µraises.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_invalid_add_argument_group.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2253: def test_invalid_add_argument(self):
					πF.SetLineno(2253)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_invalid_add_argument", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var µadd_argument *πg.Object = πg.UnboundLocal; _ = µadd_argument
						var µraises *πg.Object = πg.UnboundLocal; _ = µraises
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2254: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2254)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2255: group = parser.add_mutually_exclusive_group()
							πF.SetLineno(2255)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µgroup = πTemp002
							// line 2256: add_argument = group.add_argument
							πF.SetLineno(2256)
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							µadd_argument = πTemp001
							// line 2257: raises = self.assertRaises
							πF.SetLineno(2257)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							µraises = πTemp001
							// line 2258: raises(ValueError, add_argument, '--foo', required=True)
							πF.SetLineno(2258)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µadd_argument, "add_argument"); πE != nil {
								continue
							}
							πTemp003[1] = µadd_argument
							πTemp003[2] = πg.NewStr("--foo").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µraises, "raises"); πE != nil {
								continue
							}
							if πTemp001, πE = µraises.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2259: raises(ValueError, add_argument, 'bar')
							πF.SetLineno(2259)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µadd_argument, "add_argument"); πE != nil {
								continue
							}
							πTemp003[1] = µadd_argument
							πTemp003[2] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µraises, "raises"); πE != nil {
								continue
							}
							if πTemp001, πE = µraises.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2260: raises(ValueError, add_argument, 'bar', nargs='+')
							πF.SetLineno(2260)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µadd_argument, "add_argument"); πE != nil {
								continue
							}
							πTemp003[1] = µadd_argument
							πTemp003[2] = ßbar.ToObject()
							πTemp004 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µraises, "raises"); πE != nil {
								continue
							}
							if πTemp001, πE = µraises.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2261: raises(ValueError, add_argument, 'bar', nargs=1)
							πF.SetLineno(2261)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µadd_argument, "add_argument"); πE != nil {
								continue
							}
							πTemp003[1] = µadd_argument
							πTemp003[2] = ßbar.ToObject()
							πTemp004 = πg.KWArgs{
								{"nargs", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µraises, "raises"); πE != nil {
								continue
							}
							if πTemp001, πE = µraises.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2262: raises(ValueError, add_argument, 'bar', nargs=argparse.PARSER)
							πF.SetLineno(2262)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µadd_argument, "add_argument"); πE != nil {
								continue
							}
							πTemp003[1] = µadd_argument
							πTemp003[2] = ßbar.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßPARSER, nil); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nargs", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µraises, "raises"); πE != nil {
								continue
							}
							if πTemp001, πE = µraises.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_invalid_add_argument.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2265: def test_help(self):
					πF.SetLineno(2265)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup1 *πg.Object = πg.UnboundLocal; _ = µgroup1
						var µgroup2 *πg.Object = πg.UnboundLocal; _ = µgroup2
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2266: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2266)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2267: group1 = parser.add_mutually_exclusive_group()
							πF.SetLineno(2267)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µgroup1 = πTemp003
							// line 2268: group1.add_argument('--foo', action='store_true')
							πF.SetLineno(2268)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--foo").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup1, "group1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup1, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2269: group1.add_argument('--bar', action='store_false')
							πF.SetLineno(2269)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--bar").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_false.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup1, "group1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup1, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2270: group2 = parser.add_mutually_exclusive_group()
							πF.SetLineno(2270)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µgroup2 = πTemp003
							// line 2271: group2.add_argument('--soup', action='store_true')
							πF.SetLineno(2271)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--soup").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup2, "group2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup2, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2272: group2.add_argument('--nuts', action='store_false')
							πF.SetLineno(2272)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--nuts").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_false.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup2, "group2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup2, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2273: expected = '''\
							πF.SetLineno(2273)
							µexpected = πg.NewStr("            usage: PROG [-h] [--foo | --bar] [--soup | --nuts]\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              --foo\n              --bar\n              --soup\n              --nuts\n              ").ToObject()
							// line 2283: self.assertEqual(parser.format_help(), textwrap.dedent(expected))
							πF.SetLineno(2283)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp005[0] = µexpected
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_help.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2264: @unittest.expectedFailure
					πF.SetLineno(2264)
					πTemp005 = πF.MakeArgs(1)
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßtest_help); πE != nil {
						continue
					}
					πTemp005[0] = πTemp006
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp007.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_help.ToObject(), πTemp006); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveGroupErrors").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveGroupErrors.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2285: class MEMixin(object):
			πF.SetLineno(2285)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("MEMixin", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2287: def test_failures_when_not_required(self):
					πF.SetLineno(2287)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_failures_when_not_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparse_args *πg.Object = πg.UnboundLocal; _ = µparse_args
						var µerror *πg.Object = πg.UnboundLocal; _ = µerror
						var µargs_string *πg.Object = πg.UnboundLocal; _ = µargs_string
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2288: parse_args = self.get_parser(required=False).parse_args
							πF.SetLineno(2288)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							µparse_args = πTemp001
							// line 2289: error = ArgumentParserError
							πF.SetLineno(2289)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							µerror = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfailures, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µargs_string = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2291: self.assertRaises(error, parse_args, args_string.split())
							πF.SetLineno(2291)
							πTemp006 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µerror, "error"); πE != nil {
								continue
							}
							πTemp006[0] = µerror
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp006[1] = µparse_args
							if πE = πg.CheckLocal(πF, µargs_string, "args_string"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µargs_string, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006[2] = πTemp007
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_failures_when_not_required.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2293: def test_failures_when_required(self):
					πF.SetLineno(2293)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_failures_when_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparse_args *πg.Object = πg.UnboundLocal; _ = µparse_args
						var µerror *πg.Object = πg.UnboundLocal; _ = µerror
						var µargs_string *πg.Object = πg.UnboundLocal; _ = µargs_string
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2294: parse_args = self.get_parser(required=True).parse_args
							πF.SetLineno(2294)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							µparse_args = πTemp001
							// line 2295: error = ArgumentParserError
							πF.SetLineno(2295)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							µerror = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßfailures, nil); πE != nil {
								continue
							}
							πTemp005 = make([]*πg.Object, 1)
							πTemp005[0] = ß.ToObject()
							πTemp006 = πg.NewList(πTemp005...).ToObject()
							if πTemp003, πE = πg.Add(πF, πTemp004, πTemp006); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µargs_string = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2297: self.assertRaises(error, parse_args, args_string.split())
							πF.SetLineno(2297)
							πTemp005 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µerror, "error"); πE != nil {
								continue
							}
							πTemp005[0] = µerror
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							πTemp005[1] = µparse_args
							if πE = πg.CheckLocal(πF, µargs_string, "args_string"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µargs_string, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[2] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_failures_when_required.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2299: def test_successes_when_not_required(self):
					πF.SetLineno(2299)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_successes_when_not_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparse_args *πg.Object = πg.UnboundLocal; _ = µparse_args
						var µsuccesses *πg.Object = πg.UnboundLocal; _ = µsuccesses
						var µargs_string *πg.Object = πg.UnboundLocal; _ = µargs_string
						var µexpected_ns *πg.Object = πg.UnboundLocal; _ = µexpected_ns
						var µactual_ns *πg.Object = πg.UnboundLocal; _ = µactual_ns
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2300: parse_args = self.get_parser(required=False).parse_args
							πF.SetLineno(2300)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							µparse_args = πTemp001
							// line 2301: successes = self.successes + self.successes_when_not_required
							πF.SetLineno(2301)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsuccesses, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßsuccesses_when_not_required, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							µsuccesses = πTemp001
							if πE = πg.CheckLocal(πF, µsuccesses, "successes"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µsuccesses); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
									continue
								}
								µargs_string = πTemp004
								µexpected_ns = πTemp007
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2303: actual_ns = parse_args(args_string.split())
							πF.SetLineno(2303)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µargs_string, "args_string"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µargs_string, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							if πTemp003, πE = µparse_args.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µactual_ns = πTemp003
							// line 2304: self.assertEqual(actual_ns, expected_ns)
							πF.SetLineno(2304)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µactual_ns, "actual_ns"); πE != nil {
								continue
							}
							πTemp008[0] = µactual_ns
							if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
								continue
							}
							πTemp008[1] = µexpected_ns
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_successes_when_not_required.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2306: def test_successes_when_required(self):
					πF.SetLineno(2306)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_successes_when_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparse_args *πg.Object = πg.UnboundLocal; _ = µparse_args
						var µargs_string *πg.Object = πg.UnboundLocal; _ = µargs_string
						var µexpected_ns *πg.Object = πg.UnboundLocal; _ = µexpected_ns
						var µactual_ns *πg.Object = πg.UnboundLocal; _ = µactual_ns
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2307: parse_args = self.get_parser(required=True).parse_args
							πF.SetLineno(2307)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßparse_args, nil); πE != nil {
								continue
							}
							µparse_args = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsuccesses, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
									continue
								}
								µargs_string = πTemp006
								µexpected_ns = πTemp007
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2309: actual_ns = parse_args(args_string.split())
							πF.SetLineno(2309)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µargs_string, "args_string"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µargs_string, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp006
							if πE = πg.CheckLocal(πF, µparse_args, "parse_args"); πE != nil {
								continue
							}
							if πTemp003, πE = µparse_args.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µactual_ns = πTemp003
							// line 2310: self.assertEqual(actual_ns, expected_ns)
							πF.SetLineno(2310)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µactual_ns, "actual_ns"); πE != nil {
								continue
							}
							πTemp008[0] = µactual_ns
							if πE = πg.CheckLocal(πF, µexpected_ns, "expected_ns"); πE != nil {
								continue
							}
							πTemp008[1] = µexpected_ns
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_successes_when_required.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 2312: def test_usage_when_not_required(self):
					πF.SetLineno(2312)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_usage_when_not_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µformat_usage *πg.Object = πg.UnboundLocal; _ = µformat_usage
						var µexpected_usage *πg.Object = πg.UnboundLocal; _ = µexpected_usage
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2313: format_usage = self.get_parser(required=False).format_usage
							πF.SetLineno(2313)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßformat_usage, nil); πE != nil {
								continue
							}
							µformat_usage = πTemp001
							// line 2314: expected_usage = self.usage_when_not_required
							πF.SetLineno(2314)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßusage_when_not_required, nil); πE != nil {
								continue
							}
							µexpected_usage = πTemp001
							// line 2315: self.assertEqual(format_usage(), textwrap.dedent(expected_usage))
							πF.SetLineno(2315)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µformat_usage, "format_usage"); πE != nil {
								continue
							}
							if πTemp001, πE = µformat_usage.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µexpected_usage, "expected_usage"); πE != nil {
								continue
							}
							πTemp005[0] = µexpected_usage
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_usage_when_not_required.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 2317: def test_usage_when_required(self):
					πF.SetLineno(2317)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_usage_when_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µformat_usage *πg.Object = πg.UnboundLocal; _ = µformat_usage
						var µexpected_usage *πg.Object = πg.UnboundLocal; _ = µexpected_usage
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2318: format_usage = self.get_parser(required=True).format_usage
							πF.SetLineno(2318)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßformat_usage, nil); πE != nil {
								continue
							}
							µformat_usage = πTemp001
							// line 2319: expected_usage = self.usage_when_required
							πF.SetLineno(2319)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßusage_when_required, nil); πE != nil {
								continue
							}
							µexpected_usage = πTemp001
							// line 2320: self.assertEqual(format_usage(), textwrap.dedent(expected_usage))
							πF.SetLineno(2320)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µformat_usage, "format_usage"); πE != nil {
								continue
							}
							if πTemp001, πE = µformat_usage.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µexpected_usage, "expected_usage"); πE != nil {
								continue
							}
							πTemp005[0] = µexpected_usage
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_usage_when_required.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 2322: def test_help_when_not_required(self):
					πF.SetLineno(2322)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_help_when_not_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µformat_help *πg.Object = πg.UnboundLocal; _ = µformat_help
						var µhelp *πg.Object = πg.UnboundLocal; _ = µhelp
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2323: format_help = self.get_parser(required=False).format_help
							πF.SetLineno(2323)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßformat_help, nil); πE != nil {
								continue
							}
							µformat_help = πTemp001
							// line 2324: help = self.usage_when_not_required + self.help
							πF.SetLineno(2324)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßusage_when_not_required, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßhelp, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							µhelp = πTemp001
							// line 2325: self.assertEqual(format_help(), textwrap.dedent(help))
							πF.SetLineno(2325)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µformat_help, "format_help"); πE != nil {
								continue
							}
							if πTemp001, πE = µformat_help.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhelp, "help"); πE != nil {
								continue
							}
							πTemp006[0] = µhelp
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp005[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_help_when_not_required.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 2327: def test_help_when_required(self):
					πF.SetLineno(2327)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_help_when_required", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µformat_help *πg.Object = πg.UnboundLocal; _ = µformat_help
						var µhelp *πg.Object = πg.UnboundLocal; _ = µhelp
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2328: format_help = self.get_parser(required=True).format_help
							πF.SetLineno(2328)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"required", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßformat_help, nil); πE != nil {
								continue
							}
							µformat_help = πTemp001
							// line 2329: help = self.usage_when_required + self.help
							πF.SetLineno(2329)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßusage_when_required, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßhelp, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							µhelp = πTemp001
							// line 2330: self.assertEqual(format_help(), textwrap.dedent(help))
							πF.SetLineno(2330)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µformat_help, "format_help"); πE != nil {
								continue
							}
							if πTemp001, πE = µformat_help.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhelp, "help"); πE != nil {
								continue
							}
							πTemp006[0] = µhelp
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp005[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_help_when_required.ToObject(), πTemp009); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("MEMixin").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßMEMixin.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2333: class TestMutuallyExclusiveSimple(MEMixin, TestCase):
			πF.SetLineno(2333)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveSimple", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 πg.KWArgs
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2335: def get_parser(self, required=None):
					πF.SetLineno(2335)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[1] = πg.Param{Name: "required", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2336: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2336)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2337: group = parser.add_mutually_exclusive_group(required=required)
							πF.SetLineno(2337)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µgroup = πTemp003
							// line 2338: group.add_argument('--bar', help='bar help')
							πF.SetLineno(2338)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--bar").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("bar help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2339: group.add_argument('--baz', nargs='?', const='Z', help='baz help')
							πF.SetLineno(2339)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--baz").ToObject()
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"const", ßZ.ToObject()},
								{"help", πg.NewStr("baz help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2340: return parser
							πF.SetLineno(2340)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2342: failures = ['--bar X --baz Y', '--bar X --baz']
					πF.SetLineno(2342)
					πTemp004 = make([]*πg.Object, 2)
					πTemp004[0] = πg.NewStr("--bar X --baz Y").ToObject()
					πTemp004[1] = πg.NewStr("--bar X --baz").ToObject()
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2343: successes = [
					πF.SetLineno(2343)
					πTemp004 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", ßX.ToObject()},
						{"baz", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--bar X").ToObject(), πTemp007).ToObject()
					πTemp004[0] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", ßZ.ToObject()},
						{"baz", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--bar X --bar Z").ToObject(), πTemp007).ToObject()
					πTemp004[1] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", πTemp005},
						{"baz", ßY.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--baz Y").ToObject(), πTemp007).ToObject()
					πTemp004[2] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", πTemp005},
						{"baz", ßZ.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--baz").ToObject(), πTemp007).ToObject()
					πTemp004[3] = πTemp003
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2349: successes_when_not_required = [
					πF.SetLineno(2349)
					πTemp004 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", πTemp005},
						{"baz", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp007).ToObject()
					πTemp004[0] = πTemp003
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2353: usage_when_not_required = '''\
					πF.SetLineno(2353)
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("        usage: PROG [-h] [--bar BAR | --baz [BAZ]]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2356: usage_when_required = '''\
					πF.SetLineno(2356)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("        usage: PROG [-h] (--bar BAR | --baz [BAZ])\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2359: help = '''\
					πF.SetLineno(2359)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n        optional arguments:\n          -h, --help   show this help message and exit\n          --bar BAR    bar help\n          --baz [BAZ]  baz help\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveSimple").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveSimple.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2368: class TestMutuallyExclusiveLong(MEMixin, TestCase):
			πF.SetLineno(2368)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveLong", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 πg.KWArgs
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2370: def get_parser(self, required=None):
					πF.SetLineno(2370)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[1] = πg.Param{Name: "required", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2371: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2371)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2372: parser.add_argument('--abcde', help='abcde help')
							πF.SetLineno(2372)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--abcde").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("abcde help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2373: parser.add_argument('--fghij', help='fghij help')
							πF.SetLineno(2373)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--fghij").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("fghij help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2374: group = parser.add_mutually_exclusive_group(required=required)
							πF.SetLineno(2374)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µgroup = πTemp003
							// line 2375: group.add_argument('--klmno', help='klmno help')
							πF.SetLineno(2375)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--klmno").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("klmno help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2376: group.add_argument('--pqrst', help='pqrst help')
							πF.SetLineno(2376)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--pqrst").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("pqrst help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2377: return parser
							πF.SetLineno(2377)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2379: failures = ['--klmno X --pqrst Y']
					πF.SetLineno(2379)
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--klmno X --pqrst Y").ToObject()
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2380: successes = [
					πF.SetLineno(2380)
					πTemp004 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"abcde", πTemp005},
						{"fghij", πTemp006},
						{"klmno", ßX.ToObject()},
						{"pqrst", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--klmno X").ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"abcde", ßY.ToObject()},
						{"fghij", πTemp005},
						{"klmno", ßX.ToObject()},
						{"pqrst", πTemp006},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--abcde Y --klmno X").ToObject(), πTemp006).ToObject()
					πTemp004[1] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"abcde", πTemp005},
						{"fghij", πTemp006},
						{"klmno", πTemp007},
						{"pqrst", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--pqrst X").ToObject(), πTemp006).ToObject()
					πTemp004[2] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"abcde", πTemp005},
						{"fghij", ßY.ToObject()},
						{"klmno", πTemp006},
						{"pqrst", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--pqrst X --fghij Y").ToObject(), πTemp006).ToObject()
					πTemp004[3] = πTemp003
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2388: successes_when_not_required = [
					πF.SetLineno(2388)
					πTemp004 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"abcde", πTemp005},
						{"fghij", πTemp006},
						{"klmno", πTemp007},
						{"pqrst", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp004[0] = πTemp003
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2392: usage_when_not_required = '''\
					πF.SetLineno(2392)
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("    usage: PROG [-h] [--abcde ABCDE] [--fghij FGHIJ]\n                [--klmno KLMNO | --pqrst PQRST]\n    ").ToObject()); πE != nil {
						continue
					}
					// line 2396: usage_when_required = '''\
					πF.SetLineno(2396)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("    usage: PROG [-h] [--abcde ABCDE] [--fghij FGHIJ]\n                (--klmno KLMNO | --pqrst PQRST)\n    ").ToObject()); πE != nil {
						continue
					}
					// line 2400: help = '''\
					πF.SetLineno(2400)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n    optional arguments:\n      -h, --help     show this help message and exit\n      --abcde ABCDE  abcde help\n      --fghij FGHIJ  fghij help\n      --klmno KLMNO  klmno help\n      --pqrst PQRST  pqrst help\n    ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveLong").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveLong.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2411: class TestMutuallyExclusiveFirstSuppressed(MEMixin, TestCase):
			πF.SetLineno(2411)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveFirstSuppressed", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 πg.KWArgs
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2413: def get_parser(self, required):
					πF.SetLineno(2413)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "required", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2414: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2414)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2415: group = parser.add_mutually_exclusive_group(required=required)
							πF.SetLineno(2415)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µgroup = πTemp003
							// line 2416: group.add_argument('-x', help=argparse.SUPPRESS)
							πF.SetLineno(2416)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSUPPRESS, nil); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"help", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2417: group.add_argument('-y', action='store_false', help='y help')
							πF.SetLineno(2417)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-y").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_false.ToObject()},
								{"help", πg.NewStr("y help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2418: return parser
							πF.SetLineno(2418)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2420: failures = ['-x X -y']
					πF.SetLineno(2420)
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("-x X -y").ToObject()
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2421: successes = [
					πF.SetLineno(2421)
					πTemp003 = make([]*πg.Object, 3)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"x", ßX.ToObject()},
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x X").ToObject(), πTemp007).ToObject()
					πTemp003[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"x", ßY.ToObject()},
						{"y", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x X -x Y").ToObject(), πTemp007).ToObject()
					πTemp003[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y").ToObject(), πTemp007).ToObject()
					πTemp003[2] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2426: successes_when_not_required = [
					πF.SetLineno(2426)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"x", πTemp005},
						{"y", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp007).ToObject()
					πTemp003[0] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2430: usage_when_not_required = '''\
					πF.SetLineno(2430)
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("        usage: PROG [-h] [-y]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2433: usage_when_required = '''\
					πF.SetLineno(2433)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("        usage: PROG [-h] -y\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2436: help = '''\
					πF.SetLineno(2436)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n        optional arguments:\n          -h, --help  show this help message and exit\n          -y          y help\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveFirstSuppressed").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveFirstSuppressed.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2444: class TestMutuallyExclusiveManySuppressed(MEMixin, TestCase):
			πF.SetLineno(2444)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveManySuppressed", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 πg.KWArgs
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2446: def get_parser(self, required):
					πF.SetLineno(2446)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "required", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var µadd *πg.Object = πg.UnboundLocal; _ = µadd
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2447: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2447)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2448: group = parser.add_mutually_exclusive_group(required=required)
							πF.SetLineno(2448)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µgroup = πTemp003
							// line 2449: add = group.add_argument
							πF.SetLineno(2449)
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							µadd = πTemp002
							// line 2450: add('--spam', action='store_true', help=argparse.SUPPRESS)
							πF.SetLineno(2450)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--spam").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSUPPRESS, nil); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µadd, "add"); πE != nil {
								continue
							}
							if πTemp002, πE = µadd.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2451: add('--badger', action='store_false', help=argparse.SUPPRESS)
							πF.SetLineno(2451)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--badger").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSUPPRESS, nil); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"action", ßstore_false.ToObject()},
								{"help", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µadd, "add"); πE != nil {
								continue
							}
							if πTemp002, πE = µadd.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2452: add('--bladder', help=argparse.SUPPRESS)
							πF.SetLineno(2452)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--bladder").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSUPPRESS, nil); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"help", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µadd, "add"); πE != nil {
								continue
							}
							if πTemp002, πE = µadd.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2453: return parser
							πF.SetLineno(2453)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2455: failures = [
					πF.SetLineno(2455)
					πTemp003 = make([]*πg.Object, 3)
					πTemp003[0] = πg.NewStr("--spam --badger").ToObject()
					πTemp003[1] = πg.NewStr("--badger --bladder B").ToObject()
					πTemp003[2] = πg.NewStr("--bladder B --spam").ToObject()
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2460: successes = [
					πF.SetLineno(2460)
					πTemp003 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"spam", πTemp005},
						{"badger", πTemp006},
						{"bladder", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--spam").ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"spam", πTemp005},
						{"badger", πTemp006},
						{"bladder", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--badger").ToObject(), πTemp006).ToObject()
					πTemp003[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"spam", πTemp005},
						{"badger", πTemp006},
						{"bladder", ßB.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--bladder B").ToObject(), πTemp006).ToObject()
					πTemp003[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"spam", πTemp005},
						{"badger", πTemp006},
						{"bladder", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--spam --spam").ToObject(), πTemp006).ToObject()
					πTemp003[3] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2466: successes_when_not_required = [
					πF.SetLineno(2466)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"spam", πTemp005},
						{"badger", πTemp006},
						{"bladder", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2470: usage_when_required = usage_when_not_required = '''\
					πF.SetLineno(2470)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("        usage: PROG [-h]\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("        usage: PROG [-h]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2473: help = '''\
					πF.SetLineno(2473)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n        optional arguments:\n          -h, --help  show this help message and exit\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveManySuppressed").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveManySuppressed.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2480: class TestMutuallyExclusiveOptionalAndPositional(MEMixin, TestCase):
			πF.SetLineno(2480)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveOptionalAndPositional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 πg.KWArgs
				_ = πTemp007
				var πTemp008 []*πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2482: def get_parser(self, required):
					πF.SetLineno(2482)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "required", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2483: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2483)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2484: group = parser.add_mutually_exclusive_group(required=required)
							πF.SetLineno(2484)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µgroup = πTemp003
							// line 2485: group.add_argument('--foo', action='store_true', help='FOO')
							πF.SetLineno(2485)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--foo").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", ßFOO.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2486: group.add_argument('--spam', help='SPAM')
							πF.SetLineno(2486)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--spam").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", ßSPAM.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2487: group.add_argument('badger', nargs='*', default='X', help='BADGER')
							πF.SetLineno(2487)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßbadger.ToObject()
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("*").ToObject()},
								{"default", ßX.ToObject()},
								{"help", ßBADGER.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2488: return parser
							πF.SetLineno(2488)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2490: failures = [
					πF.SetLineno(2490)
					πTemp003 = make([]*πg.Object, 5)
					πTemp003[0] = πg.NewStr("--foo --spam S").ToObject()
					πTemp003[1] = πg.NewStr("--spam S X").ToObject()
					πTemp003[2] = πg.NewStr("X --foo").ToObject()
					πTemp003[3] = πg.NewStr("X Y Z --spam S").ToObject()
					πTemp003[4] = πg.NewStr("--foo X Y").ToObject()
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2497: successes = [
					πF.SetLineno(2497)
					πTemp003 = make([]*πg.Object, 4)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"foo", πTemp005},
						{"spam", πTemp006},
						{"badger", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--foo").ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"foo", πTemp005},
						{"spam", ßS.ToObject()},
						{"badger", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("--spam S").ToObject(), πTemp006).ToObject()
					πTemp003[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = make([]*πg.Object, 1)
					πTemp008[0] = ßX.ToObject()
					πTemp009 = πg.NewList(πTemp008...).ToObject()
					πTemp007 = πg.KWArgs{
						{"foo", πTemp005},
						{"spam", πTemp006},
						{"badger", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßX.ToObject(), πTemp006).ToObject()
					πTemp003[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp008 = make([]*πg.Object, 3)
					πTemp008[0] = ßX.ToObject()
					πTemp008[1] = ßY.ToObject()
					πTemp008[2] = ßZ.ToObject()
					πTemp009 = πg.NewList(πTemp008...).ToObject()
					πTemp007 = πg.KWArgs{
						{"foo", πTemp005},
						{"spam", πTemp006},
						{"badger", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("X Y Z").ToObject(), πTemp006).ToObject()
					πTemp003[3] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2503: successes_when_not_required = [
					πF.SetLineno(2503)
					πTemp003 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp007 = πg.KWArgs{
						{"foo", πTemp005},
						{"spam", πTemp006},
						{"badger", ßX.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp007); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2507: usage_when_not_required = '''\
					πF.SetLineno(2507)
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("        usage: PROG [-h] [--foo | --spam SPAM | badger [badger ...]]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2510: usage_when_required = '''\
					πF.SetLineno(2510)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("        usage: PROG [-h] (--foo | --spam SPAM | badger [badger ...])\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2513: help = '''\
					πF.SetLineno(2513)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n        positional arguments:\n          badger       BADGER\n\n        optional arguments:\n          -h, --help   show this help message and exit\n          --foo        FOO\n          --spam SPAM  SPAM\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveOptionalAndPositional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveOptionalAndPositional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2525: class TestMutuallyExclusiveOptionalsMixed(MEMixin, TestCase):
			πF.SetLineno(2525)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveOptionalsMixed", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 πg.KWArgs
				_ = πTemp010
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2527: def get_parser(self, required):
					πF.SetLineno(2527)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "required", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2528: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2528)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2529: parser.add_argument('-x', action='store_true', help='x help')
							πF.SetLineno(2529)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("x help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2530: group = parser.add_mutually_exclusive_group(required=required)
							πF.SetLineno(2530)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µgroup = πTemp003
							// line 2531: group.add_argument('-a', action='store_true', help='a help')
							πF.SetLineno(2531)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-a").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("a help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2532: group.add_argument('-b', action='store_true', help='b help')
							πF.SetLineno(2532)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-b").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("b help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2533: parser.add_argument('-y', action='store_true', help='y help')
							πF.SetLineno(2533)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-y").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("y help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2534: group.add_argument('-c', action='store_true', help='c help')
							πF.SetLineno(2534)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-c").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("c help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2535: return parser
							πF.SetLineno(2535)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2537: failures = ['-a -b', '-b -c', '-a -c', '-a -b -c']
					πF.SetLineno(2537)
					πTemp003 = make([]*πg.Object, 4)
					πTemp003[0] = πg.NewStr("-a -b").ToObject()
					πTemp003[1] = πg.NewStr("-b -c").ToObject()
					πTemp003[2] = πg.NewStr("-a -c").ToObject()
					πTemp003[3] = πg.NewStr("-a -b -c").ToObject()
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2538: successes = [
					πF.SetLineno(2538)
					πTemp003 = make([]*πg.Object, 6)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-a").ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-b").ToObject(), πTemp006).ToObject()
					πTemp003[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-c").ToObject(), πTemp006).ToObject()
					πTemp003[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-a -x").ToObject(), πTemp006).ToObject()
					πTemp003[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y -b").ToObject(), πTemp006).ToObject()
					πTemp003[4] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x -y -c").ToObject(), πTemp006).ToObject()
					πTemp003[5] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2546: successes_when_not_required = [
					πF.SetLineno(2546)
					πTemp003 = make([]*πg.Object, 3)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ß.ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-x").ToObject(), πTemp006).ToObject()
					πTemp003[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp010 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", πTemp008},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp010); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("-y").ToObject(), πTemp006).ToObject()
					πTemp003[2] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2552: usage_when_required = usage_when_not_required = '''\
					πF.SetLineno(2552)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("        usage: PROG [-h] [-x] [-a] [-b] [-y] [-c]\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("        usage: PROG [-h] [-x] [-a] [-b] [-y] [-c]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2555: help = '''\
					πF.SetLineno(2555)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n        optional arguments:\n          -h, --help  show this help message and exit\n          -x          x help\n          -a          a help\n          -b          b help\n          -y          y help\n          -c          c help\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveOptionalsMixed").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveOptionalsMixed.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2567: class TestMutuallyExclusiveInGroup(MEMixin, TestCase):
			πF.SetLineno(2567)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveInGroup", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 πg.KWArgs
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2569: def get_parser(self, required=None):
					πF.SetLineno(2569)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[1] = πg.Param{Name: "required", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µtitled_group *πg.Object = πg.UnboundLocal; _ = µtitled_group
						var µmutex_group *πg.Object = πg.UnboundLocal; _ = µmutex_group
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2570: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2570)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2571: titled_group = parser.add_argument_group(
							πF.SetLineno(2571)
							πTemp001 = πg.KWArgs{
								{"title", πg.NewStr("Titled group").ToObject()},
								{"description", πg.NewStr("Group description").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µtitled_group = πTemp003
							// line 2573: mutex_group = \
							πF.SetLineno(2573)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µtitled_group, "titled_group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtitled_group, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µmutex_group = πTemp003
							// line 2575: mutex_group.add_argument('--bar', help='bar help')
							πF.SetLineno(2575)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--bar").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("bar help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µmutex_group, "mutex_group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmutex_group, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2576: mutex_group.add_argument('--baz', help='baz help')
							πF.SetLineno(2576)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--baz").ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("baz help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µmutex_group, "mutex_group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmutex_group, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2577: return parser
							πF.SetLineno(2577)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2579: failures = ['--bar X --baz Y', '--baz X --bar Y']
					πF.SetLineno(2579)
					πTemp004 = make([]*πg.Object, 2)
					πTemp004[0] = πg.NewStr("--bar X --baz Y").ToObject()
					πTemp004[1] = πg.NewStr("--baz X --bar Y").ToObject()
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2580: successes = [
					πF.SetLineno(2580)
					πTemp004 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", ßX.ToObject()},
						{"baz", πTemp005},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--bar X").ToObject(), πTemp007).ToObject()
					πTemp004[0] = πTemp003
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", πTemp005},
						{"baz", ßY.ToObject()},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(πg.NewStr("--baz Y").ToObject(), πTemp007).ToObject()
					πTemp004[1] = πTemp003
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2584: successes_when_not_required = [
					πF.SetLineno(2584)
					πTemp004 = make([]*πg.Object, 1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp006 = πg.KWArgs{
						{"bar", πTemp005},
						{"baz", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
						continue
					}
					πTemp003 = πg.NewTuple2(ß.ToObject(), πTemp007).ToObject()
					πTemp004[0] = πTemp003
					πTemp003 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2588: usage_when_not_required = '''\
					πF.SetLineno(2588)
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("        usage: PROG [-h] [--bar BAR | --baz BAZ]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2591: usage_when_required = '''\
					πF.SetLineno(2591)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("        usage: PROG [-h] (--bar BAR | --baz BAZ)\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2594: help = '''\
					πF.SetLineno(2594)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n        optional arguments:\n          -h, --help  show this help message and exit\n\n        Titled group:\n          Group description\n\n          --bar BAR   bar help\n          --baz BAZ   baz help\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveInGroup").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveInGroup.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2607: class TestMutuallyExclusiveOptionalsAndPositionalsMixed(MEMixin, TestCase):
			πF.SetLineno(2607)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEMixin); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveOptionalsAndPositionalsMixed", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 πg.KWArgs
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2609: def get_parser(self, required):
					πF.SetLineno(2609)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "required", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2610: parser = ErrorRaisingArgumentParser(prog='PROG')
							πF.SetLineno(2610)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2611: parser.add_argument('x', help='x help')
							πF.SetLineno(2611)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßx.ToObject()
							πTemp001 = πg.KWArgs{
								{"help", πg.NewStr("x help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2612: parser.add_argument('-y', action='store_true', help='y help')
							πF.SetLineno(2612)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-y").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("y help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2613: group = parser.add_mutually_exclusive_group(required=required)
							πF.SetLineno(2613)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_mutually_exclusive_group, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µgroup = πTemp003
							// line 2614: group.add_argument('a', nargs='?', help='a help')
							πF.SetLineno(2614)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßa.ToObject()
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"help", πg.NewStr("a help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2615: group.add_argument('-b', action='store_true', help='b help')
							πF.SetLineno(2615)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-b").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("b help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2616: group.add_argument('-c', action='store_true', help='c help')
							πF.SetLineno(2616)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-c").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
								{"help", πg.NewStr("c help").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2617: return parser
							πF.SetLineno(2617)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2619: failures = ['X A -b', '-b -c', '-c X A']
					πF.SetLineno(2619)
					πTemp003 = make([]*πg.Object, 3)
					πTemp003[0] = πg.NewStr("X A -b").ToObject()
					πTemp003[1] = πg.NewStr("-b -c").ToObject()
					πTemp003[2] = πg.NewStr("-c X A").ToObject()
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßfailures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2620: successes = [
					πF.SetLineno(2620)
					πTemp003 = make([]*πg.Object, 5)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"a", ßA.ToObject()},
						{"b", πTemp005},
						{"c", πTemp006},
						{"x", ßX.ToObject()},
						{"y", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("X A").ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", ßX.ToObject()},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("X -b").ToObject(), πTemp006).ToObject()
					πTemp003[1] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", ßX.ToObject()},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("X -c").ToObject(), πTemp006).ToObject()
					πTemp003[2] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"a", ßA.ToObject()},
						{"b", πTemp005},
						{"c", πTemp006},
						{"x", ßX.ToObject()},
						{"y", πTemp007},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("X A -y").ToObject(), πTemp006).ToObject()
					πTemp003[3] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", ßX.ToObject()},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("X -y -b").ToObject(), πTemp006).ToObject()
					πTemp003[4] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2627: successes_when_not_required = [
					πF.SetLineno(2627)
					πTemp003 = make([]*πg.Object, 2)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", ßX.ToObject()},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(ßX.ToObject(), πTemp006).ToObject()
					πTemp003[0] = πTemp004
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp008 = πg.KWArgs{
						{"a", πTemp005},
						{"b", πTemp006},
						{"c", πTemp007},
						{"x", ßX.ToObject()},
						{"y", πTemp009},
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßNS); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp005.Call(πF, nil, πTemp008); πE != nil {
						continue
					}
					πTemp004 = πg.NewTuple2(πg.NewStr("X -y").ToObject(), πTemp006).ToObject()
					πTemp003[1] = πTemp004
					πTemp004 = πg.NewList(πTemp003...).ToObject()
					if πE = πClass.SetItem(πF, ßsuccesses_when_not_required.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2632: usage_when_required = usage_when_not_required = '''\
					πF.SetLineno(2632)
					if πE = πClass.SetItem(πF, ßusage_when_required.ToObject(), πg.NewStr("        usage: PROG [-h] [-y] [-b] [-c] x [a]\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßusage_when_not_required.ToObject(), πg.NewStr("        usage: PROG [-h] [-y] [-b] [-c] x [a]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2635: help = '''\
					πF.SetLineno(2635)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("\n        positional arguments:\n          x           x help\n          a           a help\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          -y          y help\n          -b          b help\n          -c          c help\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveOptionalsAndPositionalsMixed").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveOptionalsAndPositionalsMixed.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2652: class MEPBase(object):
			πF.SetLineno(2652)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("MEPBase", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2654: def get_parser(self, required=None):
					πF.SetLineno(2654)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[1] = πg.Param{Name: "required", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrequired *πg.Object = πArgs[1]; _ = µrequired
						var µparent *πg.Object = πg.UnboundLocal; _ = µparent
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2655: parent = super(MEPBase, self).get_parser(required=required)
							πF.SetLineno(2655)
							if πE = πg.CheckLocal(πF, µrequired, "required"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"required", µrequired},
							}
							πTemp002 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp002[1] = µself
							if πTemp003, πE = πg.ResolveGlobal(πF, ßsuper); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßget_parser, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparent = πTemp004
							// line 2656: parser = ErrorRaisingArgumentParser(
							πF.SetLineno(2656)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparent, ßprog, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp002[0] = µparent
							πTemp005 = πg.NewList(πTemp002...).ToObject()
							πTemp001 = πg.KWArgs{
								{"prog", πTemp003},
								{"add_help", πTemp004},
								{"parents", πTemp005},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp004
							// line 2658: return parser
							πF.SetLineno(2658)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πR = µparser
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_parser.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("MEPBase").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßMEPBase.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2661: class TestMutuallyExclusiveGroupErrorsParent(
			πF.SetLineno(2661)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveGroupErrors); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveGroupErrorsParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2663: pass
					πF.SetLineno(2663)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveGroupErrorsParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveGroupErrorsParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2666: class TestMutuallyExclusiveSimpleParent(
			πF.SetLineno(2666)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveSimple); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveSimpleParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2668: pass
					πF.SetLineno(2668)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveSimpleParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveSimpleParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2671: class TestMutuallyExclusiveLongParent(
			πF.SetLineno(2671)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveLong); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveLongParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2673: pass
					πF.SetLineno(2673)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveLongParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveLongParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2676: class TestMutuallyExclusiveFirstSuppressedParent(
			πF.SetLineno(2676)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveFirstSuppressed); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveFirstSuppressedParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2678: pass
					πF.SetLineno(2678)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveFirstSuppressedParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveFirstSuppressedParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2681: class TestMutuallyExclusiveManySuppressedParent(
			πF.SetLineno(2681)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveManySuppressed); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveManySuppressedParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2683: pass
					πF.SetLineno(2683)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveManySuppressedParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveManySuppressedParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2686: class TestMutuallyExclusiveOptionalAndPositionalParent(
			πF.SetLineno(2686)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveOptionalAndPositional); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveOptionalAndPositionalParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2688: pass
					πF.SetLineno(2688)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveOptionalAndPositionalParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveOptionalAndPositionalParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2691: class TestMutuallyExclusiveOptionalsMixedParent(
			πF.SetLineno(2691)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveOptionalsMixed); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveOptionalsMixedParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2693: pass
					πF.SetLineno(2693)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveOptionalsMixedParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveOptionalsMixedParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2696: class TestMutuallyExclusiveOptionalsAndPositionalsMixedParent(
			πF.SetLineno(2696)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßMEPBase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestMutuallyExclusiveOptionalsAndPositionalsMixed); πE != nil {
				continue
			}
			πTemp002[1] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestMutuallyExclusiveOptionalsAndPositionalsMixedParent", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2698: pass
					πF.SetLineno(2698)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestMutuallyExclusiveOptionalsAndPositionalsMixedParent").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestMutuallyExclusiveOptionalsAndPositionalsMixedParent.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2704: class TestSetDefaults(TestCase):
			πF.SetLineno(2704)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestSetDefaults", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2706: def test_set_defaults_no_args(self):
					πF.SetLineno(2706)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_set_defaults_no_args", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2707: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2707)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2708: parser.set_defaults(x='foo')
							πF.SetLineno(2708)
							πTemp003 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2709: parser.set_defaults(y='bar', z=1)
							πF.SetLineno(2709)
							πTemp003 = πg.KWArgs{
								{"y", ßbar.ToObject()},
								{"z", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2710: self.assertEqual(NS(x='foo', y='bar', z=1),
							πF.SetLineno(2710)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
								{"y", ßbar.ToObject()},
								{"z", πg.NewInt(1).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2712: self.assertEqual(NS(x='foo', y='bar', z=1),
							πF.SetLineno(2712)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
								{"y", ßbar.ToObject()},
								{"z", πg.NewInt(1).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2714: self.assertEqual(NS(x='baz', y='bar', z=1),
							πF.SetLineno(2714)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßbaz.ToObject()},
								{"y", ßbar.ToObject()},
								{"z", πg.NewInt(1).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"x", ßbaz.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2716: self.assertEqual(NS(x='baz', y='bar', z=2),
							πF.SetLineno(2716)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßbaz.ToObject()},
								{"y", ßbar.ToObject()},
								{"z", πg.NewInt(2).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"x", ßbaz.ToObject()},
								{"z", πg.NewInt(2).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_set_defaults_no_args.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2719: def test_set_defaults_with_args(self):
					πF.SetLineno(2719)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_set_defaults_with_args", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2720: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2720)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2721: parser.set_defaults(x='foo', y='bar')
							πF.SetLineno(2721)
							πTemp003 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2722: parser.add_argument('-x', default='xfoox')
							πF.SetLineno(2722)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							πTemp003 = πg.KWArgs{
								{"default", ßxfoox.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2723: self.assertEqual(NS(x='xfoox', y='bar'),
							πF.SetLineno(2723)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßxfoox.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2725: self.assertEqual(NS(x='xfoox', y='bar'),
							πF.SetLineno(2725)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßxfoox.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2727: self.assertEqual(NS(x='baz', y='bar'),
							πF.SetLineno(2727)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßbaz.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"x", ßbaz.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2729: self.assertEqual(NS(x='1', y='bar'),
							πF.SetLineno(2729)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ß1.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("-x 1").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2731: self.assertEqual(NS(x='1', y='bar'),
							πF.SetLineno(2731)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ß1.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(2)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("-x 1").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2733: self.assertEqual(NS(x='1', y='bar'),
							πF.SetLineno(2733)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ß1.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(2)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("-x 1").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							πTemp003 = πg.KWArgs{
								{"x", ßbaz.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_set_defaults_with_args.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2736: def test_set_defaults_subparsers(self):
					πF.SetLineno(2736)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_set_defaults_subparsers", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µsubparsers *πg.Object = πg.UnboundLocal; _ = µsubparsers
						var µparser_a *πg.Object = πg.UnboundLocal; _ = µparser_a
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2737: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2737)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2738: parser.set_defaults(x='foo')
							πF.SetLineno(2738)
							πTemp003 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2739: subparsers = parser.add_subparsers()
							πF.SetLineno(2739)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µsubparsers = πTemp002
							// line 2740: parser_a = subparsers.add_parser('a')
							πF.SetLineno(2740)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßa.ToObject()
							if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µparser_a = πTemp002
							// line 2741: parser_a.set_defaults(y='bar')
							πF.SetLineno(2741)
							πTemp003 = πg.KWArgs{
								{"y", ßbar.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser_a, "parser_a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser_a, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2742: self.assertEqual(NS(x='foo', y='bar'),
							πF.SetLineno(2742)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
								{"y", ßbar.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, ßa.ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_set_defaults_subparsers.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2745: def test_set_defaults_parents(self):
					πF.SetLineno(2745)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_set_defaults_parents", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparent *πg.Object = πg.UnboundLocal; _ = µparent
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2746: parent = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(2746)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"add_help", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparent = πTemp003
							// line 2747: parent.set_defaults(x='foo')
							πF.SetLineno(2747)
							πTemp002 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparent, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							// line 2748: parser = ErrorRaisingArgumentParser(parents=[parent])
							πF.SetLineno(2748)
							πTemp004 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp004[0] = µparent
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp002 = πg.KWArgs{
								{"parents", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 2749: self.assertEqual(NS(x='foo'), parser.parse_args([]))
							πF.SetLineno(2749)
							πTemp004 = πF.MakeArgs(2)
							πTemp002 = πg.KWArgs{
								{"x", ßfoo.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_set_defaults_parents.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 2751: def test_set_defaults_on_parent_and_subparser(self):
					πF.SetLineno(2751)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_set_defaults_on_parent_and_subparser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µxparser *πg.Object = πg.UnboundLocal; _ = µxparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2752: parser = argparse.ArgumentParser()
							πF.SetLineno(2752)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 2753: xparser = parser.add_subparsers().add_parser('X')
							πF.SetLineno(2753)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßX.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßadd_parser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µxparser = πTemp002
							// line 2754: parser.set_defaults(foo=1)
							πF.SetLineno(2754)
							πTemp004 = πg.KWArgs{
								{"foo", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							// line 2755: xparser.set_defaults(foo=2)
							πF.SetLineno(2755)
							πTemp004 = πg.KWArgs{
								{"foo", πg.NewInt(2).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µxparser, "xparser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µxparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							// line 2756: self.assertEqual(NS(foo=2), parser.parse_args(['X']))
							πF.SetLineno(2756)
							πTemp003 = πF.MakeArgs(2)
							πTemp004 = πg.KWArgs{
								{"foo", πg.NewInt(2).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 1)
							πTemp006[0] = ßX.ToObject()
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_set_defaults_on_parent_and_subparser.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 2758: def test_set_defaults_same_as_add_argument(self):
					πF.SetLineno(2758)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_set_defaults_same_as_add_argument", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2759: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2759)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2760: parser.set_defaults(w='W', x='X', y='Y', z='Z')
							πF.SetLineno(2760)
							πTemp003 = πg.KWArgs{
								{"w", ßW.ToObject()},
								{"x", ßX.ToObject()},
								{"y", ßY.ToObject()},
								{"z", ßZ.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2761: parser.add_argument('-w')
							πF.SetLineno(2761)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-w").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2762: parser.add_argument('-x', default='XX')
							πF.SetLineno(2762)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							πTemp003 = πg.KWArgs{
								{"default", ßXX.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2763: parser.add_argument('y', nargs='?')
							πF.SetLineno(2763)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßy.ToObject()
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2764: parser.add_argument('z', nargs='?', default='ZZ')
							πF.SetLineno(2764)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßz.ToObject()
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"default", ßZZ.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2767: self.assertEqual(NS(w='W', x='XX', y='Y', z='ZZ'),
							πF.SetLineno(2767)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"w", ßW.ToObject()},
								{"x", ßXX.ToObject()},
								{"y", ßY.ToObject()},
								{"z", ßZZ.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2771: parser.set_defaults(w='WW', x='X', y='YY', z='Z')
							πF.SetLineno(2771)
							πTemp003 = πg.KWArgs{
								{"w", ßWW.ToObject()},
								{"x", ßX.ToObject()},
								{"y", ßYY.ToObject()},
								{"z", ßZ.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2772: self.assertEqual(NS(w='WW', x='X', y='YY', z='Z'),
							πF.SetLineno(2772)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"w", ßWW.ToObject()},
								{"x", ßX.ToObject()},
								{"y", ßYY.ToObject()},
								{"z", ßZ.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_set_defaults_same_as_add_argument.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 2775: def test_set_defaults_same_as_add_argument_group(self):
					πF.SetLineno(2775)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_set_defaults_same_as_add_argument_group", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2776: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2776)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2777: parser.set_defaults(w='W', x='X', y='Y', z='Z')
							πF.SetLineno(2777)
							πTemp003 = πg.KWArgs{
								{"w", ßW.ToObject()},
								{"x", ßX.ToObject()},
								{"y", ßY.ToObject()},
								{"z", ßZ.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2778: group = parser.add_argument_group('foo')
							πF.SetLineno(2778)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µgroup = πTemp002
							// line 2779: group.add_argument('-w')
							πF.SetLineno(2779)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-w").ToObject()
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2780: group.add_argument('-x', default='XX')
							πF.SetLineno(2780)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							πTemp003 = πg.KWArgs{
								{"default", ßXX.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2781: group.add_argument('y', nargs='?')
							πF.SetLineno(2781)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßy.ToObject()
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2782: group.add_argument('z', nargs='?', default='ZZ')
							πF.SetLineno(2782)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßz.ToObject()
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"default", ßZZ.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2786: self.assertEqual(NS(w='W', x='XX', y='Y', z='ZZ'),
							πF.SetLineno(2786)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"w", ßW.ToObject()},
								{"x", ßXX.ToObject()},
								{"y", ßY.ToObject()},
								{"z", ßZZ.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2790: parser.set_defaults(w='WW', x='X', y='YY', z='Z')
							πF.SetLineno(2790)
							πTemp003 = πg.KWArgs{
								{"w", ßWW.ToObject()},
								{"x", ßX.ToObject()},
								{"y", ßYY.ToObject()},
								{"z", ßZ.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 2791: self.assertEqual(NS(w='WW', x='X', y='YY', z='Z'),
							πF.SetLineno(2791)
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"w", ßWW.ToObject()},
								{"x", ßX.ToObject()},
								{"y", ßYY.ToObject()},
								{"z", ßZ.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_set_defaults_same_as_add_argument_group.ToObject(), πTemp008); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestSetDefaults").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestSetDefaults.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2798: class TestGetDefault(TestCase):
			πF.SetLineno(2798)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestGetDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2800: def test_get_default(self):
					πF.SetLineno(2800)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_get_default", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2801: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(2801)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 2802: self.assertEqual(None, parser.get_default("foo"))
							πF.SetLineno(2802)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2803: self.assertEqual(None, parser.get_default("bar"))
							πF.SetLineno(2803)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2805: parser.add_argument("--foo")
							πF.SetLineno(2805)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2806: self.assertEqual(None, parser.get_default("foo"))
							πF.SetLineno(2806)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2807: self.assertEqual(None, parser.get_default("bar"))
							πF.SetLineno(2807)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2809: parser.add_argument("--bar", type=int, default=42)
							πF.SetLineno(2809)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--bar").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"type", πTemp001},
								{"default", πg.NewInt(42).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2810: self.assertEqual(None, parser.get_default("foo"))
							πF.SetLineno(2810)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2811: self.assertEqual(42, parser.get_default("bar"))
							πF.SetLineno(2811)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(42).ToObject()
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2813: parser.set_defaults(foo="badger")
							πF.SetLineno(2813)
							πTemp005 = πg.KWArgs{
								{"foo", ßbadger.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßset_defaults, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							// line 2814: self.assertEqual("badger", parser.get_default("foo"))
							πF.SetLineno(2814)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßbadger.ToObject()
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2815: self.assertEqual(42, parser.get_default("bar"))
							πF.SetLineno(2815)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(42).ToObject()
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßget_default, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_get_default.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestGetDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestGetDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2821: class TestNamespaceContainsSimple(TestCase):
			πF.SetLineno(2821)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestNamespaceContainsSimple", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2823: def test_empty(self):
					πF.SetLineno(2823)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_empty", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µns *πg.Object = πg.UnboundLocal; _ = µns
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2824: ns = argparse.Namespace()
							πF.SetLineno(2824)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µns = πTemp001
							// line 2825: self.assertEqual('' in ns, False)
							πF.SetLineno(2825)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µns, ß.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2826: self.assertEqual('' not in ns, True)
							πF.SetLineno(2826)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µns, ß.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp004).ToObject()
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2827: self.assertEqual('x' in ns, False)
							πF.SetLineno(2827)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µns, ßx.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_empty.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2829: def test_non_empty(self):
					πF.SetLineno(2829)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_non_empty", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µns *πg.Object = πg.UnboundLocal; _ = µns
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2830: ns = argparse.Namespace(x=1, y=2)
							πF.SetLineno(2830)
							πTemp001 = πg.KWArgs{
								{"x", πg.NewInt(1).ToObject()},
								{"y", πg.NewInt(2).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µns = πTemp002
							// line 2831: self.assertEqual('x' in ns, True)
							πF.SetLineno(2831)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µns, ßx.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp005).ToObject()
							πTemp004[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2832: self.assertEqual('x' not in ns, False)
							πF.SetLineno(2832)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µns, ßx.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp005).ToObject()
							πTemp004[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2833: self.assertEqual('y' in ns, True)
							πF.SetLineno(2833)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µns, ßy.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp005).ToObject()
							πTemp004[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2834: self.assertEqual('' in ns, False)
							πF.SetLineno(2834)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µns, ß.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp005).ToObject()
							πTemp004[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2835: self.assertEqual('xx' in ns, False)
							πF.SetLineno(2835)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µns, ßxx.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp005).ToObject()
							πTemp004[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2836: self.assertEqual('z' in ns, False)
							πF.SetLineno(2836)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µns, ßz.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp005).ToObject()
							πTemp004[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_non_empty.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestNamespaceContainsSimple").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestNamespaceContainsSimple.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2842: class TestHelpFormattingMetaclass(type):
			πF.SetLineno(2842)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpFormattingMetaclass", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2844: def __init__(cls, name, bases, bodydict):
					πF.SetLineno(2844)
					πTemp002 = make([]πg.Param, 4)
					πTemp002[0] = πg.Param{Name: "cls", Def: nil}
					πTemp002[1] = πg.Param{Name: "name", Def: nil}
					πTemp002[2] = πg.Param{Name: "bases", Def: nil}
					πTemp002[3] = πg.Param{Name: "bodydict", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µcls *πg.Object = πArgs[0]; _ = µcls
						var µname *πg.Object = πArgs[1]; _ = µname
						var µbases *πg.Object = πArgs[2]; _ = µbases
						var µbodydict *πg.Object = πArgs[3]; _ = µbodydict
						var µAddTests *πg.Object = πg.UnboundLocal; _ = µAddTests
						var µfunc_suffix *πg.Object = πg.UnboundLocal; _ = µfunc_suffix
						var µstd_name *πg.Object = πg.UnboundLocal; _ = µstd_name
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Dict
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3: goto Label3
							case 4: goto Label4
							default: panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µname, ßHelpTestCase.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 2845: if name == 'HelpTestCase':
							πF.SetLineno(2845)
						Label1:
							// line 2846: return
							πF.SetLineno(2846)
							πR = πg.None
							continue
							goto Label2
						Label2:
							// line 2848: class AddTests(object):
							πF.SetLineno(2848)
							πTemp004 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
								continue
							}
							πTemp004[0] = πTemp006
							πTemp003 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp003.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("AddTests", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp003
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2850: def __init__(self, test_class, func_suffix, std_name):
									πF.SetLineno(2850)
									πTemp002 = make([]πg.Param, 4)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "test_class", Def: nil}
									πTemp002[2] = πg.Param{Name: "func_suffix", Def: nil}
									πTemp002[3] = πg.Param{Name: "std_name", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtest_class *πg.Object = πArgs[1]; _ = µtest_class
										var µfunc_suffix *πg.Object = πArgs[2]; _ = µfunc_suffix
										var µstd_name *πg.Object = πArgs[3]; _ = µstd_name
										var µtest_func *πg.Object = πg.UnboundLocal; _ = µtest_func
										var µtest_name *πg.Object = πg.UnboundLocal; _ = µtest_name
										var µtest_wrapper *πg.Object = πg.UnboundLocal; _ = µtest_wrapper
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 []*πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 bool
										_ = πTemp005
										var πTemp006 *πg.Object
										_ = πTemp006
										var πTemp007 *πg.Object
										_ = πTemp007
										var πTemp008 []πg.Param
										_ = πTemp008
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											case 1: goto Label1
											case 2: goto Label2
											default: panic("unexpected function state")
											}
											// line 2851: self.func_suffix = func_suffix
											πF.SetLineno(2851)
											if πE = πg.CheckLocal(πF, µfunc_suffix, "func_suffix"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µfunc_suffix); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßfunc_suffix, πTemp001); πE != nil {
												continue
											}
											// line 2852: self.std_name = std_name
											πF.SetLineno(2852)
											if πE = πg.CheckLocal(πF, µstd_name, "std_name"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µstd_name); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßstd_name, πTemp001); πE != nil {
												continue
											}
											πTemp002 = make([]*πg.Object, 3)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßtest_format, nil); πE != nil {
												continue
											}
											πTemp002[0] = πTemp003
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßtest_print, nil); πE != nil {
												continue
											}
											πTemp002[1] = πTemp003
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßtest_print_file, nil); πE != nil {
												continue
											}
											πTemp002[2] = πTemp003
											πTemp003 = πg.NewList(πTemp002...).ToObject()
											if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
												continue
											}
											πF.PushCheckpoint(2)
											πTemp004 = false
										Label1:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp004 {
												πF.PopCheckpoint()
												goto Label3
											}
											if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp005 = !isStop
											} else {
												πTemp005 = true
												µtest_func = πTemp003
											}
											if πE != nil || !πTemp005 {
												continue
											}
											πF.PushCheckpoint(1)            
											// line 2857: test_name = '%s_%s' % (test_func.__name__, func_suffix)
											πF.SetLineno(2857)
											if πE = πg.CheckLocal(πF, µtest_func, "test_func"); πE != nil {
												continue
											}
											if πTemp007, πE = πg.GetAttr(πF, µtest_func, ß__name__, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µfunc_suffix, "func_suffix"); πE != nil {
												continue
											}
											πTemp006 = πg.NewTuple2(πTemp007, µfunc_suffix).ToObject()
											if πTemp003, πE = πg.Mod(πF, πg.NewStr("%s_%s").ToObject(), πTemp006); πE != nil {
												continue
											}
											µtest_name = πTemp003
											// line 2859: def test_wrapper(self, test_func=test_func):
											πF.SetLineno(2859)
											πTemp008 = make([]πg.Param, 2)
											πTemp008[0] = πg.Param{Name: "self", Def: nil}
											if πE = πg.CheckLocal(πF, µtest_func, "test_func"); πE != nil {
												continue
											}
											πTemp008[1] = πg.Param{Name: "test_func", Def: µtest_func}
											πTemp003 = πg.NewFunction(πg.NewCode("test_wrapper", "build/src/__python__/test/test_argparse.py", πTemp008, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
												var µself *πg.Object = πArgs[0]; _ = µself
												var µtest_func *πg.Object = πArgs[1]; _ = µtest_func
												var πTemp001 []*πg.Object
												_ = πTemp001
												var πTemp002 *πg.Object
												_ = πTemp002
												var πR *πg.Object; _ = πR
												var πE *πg.BaseException; _ = πE
												for ; πF.State() >= 0; πF.PopCheckpoint() {
													switch πF.State() {
													case 0:
													default: panic("unexpected function state")
													}
													// line 2860: test_func(self)
													πF.SetLineno(2860)
													πTemp001 = πF.MakeArgs(1)
													if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
														continue
													}
													πTemp001[0] = µself
													if πE = πg.CheckLocal(πF, µtest_func, "test_func"); πE != nil {
														continue
													}
													if πTemp002, πE = µtest_func.Call(πF, πTemp001, nil); πE != nil {
														continue
													}
													πF.FreeArgs(πTemp001)
												}
												if πE != nil {
													πR = nil
												} else if πR == nil {
													πR = πg.None
												}
												return πR, πE
											}), πF.Globals()).ToObject()
											µtest_wrapper = πTemp003
											// line 2865: setattr(test_class, test_name, test_wrapper)
											πF.SetLineno(2865)
											πTemp002 = πF.MakeArgs(3)
											if πE = πg.CheckLocal(πF, µtest_class, "test_class"); πE != nil {
												continue
											}
											πTemp002[0] = µtest_class
											if πE = πg.CheckLocal(πF, µtest_name, "test_name"); πE != nil {
												continue
											}
											πTemp002[1] = µtest_name
											if πE = πg.CheckLocal(πF, µtest_wrapper, "test_wrapper"); πE != nil {
												continue
											}
											πTemp002[2] = µtest_wrapper
											if πTemp006, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
												continue
											}
											if πTemp007, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp002)
											continue
										Label2:
											if πE != nil || πR != nil {
												continue
											}
										Label3:
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2867: def _get_parser(self, tester):
									πF.SetLineno(2867)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("_get_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µparser *πg.Object = πg.UnboundLocal; _ = µparser
										var µargument_sig *πg.Object = πg.UnboundLocal; _ = µargument_sig
										var µgroup_sigs *πg.Object = πg.UnboundLocal; _ = µgroup_sigs
										var µgroup_sig *πg.Object = πg.UnboundLocal; _ = µgroup_sig
										var µargument_sigs *πg.Object = πg.UnboundLocal; _ = µargument_sigs
										var µgroup *πg.Object = πg.UnboundLocal; _ = µgroup
										var µsubparsers_sigs *πg.Object = πg.UnboundLocal; _ = µsubparsers_sigs
										var µsubparsers *πg.Object = πg.UnboundLocal; _ = µsubparsers
										var µsubparser_sig *πg.Object = πg.UnboundLocal; _ = µsubparser_sig
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 *πg.Object
										_ = πTemp004
										var πTemp005 []*πg.Object
										_ = πTemp005
										var πTemp006 []*πg.Object
										_ = πTemp006
										var πTemp007 bool
										_ = πTemp007
										var πTemp008 bool
										_ = πTemp008
										var πTemp009 *πg.Object
										_ = πTemp009
										var πTemp010 bool
										_ = πTemp010
										var πTemp011 *πg.Object
										_ = πTemp011
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											case 1: goto Label1
											case 2: goto Label2
											case 4: goto Label4
											case 5: goto Label5
											case 7: goto Label7
											case 8: goto Label8
											case 12: goto Label12
											case 13: goto Label13
											default: panic("unexpected function state")
											}
											// line 2868: parser = argparse.ArgumentParser(
											πF.SetLineno(2868)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtester, ßparser_signature, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtester, ßparser_signature, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßkwargs, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Invoke(πF, πTemp004, nil, πTemp002, nil, πTemp003); πE != nil {
												continue
											}
											µparser = πTemp001
											πTemp005 = πF.MakeArgs(3)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp005[0] = µtester
											πTemp005[1] = ßargument_signatures.ToObject()
											πTemp006 = make([]*πg.Object, 0)
											πTemp002 = πg.NewList(πTemp006...).ToObject()
											πTemp005[2] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp005)
											if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
												continue
											}
											πF.PushCheckpoint(2)
											πTemp007 = false
										Label1:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp007 {
												πF.PopCheckpoint()
												goto Label3
											}
											if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp008 = !isStop
											} else {
												πTemp008 = true
												µargument_sig = πTemp002
											}
											if πE != nil || !πTemp008 {
												continue
											}
											πF.PushCheckpoint(1)            
											// line 2872: parser.add_argument(*argument_sig.args,
											πF.SetLineno(2872)
											if πE = πg.CheckLocal(πF, µargument_sig, "argument_sig"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µargument_sig, ßargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µargument_sig, "argument_sig"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µargument_sig, ßkwargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
												continue
											}
											if πTemp009, πE = πg.Invoke(πF, πTemp004, nil, πTemp002, nil, πTemp003); πE != nil {
												continue
											}
											continue
										Label2:
											if πE != nil || πR != nil {
												continue
											}
										Label3:
											// line 2874: group_sigs = getattr(tester, 'argument_group_signatures', [])
											πF.SetLineno(2874)
											πTemp005 = πF.MakeArgs(3)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp005[0] = µtester
											πTemp005[1] = ßargument_group_signatures.ToObject()
											πTemp006 = make([]*πg.Object, 0)
											πTemp001 = πg.NewList(πTemp006...).ToObject()
											πTemp005[2] = πTemp001
											if πTemp001, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp005)
											µgroup_sigs = πTemp002
											if πE = πg.CheckLocal(πF, µgroup_sigs, "group_sigs"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Iter(πF, µgroup_sigs); πE != nil {
												continue
											}
											πF.PushCheckpoint(5)
											πTemp007 = false
										Label4:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp007 {
												πF.PopCheckpoint()
												goto Label6
											}
											if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp008 = !isStop
											} else {
												πTemp008 = true
												if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp003}, πg.TieTarget{Target: &πTemp004}}}, πTemp002); πE != nil {
													continue
												}
												µgroup_sig = πTemp003
												µargument_sigs = πTemp004
											}
											if πE != nil || !πTemp008 {
												continue
											}
											πF.PushCheckpoint(4)            
											// line 2876: group = parser.add_argument_group(*group_sig.args,
											πF.SetLineno(2876)
											if πE = πg.CheckLocal(πF, µgroup_sig, "group_sig"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µgroup_sig, ßargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µgroup_sig, "group_sig"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µgroup_sig, ßkwargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µparser, ßadd_argument_group, nil); πE != nil {
												continue
											}
											if πTemp009, πE = πg.Invoke(πF, πTemp004, nil, πTemp002, nil, πTemp003); πE != nil {
												continue
											}
											µgroup = πTemp009
											if πE = πg.CheckLocal(πF, µargument_sigs, "argument_sigs"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Iter(πF, µargument_sigs); πE != nil {
												continue
											}
											πF.PushCheckpoint(8)
											πTemp008 = false
										Label7:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp008 {
												πF.PopCheckpoint()
												goto Label9
											}
											if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp010 = !isStop
											} else {
												πTemp010 = true
												µargument_sig = πTemp003
											}
											if πE != nil || !πTemp010 {
												continue
											}
											πF.PushCheckpoint(7)            
											// line 2879: group.add_argument(*argument_sig.args,
											πF.SetLineno(2879)
											if πE = πg.CheckLocal(πF, µargument_sig, "argument_sig"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µargument_sig, ßargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µargument_sig, "argument_sig"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µargument_sig, ßkwargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µgroup, "group"); πE != nil {
												continue
											}
											if πTemp009, πE = πg.GetAttr(πF, µgroup, ßadd_argument, nil); πE != nil {
												continue
											}
											if πTemp011, πE = πg.Invoke(πF, πTemp009, nil, πTemp003, nil, πTemp004); πE != nil {
												continue
											}
											continue
										Label8:
											if πE != nil || πR != nil {
												continue
											}
										Label9:
											continue
										Label5:
											if πE != nil || πR != nil {
												continue
											}
										Label6:
											// line 2881: subparsers_sigs = getattr(tester, 'subparsers_signatures', [])
											πF.SetLineno(2881)
											πTemp005 = πF.MakeArgs(3)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp005[0] = µtester
											πTemp005[1] = ßsubparsers_signatures.ToObject()
											πTemp006 = make([]*πg.Object, 0)
											πTemp001 = πg.NewList(πTemp006...).ToObject()
											πTemp005[2] = πTemp001
											if πTemp001, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp005)
											µsubparsers_sigs = πTemp002
											if πE = πg.CheckLocal(πF, µsubparsers_sigs, "subparsers_sigs"); πE != nil {
												continue
											}
											if πTemp007, πE = πg.IsTrue(πF, µsubparsers_sigs); πE != nil {
												continue
											}
											if πTemp007 {
												goto Label10
											}
											goto Label11
											// line 2882: if subparsers_sigs:
											πF.SetLineno(2882)
										Label10:
											// line 2883: subparsers = parser.add_subparsers()
											πF.SetLineno(2883)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_subparsers, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
												continue
											}
											µsubparsers = πTemp002
											if πE = πg.CheckLocal(πF, µsubparsers_sigs, "subparsers_sigs"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Iter(πF, µsubparsers_sigs); πE != nil {
												continue
											}
											πF.PushCheckpoint(13)
											πTemp007 = false
										Label12:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp007 {
												πF.PopCheckpoint()
												goto Label14
											}
											if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp008 = !isStop
											} else {
												πTemp008 = true
												µsubparser_sig = πTemp002
											}
											if πE != nil || !πTemp008 {
												continue
											}
											πF.PushCheckpoint(12)            
											// line 2885: subparsers.add_parser(*subparser_sig.args,
											πF.SetLineno(2885)
											if πE = πg.CheckLocal(πF, µsubparser_sig, "subparser_sig"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µsubparser_sig, ßargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µsubparser_sig, "subparser_sig"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µsubparser_sig, ßkwargs, nil); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µsubparsers, "subparsers"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µsubparsers, ßadd_parser, nil); πE != nil {
												continue
											}
											if πTemp009, πE = πg.Invoke(πF, πTemp004, nil, πTemp002, nil, πTemp003); πE != nil {
												continue
											}
											continue
										Label13:
											if πE != nil || πR != nil {
												continue
											}
										Label14:
											goto Label11
										Label11:
											// line 2887: return parser
											πF.SetLineno(2887)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											πR = µparser
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß_get_parser.ToObject(), πTemp003); πE != nil {
										continue
									}
									// line 2889: def _test(self, tester, parser_text):
									πF.SetLineno(2889)
									πTemp002 = make([]πg.Param, 3)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp002[2] = πg.Param{Name: "parser_text", Def: nil}
									πTemp004 = πg.NewFunction(πg.NewCode("_test", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µparser_text *πg.Object = πArgs[2]; _ = µparser_text
										var µexpected_text *πg.Object = πg.UnboundLocal; _ = µexpected_text
										var µchar1 *πg.Object = πg.UnboundLocal; _ = µchar1
										var µchar2 *πg.Object = πg.UnboundLocal; _ = µchar2
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 []*πg.Object
										_ = πTemp005
										var πTemp006 *πg.Object
										_ = πTemp006
										var πTemp007 bool
										_ = πTemp007
										var πTemp008 *πg.Object
										_ = πTemp008
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											case 3: goto Label3
											case 4: goto Label4
											default: panic("unexpected function state")
											}
											// line 2890: expected_text = getattr(tester, self.func_suffix)
											πF.SetLineno(2890)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßfunc_suffix, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µexpected_text = πTemp003
											// line 2891: expected_text = textwrap.dedent(expected_text)
											πF.SetLineno(2891)
											πTemp001 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µexpected_text, "expected_text"); πE != nil {
												continue
											}
											πTemp001[0] = µexpected_text
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdedent, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µexpected_text = πTemp002
											if πE = πg.CheckLocal(πF, µexpected_text, "expected_text"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µparser_text, "parser_text"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.NE(πF, µexpected_text, µparser_text); πE != nil {
												continue
											}
											if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
												continue
											}
											if πTemp004 {
												goto Label1
											}
											goto Label2
											// line 2892: if expected_text != parser_text:
											πF.SetLineno(2892)
										Label1:
											// line 2893: print(repr(expected_text))
											πF.SetLineno(2893)
											πTemp001 = make([]*πg.Object, 1)
											πTemp005 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µexpected_text, "expected_text"); πE != nil {
												continue
											}
											πTemp005[0] = µexpected_text
											if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp005)
											πTemp001[0] = πTemp003
											if πE = πg.Print(πF, πTemp001, true); πE != nil {
												continue
											}
											// line 2894: print(repr(parser_text))
											πF.SetLineno(2894)
											πTemp001 = make([]*πg.Object, 1)
											πTemp005 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µparser_text, "parser_text"); πE != nil {
												continue
											}
											πTemp005[0] = µparser_text
											if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp005)
											πTemp001[0] = πTemp003
											if πE = πg.Print(πF, πTemp001, true); πE != nil {
												continue
											}
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µexpected_text, "expected_text"); πE != nil {
												continue
											}
											πTemp001[0] = µexpected_text
											if πE = πg.CheckLocal(πF, µparser_text, "parser_text"); πE != nil {
												continue
											}
											πTemp001[1] = µparser_text
											if πTemp003, πE = πg.ResolveGlobal(πF, ßzip); πE != nil {
												continue
											}
											if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											if πTemp002, πE = πg.Iter(πF, πTemp006); πE != nil {
												continue
											}
											πF.PushCheckpoint(4)
											πTemp004 = false
										Label3:
											if πE != nil || πR != nil {
												continue
											}
											if πTemp004 {
												πF.PopCheckpoint()
												goto Label5
											}
											if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
												isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
												if exc != nil {
													πE = exc
												} else if isStop {
													πE = nil
													πF.RestoreExc(nil, nil)
												}
												πTemp007 = !isStop
											} else {
												πTemp007 = true
												if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp008}}}, πTemp003); πE != nil {
													continue
												}
												µchar1 = πTemp006
												µchar2 = πTemp008
											}
											if πE != nil || !πTemp007 {
												continue
											}
											πF.PushCheckpoint(3)            
											if πE = πg.CheckLocal(πF, µchar1, "char1"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µchar2, "char2"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.NE(πF, µchar1, µchar2); πE != nil {
												continue
											}
											if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
												continue
											}
											if πTemp007 {
												goto Label6
											}
											goto Label7
											// line 2896: if char1 != char2:
											πF.SetLineno(2896)
										Label6:
											// line 2897: print('first diff: %r %r' % (char1, char2))
											πF.SetLineno(2897)
											πTemp001 = make([]*πg.Object, 1)
											if πE = πg.CheckLocal(πF, µchar1, "char1"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µchar2, "char2"); πE != nil {
												continue
											}
											πTemp006 = πg.NewTuple2(µchar1, µchar2).ToObject()
											if πTemp003, πE = πg.Mod(πF, πg.NewStr("first diff: %r %r").ToObject(), πTemp006); πE != nil {
												continue
											}
											πTemp001[0] = πTemp003
											if πE = πg.Print(πF, πTemp001, true); πE != nil {
												continue
											}
											// line 2898: break
											πF.SetLineno(2898)
											πTemp004 = true
											continue
											goto Label7
										Label7:
											continue
										Label4:
											if πE != nil || πR != nil {
												continue
											}
										Label5:
											goto Label2
										Label2:
											// line 2899: tester.assertEqual(expected_text, parser_text)
											πF.SetLineno(2899)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µexpected_text, "expected_text"); πE != nil {
												continue
											}
											πTemp001[0] = µexpected_text
											if πE = πg.CheckLocal(πF, µparser_text, "parser_text"); πE != nil {
												continue
											}
											πTemp001[1] = µparser_text
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µtester, ßassertEqual, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß_test.ToObject(), πTemp004); πE != nil {
										continue
									}
									// line 2901: def test_format(self, tester):
									πF.SetLineno(2901)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp005 = πg.NewFunction(πg.NewCode("test_format", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µparser *πg.Object = πg.UnboundLocal; _ = µparser
										var µformat *πg.Object = πg.UnboundLocal; _ = µformat
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2902: parser = self._get_parser(tester)
											πF.SetLineno(2902)
											πTemp001 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µparser = πTemp003
											// line 2903: format = getattr(parser, 'format_%s' % self.func_suffix)
											πF.SetLineno(2903)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											πTemp001[0] = µparser
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßfunc_suffix, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Mod(πF, πg.NewStr("format_%s").ToObject(), πTemp003); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µformat = πTemp003
											// line 2904: self._test(tester, format())
											πF.SetLineno(2904)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
												continue
											}
											if πTemp002, πE = µformat.Call(πF, nil, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_test, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtest_format.ToObject(), πTemp005); πE != nil {
										continue
									}
									// line 2906: def test_print(self, tester):
									πF.SetLineno(2906)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp006 = πg.NewFunction(πg.NewCode("test_print", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µparser *πg.Object = πg.UnboundLocal; _ = µparser
										var µprint_ *πg.Object = πg.UnboundLocal; _ = µprint_
										var µold_stream *πg.Object = πg.UnboundLocal; _ = µold_stream
										var µparser_text *πg.Object = πg.UnboundLocal; _ = µparser_text
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 *πg.BaseException
										_ = πTemp004
										var πTemp005 *πg.Traceback
										_ = πTemp005
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											case 1: goto Label1
											default: panic("unexpected function state")
											}
											// line 2907: parser = self._get_parser(tester)
											πF.SetLineno(2907)
											πTemp001 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µparser = πTemp003
											// line 2908: print_ = getattr(parser, 'print_%s' % self.func_suffix)
											πF.SetLineno(2908)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											πTemp001[0] = µparser
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßfunc_suffix, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Mod(πF, πg.NewStr("print_%s").ToObject(), πTemp003); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µprint_ = πTemp003
											// line 2909: old_stream = getattr(sys, self.std_name)
											πF.SetLineno(2909)
											πTemp001 = πF.MakeArgs(2)
											if πTemp002, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
												continue
											}
											πTemp001[0] = πTemp002
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßstd_name, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µold_stream = πTemp003
											// line 2910: setattr(sys, self.std_name, StdIOBuffer())
											πF.SetLineno(2910)
											πTemp001 = πF.MakeArgs(3)
											if πTemp002, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
												continue
											}
											πTemp001[0] = πTemp002
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßstd_name, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
												continue
											}
											πTemp001[2] = πTemp003
											if πTemp002, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											// line 2911: try:
											πF.SetLineno(2911)
											πF.PushCheckpoint(1)
											// line 2912: print_()
											πF.SetLineno(2912)
											if πE = πg.CheckLocal(πF, µprint_, "print_"); πE != nil {
												continue
											}
											if πTemp002, πE = µprint_.Call(πF, nil, nil); πE != nil {
												continue
											}
											// line 2913: parser_text = getattr(sys, self.std_name).getvalue()
											πF.SetLineno(2913)
											πTemp001 = πF.MakeArgs(2)
											if πTemp002, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
												continue
											}
											πTemp001[0] = πTemp002
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßstd_name, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßgetvalue, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
												continue
											}
											µparser_text = πTemp003
											πF.PopCheckpoint()
											goto Label1
										Label1:
											πTemp004, πTemp005 = πF.RestoreExc(nil, nil)
											// line 2915: setattr(sys, self.std_name, old_stream)
											πF.SetLineno(2915)
											πTemp001 = πF.MakeArgs(3)
											if πTemp002, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
												continue
											}
											πTemp001[0] = πTemp002
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßstd_name, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πE = πg.CheckLocal(πF, µold_stream, "old_stream"); πE != nil {
												continue
											}
											πTemp001[2] = µold_stream
											if πTemp002, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											if πTemp004 != nil {
												πE = πF.Raise(πTemp004.ToObject(), nil, πTemp005.ToObject())
												continue
											}
											if πR != nil {
												continue
											}
											// line 2916: self._test(tester, parser_text)
											πF.SetLineno(2916)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µparser_text, "parser_text"); πE != nil {
												continue
											}
											πTemp001[1] = µparser_text
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_test, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtest_print.ToObject(), πTemp006); πE != nil {
										continue
									}
									// line 2918: def test_print_file(self, tester):
									πF.SetLineno(2918)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "tester", Def: nil}
									πTemp007 = πg.NewFunction(πg.NewCode("test_print_file", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µtester *πg.Object = πArgs[1]; _ = µtester
										var µparser *πg.Object = πg.UnboundLocal; _ = µparser
										var µprint_ *πg.Object = πg.UnboundLocal; _ = µprint_
										var µsfile *πg.Object = πg.UnboundLocal; _ = µsfile
										var µparser_text *πg.Object = πg.UnboundLocal; _ = µparser_text
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2919: parser = self._get_parser(tester)
											πF.SetLineno(2919)
											πTemp001 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_parser, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µparser = πTemp003
											// line 2920: print_ = getattr(parser, 'print_%s' % self.func_suffix)
											πF.SetLineno(2920)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
												continue
											}
											πTemp001[0] = µparser
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßfunc_suffix, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Mod(πF, πg.NewStr("print_%s").ToObject(), πTemp003); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											µprint_ = πTemp003
											// line 2921: sfile = StdIOBuffer()
											πF.SetLineno(2921)
											if πTemp002, πE = πg.ResolveGlobal(πF, ßStdIOBuffer); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
												continue
											}
											µsfile = πTemp003
											// line 2922: print_(sfile)
											πF.SetLineno(2922)
											πTemp001 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µsfile, "sfile"); πE != nil {
												continue
											}
											πTemp001[0] = µsfile
											if πE = πg.CheckLocal(πF, µprint_, "print_"); πE != nil {
												continue
											}
											if πTemp002, πE = µprint_.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											// line 2923: parser_text = sfile.getvalue()
											πF.SetLineno(2923)
											if πE = πg.CheckLocal(πF, µsfile, "sfile"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µsfile, ßgetvalue, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
												continue
											}
											µparser_text = πTemp003
											// line 2924: self._test(tester, parser_text)
											πF.SetLineno(2924)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µtester, "tester"); πE != nil {
												continue
											}
											πTemp001[0] = µtester
											if πE = πg.CheckLocal(πF, µparser_text, "parser_text"); πE != nil {
												continue
											}
											πTemp001[1] = µparser_text
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ß_test, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtest_print_file.ToObject(), πTemp007); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp005 == nil {
								πTemp005 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("AddTests").ToObject(), πg.NewTuple(πTemp004...).ToObject(), πTemp003.ToObject()}, nil); πE != nil {
								continue
							}
							µAddTests = πTemp006
							πTemp004 = make([]*πg.Object, 3)
							πTemp005 = πg.NewTuple2(ßusage.ToObject(), ßstdout.ToObject()).ToObject()
							πTemp004[0] = πTemp005
							πTemp005 = πg.NewTuple2(ßhelp.ToObject(), ßstdout.ToObject()).ToObject()
							πTemp004[1] = πTemp005
							πTemp005 = πg.NewTuple2(ßversion.ToObject(), ßstderr.ToObject()).ToObject()
							πTemp004[2] = πTemp005
							πTemp005 = πg.NewList(πTemp004...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp002 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp005, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp008}}}, πTemp005); πE != nil {
									continue
								}
								µfunc_suffix = πTemp006
								µstd_name = πTemp008
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(3)            
							// line 2930: AddTests(cls, func_suffix, std_name)
							πF.SetLineno(2930)
							πTemp004 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							πTemp004[0] = µcls
							if πE = πg.CheckLocal(πF, µfunc_suffix, "func_suffix"); πE != nil {
								continue
							}
							πTemp004[1] = µfunc_suffix
							if πE = πg.CheckLocal(πF, µstd_name, "std_name"); πE != nil {
								continue
							}
							πTemp004[2] = µstd_name
							if πE = πg.CheckLocal(πF, µAddTests, "AddTests"); πE != nil {
								continue
							}
							if πTemp005, πE = µAddTests.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpFormattingMetaclass").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpFormattingMetaclass.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2932: bases = TestCase,
			πF.SetLineno(2932)
			if πTemp003, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßbases.ToObject(), πTemp003); πE != nil {
				continue
			}
			// line 2933: HelpTestCase = TestHelpFormattingMetaclass('HelpTestCase', bases, {})
			πF.SetLineno(2933)
			πTemp002 = πF.MakeArgs(3)
			πTemp002[0] = ßHelpTestCase.ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßbases); πE != nil {
				continue
			}
			πTemp002[1] = πTemp003
			πTemp004 = πg.NewDict()
			πTemp003 = πTemp004.ToObject()
			πTemp002[2] = πTemp003
			if πTemp003, πE = πg.ResolveGlobal(πF, ßTestHelpFormattingMetaclass); πE != nil {
				continue
			}
			if πTemp005, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßHelpTestCase.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 2936: class TestHelpBiggerOptionals(HelpTestCase):
			πF.SetLineno(2936)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpBiggerOptionals", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2937: """Make sure that argument help aligns when options are longer"""
					πF.SetLineno(2937)
					// line 2939: parser_signature = Sig(prog='PROG', description='DESCRIPTION',
					πF.SetLineno(2939)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"description", ßDESCRIPTION.ToObject()},
						{"epilog", ßEPILOG.ToObject()},
						{"version", πg.NewStr("0.1").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2941: argument_signatures = [
					πF.SetLineno(2941)
					πTemp004 = make([]*πg.Object, 4)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp001 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"help", πg.NewStr("X HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--y").ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("Y HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßfoo.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("FOO HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßbar.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("BAR HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 2947: argument_group_signatures = []
					πF.SetLineno(2947)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 2948: usage = '''\
					πF.SetLineno(2948)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-v] [-x] [--y Y] foo bar\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2951: help = usage + '''\
					πF.SetLineno(2951)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        DESCRIPTION\n\n        positional arguments:\n          foo            FOO HELP\n          bar            BAR HELP\n\n        optional arguments:\n          -h, --help     show this help message and exit\n          -v, --version  show program's version number and exit\n          -x             X HELP\n          --y Y          Y HELP\n\n        EPILOG\n    ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 2967: version = '''\
					πF.SetLineno(2967)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), πg.NewStr("        0.1\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpBiggerOptionals").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpBiggerOptionals.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 2971: class TestShortColumns(HelpTestCase):
			πF.SetLineno(2971)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestShortColumns", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2972: '''Test extremely small number of columns.
					πF.SetLineno(2972)
					// line 2977: def setUp(self):
					πF.SetLineno(2977)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("setUp", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µenv *πg.Object = πg.UnboundLocal; _ = µenv
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2978: env = test_support.EnvironmentVarGuard()
							πF.SetLineno(2978)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtest_support); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßEnvironmentVarGuard, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µenv = πTemp001
							// line 2979: env.set("COLUMNS", '15')
							πF.SetLineno(2979)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßCOLUMNS.ToObject()
							πTemp003[1] = ß15.ToObject()
							if πE = πg.CheckLocal(πF, µenv, "env"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µenv, ßset, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2980: self.addCleanup(env.__exit__)
							πF.SetLineno(2980)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µenv, "env"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µenv, ß__exit__, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßaddCleanup, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsetUp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2982: parser_signature            = TestHelpBiggerOptionals.parser_signature
					πF.SetLineno(2982)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTestHelpBiggerOptionals); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßparser_signature, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2983: argument_signatures         = TestHelpBiggerOptionals.argument_signatures
					πF.SetLineno(2983)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTestHelpBiggerOptionals); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßargument_signatures, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2984: argument_group_signatures   = TestHelpBiggerOptionals.argument_group_signatures
					πF.SetLineno(2984)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTestHelpBiggerOptionals); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßargument_group_signatures, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2985: usage = '''\
					πF.SetLineno(2985)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG\n               [-h]\n               [-v]\n               [-x]\n               [--y Y]\n               foo\n               bar\n        ").ToObject()); πE != nil {
						continue
					}
					// line 2994: help = usage + '''\
					πF.SetLineno(2994)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp003, πE = πg.Add(πF, πTemp004, πg.NewStr("\n        DESCRIPTION\n\n        positional arguments:\n          foo\n            FOO HELP\n          bar\n            BAR HELP\n\n        optional arguments:\n          -h, --help\n            show this\n            help\n            message and\n            exit\n          -v, --version\n            show\n            program's\n            version\n            number and\n            exit\n          -x\n            X HELP\n          --y Y\n            Y HELP\n\n        EPILOG\n    ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3023: version                     = TestHelpBiggerOptionals.version
					πF.SetLineno(3023)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTestHelpBiggerOptionals); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßversion, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßversion.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestShortColumns").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestShortColumns.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3026: class TestHelpBiggerOptionalGroups(HelpTestCase):
			πF.SetLineno(3026)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpBiggerOptionalGroups", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3027: """Make sure that argument help aligns when options are longer"""
					πF.SetLineno(3027)
					// line 3029: parser_signature = Sig(prog='PROG', description='DESCRIPTION',
					πF.SetLineno(3029)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"description", ßDESCRIPTION.ToObject()},
						{"epilog", ßEPILOG.ToObject()},
						{"version", πg.NewStr("0.1").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3031: argument_signatures = [
					πF.SetLineno(3031)
					πTemp004 = make([]*πg.Object, 4)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp001 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"help", πg.NewStr("X HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--y").ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("Y HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßfoo.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("FOO HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßbar.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("BAR HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3037: argument_group_signatures = [
					πF.SetLineno(3037)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("GROUP TITLE").ToObject()
					πTemp001 = πg.KWArgs{
						{"description", πg.NewStr("GROUP DESCRIPTION").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 2)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßbaz.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("BAZ HELP").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-z").ToObject()
					πTemp001 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
						{"help", πg.NewStr("Z HELP").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[1] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp002 = πg.NewTuple2(πTemp006, πTemp003).ToObject()
					πTemp004[0] = πTemp002
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3042: usage = '''\
					πF.SetLineno(3042)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-v] [-x] [--y Y] [-z Z [Z ...]] foo bar baz\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3045: help = usage + '''\
					πF.SetLineno(3045)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        DESCRIPTION\n\n        positional arguments:\n          foo            FOO HELP\n          bar            BAR HELP\n\n        optional arguments:\n          -h, --help     show this help message and exit\n          -v, --version  show program's version number and exit\n          -x             X HELP\n          --y Y          Y HELP\n\n        GROUP TITLE:\n          GROUP DESCRIPTION\n\n          baz            BAZ HELP\n          -z Z [Z ...]   Z HELP\n\n        EPILOG\n    ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3067: version = '''\
					πF.SetLineno(3067)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), πg.NewStr("        0.1\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpBiggerOptionalGroups").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpBiggerOptionalGroups.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3072: class TestHelpBiggerPositionals(HelpTestCase):
			πF.SetLineno(3072)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpBiggerPositionals", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3073: """Make sure that help aligns when arguments are longer"""
					πF.SetLineno(3073)
					// line 3075: parser_signature = Sig(usage='USAGE', description='DESCRIPTION')
					πF.SetLineno(3075)
					πTemp001 = πg.KWArgs{
						{"usage", ßUSAGE.ToObject()},
						{"description", ßDESCRIPTION.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3076: argument_signatures = [
					πF.SetLineno(3076)
					πTemp004 = make([]*πg.Object, 4)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp001 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"help", πg.NewStr("X HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--y").ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("Y HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßekiekiekifekang.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("EKI HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßbar.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("BAR HELP").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3082: argument_group_signatures = []
					πF.SetLineno(3082)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3083: usage = '''\
					πF.SetLineno(3083)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: USAGE\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3086: help = usage + '''\
					πF.SetLineno(3086)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        DESCRIPTION\n\n        positional arguments:\n          ekiekiekifekang  EKI HELP\n          bar              BAR HELP\n\n        optional arguments:\n          -h, --help       show this help message and exit\n          -x               X HELP\n          --y Y            Y HELP\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3100: version = ''
					πF.SetLineno(3100)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpBiggerPositionals").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpBiggerPositionals.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3103: class TestHelpReformatting(HelpTestCase):
			πF.SetLineno(3103)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpReformatting", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3104: """Make sure that text after short names starts on the first line"""
					πF.SetLineno(3104)
					// line 3106: parser_signature = Sig(
					πF.SetLineno(3106)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"description", πg.NewStr("   oddly    formatted\ndescription\n\nthat is so long that it should go onto multiple lines when wrapped").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3113: argument_signatures = [
					πF.SetLineno(3113)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp001 = πg.KWArgs{
						{"metavar", ßXX.ToObject()},
						{"help", πg.NewStr("oddly\n    formatted -x help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßy.ToObject()
					πTemp001 = πg.KWArgs{
						{"metavar", ßyyy.ToObject()},
						{"help", πg.NewStr("normal y help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3118: argument_group_signatures = [
					πF.SetLineno(3118)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßtitle.ToObject()
					πTemp001 = πg.KWArgs{
						{"description", πg.NewStr("\n    oddly formatted group\n\ndescription").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 1)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-a").ToObject()
					πTemp001 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"help", πg.NewStr(" oddly \nformatted    -a  help  \n    again, so long that it should be wrapped over multiple lines").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp002 = πg.NewTuple2(πTemp006, πTemp003).ToObject()
					πTemp004[0] = πTemp002
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3129: usage = '''\
					πF.SetLineno(3129)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-x XX] [-a] yyy\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3132: help = usage + '''\
					πF.SetLineno(3132)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        oddly formatted description that is so long that it should go onto multiple\n        lines when wrapped\n\n        positional arguments:\n          yyy         normal y help\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          -x XX       oddly formatted -x help\n\n        title:\n          oddly formatted group description\n\n          -a          oddly formatted -a help again, so long that it should be wrapped\n                      over multiple lines\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3152: version = ''
					πF.SetLineno(3152)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpReformatting").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpReformatting.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3155: class TestHelpWrappingShortNames(HelpTestCase):
			πF.SetLineno(3155)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpWrappingShortNames", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3156: """Make sure that text after short names starts on the first line"""
					πF.SetLineno(3156)
					// line 3158: parser_signature = Sig(prog='PROG', description= 'D\nD' * 30)
					πF.SetLineno(3158)
					if πTemp001, πE = πg.Mul(πF, πg.NewStr("D\nD").ToObject(), πg.NewInt(30).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"description", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3159: argument_signatures = [
					πF.SetLineno(3159)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp001, πE = πg.Mul(πF, πg.NewStr("XHH HX").ToObject(), πg.NewInt(20).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"metavar", ßXX.ToObject()},
						{"help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßy.ToObject()
					if πTemp001, πE = πg.Mul(πF, πg.NewStr("YH YH").ToObject(), πg.NewInt(20).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"metavar", ßyyy.ToObject()},
						{"help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3163: argument_group_signatures = [
					πF.SetLineno(3163)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßALPHAS.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 1)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-a").ToObject()
					if πTemp003, πE = πg.Mul(πF, πg.NewStr("AHHH HHA").ToObject(), πg.NewInt(10).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"help", πTemp003},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.NewTuple2(πTemp006, πTemp003).ToObject()
					πTemp004[0] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3167: usage = '''\
					πF.SetLineno(3167)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-x XX] [-a] yyy\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3170: help = usage + '''\
					πF.SetLineno(3170)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        D DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD\n        DD DD DD DD D\n\n        positional arguments:\n          yyy         YH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH\n                      YHYH YHYH YHYH YHYH YHYH YHYH YHYH YH\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          -x XX       XHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH\n                      HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HXXHH HX\n\n        ALPHAS:\n          -a          AHHH HHAAHHH HHAAHHH HHAAHHH HHAAHHH HHAAHHH HHAAHHH HHAAHHH\n                      HHAAHHH HHAAHHH HHA\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3192: version = ''
					πF.SetLineno(3192)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpWrappingShortNames").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpWrappingShortNames.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3195: class TestHelpWrappingLongNames(HelpTestCase):
			πF.SetLineno(3195)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpWrappingLongNames", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3196: """Make sure that text after long names starts on the next line"""
					πF.SetLineno(3196)
					// line 3198: parser_signature = Sig(usage='USAGE', description= 'D D' * 30,
					πF.SetLineno(3198)
					if πTemp001, πE = πg.Mul(πF, πg.NewStr("D D").ToObject(), πg.NewInt(30).ToObject()); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Mul(πF, πg.NewStr("V V").ToObject(), πg.NewInt(30).ToObject()); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"usage", ßUSAGE.ToObject()},
						{"description", πTemp001},
						{"version", πTemp002},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3200: argument_signatures = [
					πF.SetLineno(3200)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp001, πE = πg.Mul(πF, ßX.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Mul(πF, πg.NewStr("XH XH").ToObject(), πg.NewInt(20).ToObject()); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"metavar", πTemp001},
						{"help", πTemp002},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßy.ToObject()
					if πTemp001, πE = πg.Mul(πF, ßy.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Mul(πF, πg.NewStr("YH YH").ToObject(), πg.NewInt(20).ToObject()); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"metavar", πTemp001},
						{"help", πTemp002},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp002
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3204: argument_group_signatures = [
					πF.SetLineno(3204)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßALPHAS.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 2)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-a").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßA.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					if πTemp008, πE = πg.Mul(πF, πg.NewStr("AH AH").ToObject(), πg.NewInt(20).ToObject()); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"metavar", πTemp002},
						{"help", πTemp008},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp002.Call(πF, πTemp007, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßz.ToObject()
					if πTemp002, πE = πg.Mul(πF, ßz.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					if πTemp008, πE = πg.Mul(πF, πg.NewStr("ZH ZH").ToObject(), πg.NewInt(20).ToObject()); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"metavar", πTemp002},
						{"help", πTemp008},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp002.Call(πF, πTemp007, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[1] = πTemp008
					πTemp002 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.NewTuple2(πTemp006, πTemp002).ToObject()
					πTemp004[0] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3209: usage = '''\
					πF.SetLineno(3209)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: USAGE\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3212: help = usage + '''\
					πF.SetLineno(3212)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewStr("\n        D DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD\n        DD DD DD DD D\n\n        positional arguments:\n          yyyyyyyyyyyyyyyyyyyyyyyyy\n                                YH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH\n                                YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YHYH YH\n\n        optional arguments:\n          -h, --help            show this help message and exit\n          -v, --version         show program's version number and exit\n          -x XXXXXXXXXXXXXXXXXXXXXXXXX\n                                XH XHXH XHXH XHXH XHXH XHXH XHXH XHXH XHXH XHXH XHXH\n                                XHXH XHXH XHXH XHXH XHXH XHXH XHXH XHXH XHXH XH\n\n        ALPHAS:\n          -a AAAAAAAAAAAAAAAAAAAAAAAAA\n                                AH AHAH AHAH AHAH AHAH AHAH AHAH AHAH AHAH AHAH AHAH\n                                AHAH AHAH AHAH AHAH AHAH AHAH AHAH AHAH AHAH AH\n          zzzzzzzzzzzzzzzzzzzzzzzzz\n                                ZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH\n                                ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZHZH ZH\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3242: version = '''\
					πF.SetLineno(3242)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), πg.NewStr("        V VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV VV\n        VV VV VV VV V\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpWrappingLongNames").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpWrappingLongNames.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3249: class TestHelpUsage(HelpTestCase):
			πF.SetLineno(3249)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsage", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3250: """Test basic usage messages"""
					πF.SetLineno(3250)
					// line 3252: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3252)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3253: argument_signatures = [
					πF.SetLineno(3253)
					πTemp004 = make([]*πg.Object, 5)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-w").ToObject()
					πTemp001 = πg.KWArgs{
						{"nargs", πg.NewStr("+").ToObject()},
						{"help", ßw.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp001 = πg.KWArgs{
						{"nargs", πg.NewStr("*").ToObject()},
						{"help", ßx.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßa.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßa.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßb.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßb.ToObject()},
						{"nargs", πg.NewInt(2).ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßc.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßc.ToObject()},
						{"nargs", πg.NewStr("?").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[4] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3260: argument_group_signatures = [
					πF.SetLineno(3260)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßgroup.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 4)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-y").ToObject()
					πTemp001 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"help", ßy.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-z").ToObject()
					πTemp001 = πg.KWArgs{
						{"nargs", πg.NewInt(3).ToObject()},
						{"help", ßz.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[1] = πTemp008
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßd.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßd.ToObject()},
						{"nargs", πg.NewStr("*").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[2] = πTemp008
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ße.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ße.ToObject()},
						{"nargs", πg.NewStr("+").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[3] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp002 = πg.NewTuple2(πTemp006, πTemp003).ToObject()
					πTemp004[0] = πTemp002
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3268: usage = '''\
					πF.SetLineno(3268)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-w W [W ...]] [-x [X [X ...]]] [-y [Y]] [-z Z Z Z]\n                    a b b [c] [d [d ...]] e [e ...]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3272: help = usage + '''\
					πF.SetLineno(3272)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          a               a\n          b               b\n          c               c\n\n        optional arguments:\n          -h, --help      show this help message and exit\n          -w W [W ...]    w\n          -x [X [X ...]]  x\n\n        group:\n          -y [Y]          y\n          -z Z Z Z        z\n          d               d\n          e               e\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3290: version = ''
					πF.SetLineno(3290)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsage").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsage.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3293: class TestHelpOnlyUserGroups(HelpTestCase):
			πF.SetLineno(3293)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpOnlyUserGroups", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3294: """Test basic usage messages"""
					πF.SetLineno(3294)
					// line 3296: parser_signature = Sig(prog='PROG', add_help=False)
					πF.SetLineno(3296)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3297: argument_signatures = []
					πF.SetLineno(3297)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3298: argument_group_signatures = [
					πF.SetLineno(3298)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßxxxx.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 2)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-x").ToObject()
					πTemp002 = πg.KWArgs{
						{"help", ßx.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßa.ToObject()
					πTemp002 = πg.KWArgs{
						{"help", ßa.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[1] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.NewTuple2(πTemp006, πTemp003).ToObject()
					πTemp004[0] = πTemp001
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßyyyy.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 2)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßb.ToObject()
					πTemp002 = πg.KWArgs{
						{"help", ßb.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("-y").ToObject()
					πTemp002 = πg.KWArgs{
						{"help", ßy.ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[1] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.NewTuple2(πTemp006, πTemp003).ToObject()
					πTemp004[1] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3308: usage = '''\
					πF.SetLineno(3308)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-x X] [-y Y] a b\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3311: help = usage + '''\
					πF.SetLineno(3311)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        xxxx:\n          -x X  x\n          a     a\n\n        yyyy:\n          b     b\n          -y Y  y\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3321: version = ''
					πF.SetLineno(3321)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpOnlyUserGroups").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpOnlyUserGroups.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3324: class TestHelpUsageLongProg(HelpTestCase):
			πF.SetLineno(3324)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsageLongProg", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3325: """Test usage messages where the prog is long"""
					πF.SetLineno(3325)
					// line 3327: parser_signature = Sig(prog='P' * 60)
					πF.SetLineno(3327)
					if πTemp001, πE = πg.Mul(πF, ßP.ToObject(), πg.NewInt(60).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3328: argument_signatures = [
					πF.SetLineno(3328)
					πTemp004 = make([]*πg.Object, 4)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-w").ToObject()
					πTemp002 = πg.KWArgs{
						{"metavar", ßW.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp002 = πg.KWArgs{
						{"metavar", ßX.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßa.ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßb.ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3334: argument_group_signatures = []
					πF.SetLineno(3334)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3335: usage = '''\
					πF.SetLineno(3335)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n               [-h] [-w W] [-x X] a b\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3339: help = usage + '''\
					πF.SetLineno(3339)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          a\n          b\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          -w W\n          -x X\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3350: version = ''
					πF.SetLineno(3350)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsageLongProg").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsageLongProg.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3353: class TestHelpUsageLongProgOptionsWrap(HelpTestCase):
			πF.SetLineno(3353)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsageLongProgOptionsWrap", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3354: """Test usage messages where the prog is long and the optionals wrap"""
					πF.SetLineno(3354)
					// line 3356: parser_signature = Sig(prog='P' * 60)
					πF.SetLineno(3356)
					if πTemp001, πE = πg.Mul(πF, ßP.ToObject(), πg.NewInt(60).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3357: argument_signatures = [
					πF.SetLineno(3357)
					πTemp004 = make([]*πg.Object, 6)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-w").ToObject()
					if πTemp001, πE = πg.Mul(πF, ßW.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"metavar", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp001, πE = πg.Mul(πF, ßX.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"metavar", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-y").ToObject()
					if πTemp001, πE = πg.Mul(πF, ßY.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"metavar", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-z").ToObject()
					if πTemp001, πE = πg.Mul(πF, ßZ.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"metavar", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßa.ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[4] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßb.ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[5] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3365: argument_group_signatures = []
					πF.SetLineno(3365)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3366: usage = '''\
					πF.SetLineno(3366)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n               [-h] [-w WWWWWWWWWWWWWWWWWWWWWWWWW] [-x XXXXXXXXXXXXXXXXXXXXXXXXX]\n               [-y YYYYYYYYYYYYYYYYYYYYYYYYY] [-z ZZZZZZZZZZZZZZZZZZZZZZZZZ]\n               a b\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3373: help = usage + '''\
					πF.SetLineno(3373)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          a\n          b\n\n        optional arguments:\n          -h, --help            show this help message and exit\n          -w WWWWWWWWWWWWWWWWWWWWWWWWW\n          -x XXXXXXXXXXXXXXXXXXXXXXXXX\n          -y YYYYYYYYYYYYYYYYYYYYYYYYY\n          -z ZZZZZZZZZZZZZZZZZZZZZZZZZ\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3386: version = ''
					πF.SetLineno(3386)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsageLongProgOptionsWrap").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsageLongProgOptionsWrap.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3389: class TestHelpUsageLongProgPositionalsWrap(HelpTestCase):
			πF.SetLineno(3389)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsageLongProgPositionalsWrap", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3390: """Test usage messages where the prog is long and the positionals wrap"""
					πF.SetLineno(3390)
					// line 3392: parser_signature = Sig(prog='P' * 60, add_help=False)
					πF.SetLineno(3392)
					if πTemp001, πE = πg.Mul(πF, ßP.ToObject(), πg.NewInt(60).ToObject()); πE != nil {
						continue
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"prog", πTemp001},
						{"add_help", πTemp002},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3393: argument_signatures = [
					πF.SetLineno(3393)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.Mul(πF, ßa.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.Mul(πF, ßb.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.Mul(πF, ßc.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp002
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3398: argument_group_signatures = []
					πF.SetLineno(3398)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3399: usage = '''\
					πF.SetLineno(3399)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n               aaaaaaaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbb\n               ccccccccccccccccccccccccc\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3404: help = usage + '''\
					πF.SetLineno(3404)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewStr("\n        positional arguments:\n          aaaaaaaaaaaaaaaaaaaaaaaaa\n          bbbbbbbbbbbbbbbbbbbbbbbbb\n          ccccccccccccccccccccccccc\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3411: version = ''
					πF.SetLineno(3411)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsageLongProgPositionalsWrap").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsageLongProgPositionalsWrap.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3414: class TestHelpUsageOptionalsWrap(HelpTestCase):
			πF.SetLineno(3414)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsageOptionalsWrap", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3415: """Test usage messages where the optionals wrap"""
					πF.SetLineno(3415)
					// line 3417: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3417)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3418: argument_signatures = [
					πF.SetLineno(3418)
					πTemp004 = make([]*πg.Object, 7)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-w").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßW.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßX.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-y").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßY.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-z").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßZ.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßa.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[4] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßb.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[5] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßc.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[6] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3427: argument_group_signatures = []
					πF.SetLineno(3427)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3428: usage = '''\
					πF.SetLineno(3428)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-w WWWWWWWWWWWWWWWWWWWWWWWWW] [-x XXXXXXXXXXXXXXXXXXXXXXXXX]\n                    [-y YYYYYYYYYYYYYYYYYYYYYYYYY] [-z ZZZZZZZZZZZZZZZZZZZZZZZZZ]\n                    a b c\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3435: help = usage + '''\
					πF.SetLineno(3435)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          a\n          b\n          c\n\n        optional arguments:\n          -h, --help            show this help message and exit\n          -w WWWWWWWWWWWWWWWWWWWWWWWWW\n          -x XXXXXXXXXXXXXXXXXXXXXXXXX\n          -y YYYYYYYYYYYYYYYYYYYYYYYYY\n          -z ZZZZZZZZZZZZZZZZZZZZZZZZZ\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3449: version = ''
					πF.SetLineno(3449)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsageOptionalsWrap").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsageOptionalsWrap.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3452: class TestHelpUsagePositionalsWrap(HelpTestCase):
			πF.SetLineno(3452)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsagePositionalsWrap", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3453: """Test usage messages where the positionals wrap"""
					πF.SetLineno(3453)
					// line 3455: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3455)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3456: argument_signatures = [
					πF.SetLineno(3456)
					πTemp004 = make([]*πg.Object, 6)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-y").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-z").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp002, πE = πg.Mul(πF, ßa.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp002
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp002, πE = πg.Mul(πF, ßb.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp002
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[4] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp002, πE = πg.Mul(πF, ßc.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp002
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[5] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3464: argument_group_signatures = []
					πF.SetLineno(3464)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3465: usage = '''\
					πF.SetLineno(3465)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-x X] [-y Y] [-z Z]\n                    aaaaaaaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbb\n                    ccccccccccccccccccccccccc\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3470: help = usage + '''\
					πF.SetLineno(3470)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          aaaaaaaaaaaaaaaaaaaaaaaaa\n          bbbbbbbbbbbbbbbbbbbbbbbbb\n          ccccccccccccccccccccccccc\n\n        optional arguments:\n          -h, --help            show this help message and exit\n          -x X\n          -y Y\n          -z Z\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3483: version = ''
					πF.SetLineno(3483)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsagePositionalsWrap").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsagePositionalsWrap.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3486: class TestHelpUsageOptionalsPositionalsWrap(HelpTestCase):
			πF.SetLineno(3486)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsageOptionalsPositionalsWrap", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3487: """Test usage messages where the optionals and positionals wrap"""
					πF.SetLineno(3487)
					// line 3489: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3489)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3490: argument_signatures = [
					πF.SetLineno(3490)
					πTemp004 = make([]*πg.Object, 6)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßX.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-y").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßY.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-z").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßZ.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp002, πE = πg.Mul(πF, ßa.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp002
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp002, πE = πg.Mul(πF, ßb.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp002
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[4] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp002, πE = πg.Mul(πF, ßc.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp002
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[5] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3498: argument_group_signatures = []
					πF.SetLineno(3498)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3499: usage = '''\
					πF.SetLineno(3499)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-x XXXXXXXXXXXXXXXXXXXXXXXXX] [-y YYYYYYYYYYYYYYYYYYYYYYYYY]\n                    [-z ZZZZZZZZZZZZZZZZZZZZZZZZZ]\n                    aaaaaaaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbb\n                    ccccccccccccccccccccccccc\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3506: help = usage + '''\
					πF.SetLineno(3506)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          aaaaaaaaaaaaaaaaaaaaaaaaa\n          bbbbbbbbbbbbbbbbbbbbbbbbb\n          ccccccccccccccccccccccccc\n\n        optional arguments:\n          -h, --help            show this help message and exit\n          -x XXXXXXXXXXXXXXXXXXXXXXXXX\n          -y YYYYYYYYYYYYYYYYYYYYYYYYY\n          -z ZZZZZZZZZZZZZZZZZZZZZZZZZ\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3519: version = ''
					πF.SetLineno(3519)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsageOptionalsPositionalsWrap").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsageOptionalsPositionalsWrap.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3522: class TestHelpUsageOptionalsOnlyWrap(HelpTestCase):
			πF.SetLineno(3522)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsageOptionalsOnlyWrap", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3523: """Test usage messages where there are only optionals and they wrap"""
					πF.SetLineno(3523)
					// line 3525: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3525)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3526: argument_signatures = [
					πF.SetLineno(3526)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßX.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-y").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßY.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-z").ToObject()
					if πTemp002, πE = πg.Mul(πF, ßZ.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3531: argument_group_signatures = []
					πF.SetLineno(3531)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3532: usage = '''\
					πF.SetLineno(3532)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-x XXXXXXXXXXXXXXXXXXXXXXXXX] [-y YYYYYYYYYYYYYYYYYYYYYYYYY]\n                    [-z ZZZZZZZZZZZZZZZZZZZZZZZZZ]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3537: help = usage + '''\
					πF.SetLineno(3537)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        optional arguments:\n          -h, --help            show this help message and exit\n          -x XXXXXXXXXXXXXXXXXXXXXXXXX\n          -y YYYYYYYYYYYYYYYYYYYYYYYYY\n          -z ZZZZZZZZZZZZZZZZZZZZZZZZZ\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3545: version = ''
					πF.SetLineno(3545)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsageOptionalsOnlyWrap").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsageOptionalsOnlyWrap.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3548: class TestHelpUsagePositionalsOnlyWrap(HelpTestCase):
			πF.SetLineno(3548)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpUsagePositionalsOnlyWrap", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3549: """Test usage messages where there are only positionals and they wrap"""
					πF.SetLineno(3549)
					// line 3551: parser_signature = Sig(prog='PROG', add_help=False)
					πF.SetLineno(3551)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3552: argument_signatures = [
					πF.SetLineno(3552)
					πTemp004 = make([]*πg.Object, 3)
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.Mul(πF, ßa.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.Mul(πF, ßb.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.Mul(πF, ßc.ToObject(), πg.NewInt(25).ToObject()); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3557: argument_group_signatures = []
					πF.SetLineno(3557)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3558: usage = '''\
					πF.SetLineno(3558)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG aaaaaaaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbb\n                    ccccccccccccccccccccccccc\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3562: help = usage + '''\
					πF.SetLineno(3562)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          aaaaaaaaaaaaaaaaaaaaaaaaa\n          bbbbbbbbbbbbbbbbbbbbbbbbb\n          ccccccccccccccccccccccccc\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3569: version = ''
					πF.SetLineno(3569)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpUsagePositionalsOnlyWrap").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpUsagePositionalsOnlyWrap.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3572: class TestHelpVariableExpansion(HelpTestCase):
			πF.SetLineno(3572)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpVariableExpansion", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 []*πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3573: """Test that variables are expanded properly in help messages"""
					πF.SetLineno(3573)
					// line 3575: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3575)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3576: argument_signatures = [
					πF.SetLineno(3576)
					πTemp004 = make([]*πg.Object, 6)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"type", πTemp002},
						{"help", πg.NewStr("x %(prog)s %(default)s %(type)s %%").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-y").ToObject()
					πTemp001 = πg.KWArgs{
						{"action", ßstore_const.ToObject()},
						{"default", πg.NewInt(42).ToObject()},
						{"const", ßXXX.ToObject()},
						{"help", πg.NewStr("y %(prog)s %(default)s %(const)s").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp001 = πg.KWArgs{
						{"choices", ßabc.ToObject()},
						{"help", πg.NewStr("foo %(prog)s %(default)s %(choices)s").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--bar").ToObject()
					πTemp006 = make([]*πg.Object, 2)
					πTemp006[0] = πg.NewInt(1).ToObject()
					πTemp006[1] = πg.NewInt(2).ToObject()
					πTemp002 = πg.NewList(πTemp006...).ToObject()
					πTemp001 = πg.KWArgs{
						{"default", ßbaz.ToObject()},
						{"choices", πTemp002},
						{"metavar", ßBBB.ToObject()},
						{"help", πg.NewStr("bar %(prog)s %(default)s %(dest)s").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("spam %(prog)s %(default)s").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[4] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßbadger.ToObject()
					πTemp001 = πg.KWArgs{
						{"default", πg.NewFloat(0.5).ToObject()},
						{"help", πg.NewStr("badger %(prog)s %(default)s").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[5] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3588: argument_group_signatures = [
					πF.SetLineno(3588)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßgroup.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 2)
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = πg.NewStr("-a").ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("a %(prog)s %(default)s").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp006, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp005[0] = πTemp008
					πTemp006 = πF.MakeArgs(1)
					πTemp006[0] = πg.NewStr("-b").ToObject()
					if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"default", πTemp003},
						{"help", πg.NewStr("b %(prog)s %(default)s").ToObject()},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp006, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					πTemp005[1] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp002 = πg.NewTuple2(πTemp007, πTemp003).ToObject()
					πTemp004[0] = πTemp002
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3594: usage = ('''\
					πF.SetLineno(3594)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-x X] [-y] [--foo {a,b,c}] [--bar BBB] [-a A] [-b B]\n                    spam badger\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3598: help = usage + '''\
					πF.SetLineno(3598)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          spam           spam PROG None\n          badger         badger PROG 0.5\n\n        optional arguments:\n          -h, --help     show this help message and exit\n          -x X           x PROG None int %\n          -y             y PROG 42 XXX\n          --foo {a,b,c}  foo PROG None a, b, c\n          --bar BBB      bar PROG baz bar\n\n        group:\n          -a A           a PROG None\n          -b B           b PROG -1\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3615: version = ''
					πF.SetLineno(3615)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpVariableExpansion").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpVariableExpansion.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3618: class TestHelpVariableExpansionUsageSupplied(HelpTestCase):
			πF.SetLineno(3618)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpVariableExpansionUsageSupplied", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3619: """Test that variables are expanded properly when usage= is present"""
					πF.SetLineno(3619)
					// line 3621: parser_signature = Sig(prog='PROG', usage='%(prog)s FOO')
					πF.SetLineno(3621)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"usage", πg.NewStr("%(prog)s FOO").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3622: argument_signatures = []
					πF.SetLineno(3622)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3623: argument_group_signatures = []
					πF.SetLineno(3623)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3624: usage = ('''\
					πF.SetLineno(3624)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG FOO\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3627: help = usage + '''\
					πF.SetLineno(3627)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        optional arguments:\n          -h, --help  show this help message and exit\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3632: version = ''
					πF.SetLineno(3632)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpVariableExpansionUsageSupplied").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpVariableExpansionUsageSupplied.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3635: class TestHelpVariableExpansionNoArguments(HelpTestCase):
			πF.SetLineno(3635)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpVariableExpansionNoArguments", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3636: """Test that variables are expanded properly with no arguments"""
					πF.SetLineno(3636)
					// line 3638: parser_signature = Sig(prog='PROG', add_help=False)
					πF.SetLineno(3638)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3639: argument_signatures = []
					πF.SetLineno(3639)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3640: argument_group_signatures = []
					πF.SetLineno(3640)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3641: usage = ('''\
					πF.SetLineno(3641)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3644: help = usage
					πF.SetLineno(3644)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3645: version = ''
					πF.SetLineno(3645)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpVariableExpansionNoArguments").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpVariableExpansionNoArguments.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3648: class TestHelpSuppressUsage(HelpTestCase):
			πF.SetLineno(3648)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpSuppressUsage", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3649: """Test that items can be suppressed in usage messages"""
					πF.SetLineno(3649)
					// line 3651: parser_signature = Sig(prog='PROG', usage=argparse.SUPPRESS)
					πF.SetLineno(3651)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"usage", πTemp002},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3652: argument_signatures = [
					πF.SetLineno(3652)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("foo help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp002
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3656: argument_group_signatures = []
					πF.SetLineno(3656)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3657: help = '''\
					πF.SetLineno(3657)
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πg.NewStr("        positional arguments:\n          spam        spam help\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO   foo help\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3665: usage = ''
					πF.SetLineno(3665)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					// line 3666: version = ''
					πF.SetLineno(3666)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpSuppressUsage").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpSuppressUsage.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3669: class TestHelpSuppressOptional(HelpTestCase):
			πF.SetLineno(3669)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpSuppressOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3670: """Test that optional arguments can be suppressed in help messages"""
					πF.SetLineno(3670)
					// line 3672: parser_signature = Sig(prog='PROG', add_help=False)
					πF.SetLineno(3672)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3673: argument_signatures = [
					πF.SetLineno(3673)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"help", πTemp003},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp002 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3677: argument_group_signatures = []
					πF.SetLineno(3677)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3678: usage = '''\
					πF.SetLineno(3678)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG spam\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3681: help = usage + '''\
					πF.SetLineno(3681)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          spam  spam help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3686: version = ''
					πF.SetLineno(3686)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpSuppressOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpSuppressOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3689: class TestHelpSuppressOptionalGroup(HelpTestCase):
			πF.SetLineno(3689)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpSuppressOptionalGroup", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3690: """Test that optional groups can be suppressed in help messages"""
					πF.SetLineno(3690)
					// line 3692: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3692)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3693: argument_signatures = [
					πF.SetLineno(3693)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("foo help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3697: argument_group_signatures = [
					πF.SetLineno(3697)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßgroup.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 1)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("--bar").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp008, πE = πg.GetAttr(πF, πTemp003, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"help", πTemp008},
					}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp003.Call(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp003 = πg.NewList(πTemp005...).ToObject()
					πTemp002 = πg.NewTuple2(πTemp006, πTemp003).ToObject()
					πTemp004[0] = πTemp002
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3700: usage = '''\
					πF.SetLineno(3700)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [--foo FOO] spam\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3703: help = usage + '''\
					πF.SetLineno(3703)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          spam        spam help\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO   foo help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3712: version = ''
					πF.SetLineno(3712)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpSuppressOptionalGroup").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpSuppressOptionalGroup.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3715: class TestHelpSuppressPositional(HelpTestCase):
			πF.SetLineno(3715)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpSuppressPositional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3716: """Test that positional arguments can be suppressed in help messages"""
					πF.SetLineno(3716)
					// line 3718: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3718)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3719: argument_signatures = [
					πF.SetLineno(3719)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("foo help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSUPPRESS, nil); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"help", πTemp003},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3723: argument_group_signatures = []
					πF.SetLineno(3723)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3724: usage = '''\
					πF.SetLineno(3724)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [--foo FOO]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3727: help = usage + '''\
					πF.SetLineno(3727)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO   foo help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3733: version = ''
					πF.SetLineno(3733)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpSuppressPositional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpSuppressPositional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3736: class TestHelpRequiredOptional(HelpTestCase):
			πF.SetLineno(3736)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpRequiredOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3737: """Test that required options don't look optional"""
					πF.SetLineno(3737)
					// line 3739: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3739)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3740: argument_signatures = [
					πF.SetLineno(3740)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp001 = πg.KWArgs{
						{"required", πTemp002},
						{"help", πg.NewStr("foo help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3743: argument_group_signatures = []
					πF.SetLineno(3743)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3744: usage = '''\
					πF.SetLineno(3744)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] --foo FOO\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3747: help = usage + '''\
					πF.SetLineno(3747)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO   foo help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3753: version = ''
					πF.SetLineno(3753)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpRequiredOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpRequiredOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3756: class TestHelpAlternatePrefixChars(HelpTestCase):
			πF.SetLineno(3756)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpAlternatePrefixChars", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3757: """Test that options display with different prefix characters"""
					πF.SetLineno(3757)
					// line 3759: parser_signature = Sig(prog='PROG', prefix_chars='^;', add_help=False)
					πF.SetLineno(3759)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"prefix_chars", πg.NewStr("^;").ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3760: argument_signatures = [
					πF.SetLineno(3760)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("^^foo").ToObject()
					πTemp002 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"help", πg.NewStr("foo help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(2)
					πTemp005[0] = πg.NewStr(";b").ToObject()
					πTemp005[1] = πg.NewStr(";;bar").ToObject()
					πTemp002 = πg.KWArgs{
						{"help", πg.NewStr("bar help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3764: argument_group_signatures = []
					πF.SetLineno(3764)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3765: usage = '''\
					πF.SetLineno(3765)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [^^foo] [;b BAR]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3768: help = usage + '''\
					πF.SetLineno(3768)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        optional arguments:\n          ^^foo              foo help\n          ;b BAR, ;;bar BAR  bar help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3774: version = ''
					πF.SetLineno(3774)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpAlternatePrefixChars").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpAlternatePrefixChars.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3777: class TestHelpNoHelpOptional(HelpTestCase):
			πF.SetLineno(3777)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpNoHelpOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 πg.KWArgs
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3778: """Test that the --help argument can be suppressed help messages"""
					πF.SetLineno(3778)
					// line 3780: parser_signature = Sig(prog='PROG', add_help=False)
					πF.SetLineno(3780)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"add_help", πTemp001},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3781: argument_signatures = [
					πF.SetLineno(3781)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp002 = πg.KWArgs{
						{"help", πg.NewStr("foo help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp002 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp005, πTemp002); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3785: argument_group_signatures = []
					πF.SetLineno(3785)
					πTemp004 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3786: usage = '''\
					πF.SetLineno(3786)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [--foo FOO] spam\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3789: help = usage + '''\
					πF.SetLineno(3789)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          spam       spam help\n\n        optional arguments:\n          --foo FOO  foo help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3797: version = ''
					πF.SetLineno(3797)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpNoHelpOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpNoHelpOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3800: class TestHelpVersionOptional(HelpTestCase):
			πF.SetLineno(3800)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpVersionOptional", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3801: """Test that the --version argument can be suppressed help messages"""
					πF.SetLineno(3801)
					// line 3803: parser_signature = Sig(prog='PROG', version='1.0')
					πF.SetLineno(3803)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"version", πg.NewStr("1.0").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3804: argument_signatures = [
					πF.SetLineno(3804)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("foo help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp001 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3808: argument_group_signatures = []
					πF.SetLineno(3808)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3809: usage = '''\
					πF.SetLineno(3809)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-v] [--foo FOO] spam\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3812: help = usage + '''\
					πF.SetLineno(3812)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          spam           spam help\n\n        optional arguments:\n          -h, --help     show this help message and exit\n          -v, --version  show program's version number and exit\n          --foo FOO      foo help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3822: version = '''\
					πF.SetLineno(3822)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), πg.NewStr("        1.0\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpVersionOptional").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpVersionOptional.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3827: class TestHelpNone(HelpTestCase):
			πF.SetLineno(3827)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpNone", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3828: """Test that no errors occur if no help is specified"""
					πF.SetLineno(3828)
					// line 3830: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3830)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3831: argument_signatures = [
					πF.SetLineno(3831)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3835: argument_group_signatures = []
					πF.SetLineno(3835)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3836: usage = '''\
					πF.SetLineno(3836)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [--foo FOO] spam\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3839: help = usage + '''\
					πF.SetLineno(3839)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        positional arguments:\n          spam\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3848: version = ''
					πF.SetLineno(3848)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpNone").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpNone.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3851: class TestHelpTupleMetavar(HelpTestCase):
			πF.SetLineno(3851)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpTupleMetavar", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3852: """Test specifying metavar as a tuple"""
					πF.SetLineno(3852)
					// line 3854: parser_signature = Sig(prog='PROG')
					πF.SetLineno(3854)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3855: argument_signatures = [
					πF.SetLineno(3855)
					πTemp004 = make([]*πg.Object, 4)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-w").ToObject()
					πTemp002 = πg.NewTuple2(ßW1.ToObject(), ßW2.ToObject()).ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßw.ToObject()},
						{"nargs", πg.NewStr("+").ToObject()},
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-x").ToObject()
					πTemp002 = πg.NewTuple2(ßX1.ToObject(), ßX2.ToObject()).ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßx.ToObject()},
						{"nargs", πg.NewStr("*").ToObject()},
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-y").ToObject()
					πTemp002 = πg.NewTuple3(ßY1.ToObject(), ßY2.ToObject(), ßY3.ToObject()).ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßy.ToObject()},
						{"nargs", πg.NewInt(3).ToObject()},
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp003
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("-z").ToObject()
					πTemp002 = πg.NewTuple1(ßZ1.ToObject()).ToObject()
					πTemp001 = πg.KWArgs{
						{"help", ßz.ToObject()},
						{"nargs", πg.NewStr("?").ToObject()},
						{"metavar", πTemp002},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3861: argument_group_signatures = []
					πF.SetLineno(3861)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3862: usage = '''\
					πF.SetLineno(3862)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-w W1 [W2 ...]] [-x [X1 [X2 ...]]] [-y Y1 Y2 Y3] [-z [Z1]]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3866: help = usage + '''\
					πF.SetLineno(3866)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        optional arguments:\n          -h, --help        show this help message and exit\n          -w W1 [W2 ...]    w\n          -x [X1 [X2 ...]]  x\n          -y Y1 Y2 Y3       y\n          -z [Z1]           z\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3875: version = ''
					πF.SetLineno(3875)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpTupleMetavar").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpTupleMetavar.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3878: class TestHelpRawText(HelpTestCase):
			πF.SetLineno(3878)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpRawText", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3879: """Test the RawTextHelpFormatter"""
					πF.SetLineno(3879)
					// line 3881: parser_signature = Sig(
					πF.SetLineno(3881)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßRawTextHelpFormatter, nil); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"formatter_class", πTemp002},
						{"description", πg.NewStr("Keep the formatting\n    exactly as it is written\n\nhere\n").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3888: argument_signatures = [
					πF.SetLineno(3888)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("    foo help should also\nappear as given here").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp002
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3893: argument_group_signatures = [
					πF.SetLineno(3893)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßtitle.ToObject()
					πTemp003 = πg.KWArgs{
						{"description", πg.NewStr("    This text\n  should be indented\n    exactly like it is here\n").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 1)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("--bar").ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("bar help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp002.Call(πF, πTemp007, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp002 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.NewTuple2(πTemp006, πTemp002).ToObject()
					πTemp004[0] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3899: usage = '''\
					πF.SetLineno(3899)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [--foo FOO] [--bar BAR] spam\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3902: help = usage + '''\
					πF.SetLineno(3902)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewStr("\n        Keep the formatting\n            exactly as it is written\n\n        here\n\n        positional arguments:\n          spam        spam help\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO       foo help should also\n                      appear as given here\n\n        title:\n              This text\n            should be indented\n              exactly like it is here\n\n          --bar BAR   bar help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3924: version = ''
					πF.SetLineno(3924)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpRawText").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpRawText.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3927: class TestHelpRawDescription(HelpTestCase):
			πF.SetLineno(3927)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpRawDescription", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3928: """Test the RawTextHelpFormatter"""
					πF.SetLineno(3928)
					// line 3930: parser_signature = Sig(
					πF.SetLineno(3930)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßRawDescriptionHelpFormatter, nil); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"formatter_class", πTemp002},
						{"description", πg.NewStr("Keep the formatting\n    exactly as it is written\n\nhere\n").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3937: argument_signatures = [
					πF.SetLineno(3937)
					πTemp004 = make([]*πg.Object, 2)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("  foo help should not\n    retain this odd formatting").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp002
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3942: argument_group_signatures = [
					πF.SetLineno(3942)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßtitle.ToObject()
					πTemp003 = πg.KWArgs{
						{"description", πg.NewStr("    This text\n  should be indented\n    exactly like it is here\n").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 1)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("--bar").ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("bar help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp002.Call(πF, πTemp007, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp002 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.NewTuple2(πTemp006, πTemp002).ToObject()
					πTemp004[0] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3948: usage = '''\
					πF.SetLineno(3948)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [--foo FOO] [--bar BAR] spam\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3951: help = usage + '''\
					πF.SetLineno(3951)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewStr("\n        Keep the formatting\n            exactly as it is written\n\n        here\n\n        positional arguments:\n          spam        spam help\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO   foo help should not retain this odd formatting\n\n        title:\n              This text\n            should be indented\n              exactly like it is here\n\n          --bar BAR   bar help\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3972: version = ''
					πF.SetLineno(3972)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpRawDescription").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpRawDescription.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 3975: class TestHelpArgumentDefaults(HelpTestCase):
			πF.SetLineno(3975)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpArgumentDefaults", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 πg.KWArgs
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3976: """Test the ArgumentDefaultsHelpFormatter"""
					πF.SetLineno(3976)
					// line 3978: parser_signature = Sig(
					πF.SetLineno(3978)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßargparse); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentDefaultsHelpFormatter, nil); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"formatter_class", πTemp002},
						{"description", ßdescription.ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3982: argument_signatures = [
					πF.SetLineno(3982)
					πTemp004 = make([]*πg.Object, 4)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--foo").ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("foo help - oh and by the way, %(default)s").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = πg.NewStr("--bar").ToObject()
					πTemp003 = πg.KWArgs{
						{"action", ßstore_true.ToObject()},
						{"help", πg.NewStr("bar help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[1] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßspam.ToObject()
					πTemp003 = πg.KWArgs{
						{"help", πg.NewStr("spam help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[2] = πTemp002
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßbadger.ToObject()
					πTemp003 = πg.KWArgs{
						{"nargs", πg.NewStr("?").ToObject()},
						{"default", ßwooden.ToObject()},
						{"help", πg.NewStr("badger help").ToObject()},
					}
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[3] = πTemp002
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3988: argument_group_signatures = [
					πF.SetLineno(3988)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(1)
					πTemp005[0] = ßtitle.ToObject()
					πTemp003 = πg.KWArgs{
						{"description", ßdescription.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, πTemp005, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp005 = make([]*πg.Object, 1)
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = πg.NewStr("--baz").ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßint); πE != nil {
						continue
					}
					πTemp003 = πg.KWArgs{
						{"type", πTemp002},
						{"default", πg.NewInt(42).ToObject()},
						{"help", πg.NewStr("baz help").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp002.Call(πF, πTemp007, πTemp003); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					πTemp005[0] = πTemp008
					πTemp002 = πg.NewList(πTemp005...).ToObject()
					πTemp001 = πg.NewTuple2(πTemp006, πTemp002).ToObject()
					πTemp004[0] = πTemp001
					πTemp001 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3992: usage = '''\
					πF.SetLineno(3992)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [--foo FOO] [--bar] [--baz BAZ] spam [badger]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 3995: help = usage + '''\
					πF.SetLineno(3995)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewStr("\n        description\n\n        positional arguments:\n          spam        spam help\n          badger      badger help (default: wooden)\n\n        optional arguments:\n          -h, --help  show this help message and exit\n          --foo FOO   foo help - oh and by the way, None\n          --bar       bar help (default: False)\n\n        title:\n          description\n\n          --baz BAZ   baz help (default: 42)\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4013: version = ''
					πF.SetLineno(4013)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpArgumentDefaults").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpArgumentDefaults.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4015: class TestHelpVersionAction(HelpTestCase):
			πF.SetLineno(4015)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpVersionAction", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4016: """Test the default help for the version action"""
					πF.SetLineno(4016)
					// line 4018: parser_signature = Sig(prog='PROG', description='description')
					πF.SetLineno(4018)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"description", ßdescription.ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4019: argument_signatures = [Sig('-V', '--version', action='version', version='3.6')]
					πF.SetLineno(4019)
					πTemp004 = make([]*πg.Object, 1)
					πTemp005 = πF.MakeArgs(2)
					πTemp005[0] = πg.NewStr("-V").ToObject()
					πTemp005[1] = πg.NewStr("--version").ToObject()
					πTemp001 = πg.KWArgs{
						{"action", ßversion.ToObject()},
						{"version", πg.NewStr("3.6").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp001); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp003
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 4020: argument_group_signatures = []
					πF.SetLineno(4020)
					πTemp004 = make([]*πg.Object, 0)
					πTemp002 = πg.NewList(πTemp004...).ToObject()
					if πE = πClass.SetItem(πF, ßargument_group_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 4021: usage = '''\
					πF.SetLineno(4021)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-V]\n        ").ToObject()); πE != nil {
						continue
					}
					// line 4024: help = usage + '''\
					πF.SetLineno(4024)
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n        description\n\n        optional arguments:\n          -h, --help     show this help message and exit\n          -V, --version  show program's version number and exit\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 4032: version = ''
					πF.SetLineno(4032)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpVersionAction").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpVersionAction.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4034: class TestHelpSubparsersOrdering(HelpTestCase):
			πF.SetLineno(4034)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßHelpTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestHelpSubparsersOrdering", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 πg.KWArgs
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []πg.Param
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4035: """Test ordering of subcommands in help matches the code"""
					πF.SetLineno(4035)
					// line 4036: parser_signature = Sig(prog='PROG',
					πF.SetLineno(4036)
					πTemp001 = πg.KWArgs{
						{"prog", ßPROG.ToObject()},
						{"description", πg.NewStr("display some subcommands").ToObject()},
						{"version", πg.NewStr("0.1").ToObject()},
					}
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßSig); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßparser_signature.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4040: subparsers_signatures = [Sig(name=name)
					πF.SetLineno(4040)
					πTemp004 = make([]πg.Param, 0)
					πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "build/src/__python__/test/test_argparse.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µname *πg.Object = πg.UnboundLocal; _ = µname
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
							for ; πF.State() >= 0; πF.PopCheckpoint() {
								switch πF.State() {
								case 0:
								case 1: goto Label1
								case 2: goto Label2
								case 4: goto Label4
								default: panic("unexpected function state")
								}
								πTemp002 = πg.NewTuple5(ßa.ToObject(), ßb.ToObject(), ßc.ToObject(), ßd.ToObject(), ße.ToObject()).ToObject()
								if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
									continue
								}
								πF.PushCheckpoint(2)
								πTemp003 = false
							Label1:
								if πE != nil || πR != nil {
									continue
								}
								if πTemp003 {
									πF.PopCheckpoint()
									goto Label3
								}
								if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
									isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
									if exc != nil {
										πE = exc
									} else if isStop {
										πE = nil
										πF.RestoreExc(nil, nil)
									}
									πTemp004 = !isStop
								} else {
									πTemp004 = true
									µname = πTemp002
								}
								if πE != nil || !πTemp004 {
									continue
								}
								πF.PushCheckpoint(1)            
								// line 4040: subparsers_signatures = [Sig(name=name)
								πF.SetLineno(4040)
								if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
									continue
								}
								πTemp005 = πg.KWArgs{
									{"name", µname},
								}
								if πTemp002, πE = πg.ResolveGlobal(πF, ßSig); πE != nil {
									continue
								}
								if πTemp006, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
									continue
								}
								πF.PushCheckpoint(4)
								return πTemp006, nil
							Label4:
								πTemp002 = πSent
								continue
							Label2:
								if πE != nil || πR != nil {
									continue
								}
							Label3:
							}
							return nil, πE
						}).ToObject(), nil
					}), πF.Globals()).ToObject()
					if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp005}, nil); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßsubparsers_signatures.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 4043: usage = '''\
					πF.SetLineno(4043)
					if πE = πClass.SetItem(πF, ßusage.ToObject(), πg.NewStr("        usage: PROG [-h] [-v] {a,b,c,d,e} ...\n        ").ToObject()); πE != nil {
						continue
					}
					// line 4047: help = usage + '''\
					πF.SetLineno(4047)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßusage); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Add(πF, πTemp005, πg.NewStr("\n        display some subcommands\n\n        positional arguments:\n          {a,b,c,d,e}\n\n        optional arguments:\n          -h, --help     show this help message and exit\n          -v, --version  show program's version number and exit\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhelp.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 4059: version = '''\
					πF.SetLineno(4059)
					if πE = πClass.SetItem(πF, ßversion.ToObject(), πg.NewStr("        0.1\n        ").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestHelpSubparsersOrdering").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestHelpSubparsersOrdering.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4110: class TestInvalidArgumentConstructors(TestCase):
			πF.SetLineno(4110)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestInvalidArgumentConstructors", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4111: """Test a bunch of invalid Argument constructors"""
					πF.SetLineno(4111)
					// line 4113: def assertTypeError(self, *args, **kwargs):
					πF.SetLineno(4113)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("assertTypeError", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4114: parser = argparse.ArgumentParser()
							πF.SetLineno(4114)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4115: self.assertRaises(TypeError, parser.add_argument,
							πF.SetLineno(4115)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Invoke(πF, πTemp001, πTemp003, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertTypeError.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4118: def assertValueError(self, *args, **kwargs):
					πF.SetLineno(4118)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("assertValueError", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πArgs[1]; _ = µargs
						var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4119: parser = argparse.ArgumentParser()
							πF.SetLineno(4119)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4120: self.assertRaises(ValueError, parser.add_argument,
							πF.SetLineno(4120)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Invoke(πF, πTemp001, πTemp003, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertValueError.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4123: def test_invalid_keyword_arguments(self):
					πF.SetLineno(4123)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_invalid_keyword_arguments", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4124: self.assertTypeError('-x', bar=None)
							πF.SetLineno(4124)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-x").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"bar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4125: self.assertTypeError('-y', callback='foo')
							πF.SetLineno(4125)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-y").ToObject()
							πTemp003 = πg.KWArgs{
								{"callback", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4126: self.assertTypeError('-y', callback_args=())
							πF.SetLineno(4126)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-y").ToObject()
							πTemp002 = πg.NewTuple0().ToObject()
							πTemp003 = πg.KWArgs{
								{"callback_args", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4127: self.assertTypeError('-y', callback_kwargs={})
							πF.SetLineno(4127)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-y").ToObject()
							πTemp005 = πg.NewDict()
							πTemp002 = πTemp005.ToObject()
							πTemp003 = πg.KWArgs{
								{"callback_kwargs", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_invalid_keyword_arguments.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 4129: def test_missing_destination(self):
					πF.SetLineno(4129)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_missing_destination", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µaction *πg.Object = πg.UnboundLocal; _ = µaction
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 4130: self.assertTypeError()
							πF.SetLineno(4130)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = make([]*πg.Object, 2)
							πTemp003[0] = ßappend.ToObject()
							πTemp003[1] = ßstore.ToObject()
							πTemp002 = πg.NewList(πTemp003...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µaction = πTemp002
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 4132: self.assertTypeError(action=action)
							πF.SetLineno(4132)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp002.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_missing_destination.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 4134: def test_invalid_option_strings(self):
					πF.SetLineno(4134)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_invalid_option_strings", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4135: self.assertValueError('--')
							πF.SetLineno(4135)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4136: self.assertValueError('---')
							πF.SetLineno(4136)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("---").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_invalid_option_strings.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 4138: def test_invalid_type(self):
					πF.SetLineno(4138)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_invalid_type", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4139: self.assertValueError('--foo', type='int')
							πF.SetLineno(4139)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--foo").ToObject()
							πTemp002 = πg.KWArgs{
								{"type", ßint.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4140: self.assertValueError('--foo', type=(int, float))
							πF.SetLineno(4140)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--foo").ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πTemp004, πTemp005).ToObject()
							πTemp002 = πg.KWArgs{
								{"type", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_invalid_type.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 4142: def test_invalid_action(self):
					πF.SetLineno(4142)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_invalid_action", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µe *πg.Object = πg.UnboundLocal; _ = µe
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µmsg *πg.Object = πg.UnboundLocal; _ = µmsg
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.BaseException
						_ = πTemp005
						var πTemp006 *πg.Traceback
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 4143: self.assertValueError('-x', action='foo')
							πF.SetLineno(4143)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-x").ToObject()
							πTemp002 = πg.KWArgs{
								{"action", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4144: self.assertValueError('foo', action='baz')
							πF.SetLineno(4144)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßfoo.ToObject()
							πTemp002 = πg.KWArgs{
								{"action", ßbaz.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4145: self.assertValueError('--foo', action=('store', 'append'))
							πF.SetLineno(4145)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--foo").ToObject()
							πTemp003 = πg.NewTuple2(ßstore.ToObject(), ßappend.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"action", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4146: parser = argparse.ArgumentParser()
							πF.SetLineno(4146)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4147: try:
							πF.SetLineno(4147)
							πF.PushCheckpoint(2)
							// line 4148: parser.add_argument("--foo", action="store-true")
							πF.SetLineno(4148)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("--foo").ToObject()
							πTemp002 = πg.KWArgs{
								{"action", πg.NewStr("store-true").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
							  continue
							}
							πE = nil
							πTemp005, πTemp006 = πF.ExcInfo()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsInstance(πF, πTemp005.ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							πE = πF.Raise(πTemp005.ToObject(), nil, πTemp006.ToObject())
							continue
							// line 4149: except ValueError:
							πF.SetLineno(4149)
						Label3:
							// line 4150: e = sys.exc_info()[1]
							πF.SetLineno(4150)
							πTemp003 = πg.NewInt(1).ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, πTemp008, ßexc_info, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp009.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp008, πTemp003); πE != nil {
								continue
							}
							µe = πTemp004
							// line 4151: expected = 'unknown action'
							πF.SetLineno(4151)
							µexpected = πg.NewStr("unknown action").ToObject()
							// line 4152: msg = 'expected %r, found %r' % (expected, e)
							πF.SetLineno(4152)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(µexpected, µe).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("expected %r, found %r").ToObject(), πTemp004); πE != nil {
								continue
							}
							µmsg = πTemp003
							// line 4153: self.assertTrue(expected in str(e), msg)
							πF.SetLineno(4153)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp010[0] = µe
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp004.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp007, πE = πg.Contains(πF, πTemp008, µexpected); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp007).ToObject()
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp001[1] = µmsg
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_invalid_action.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 4155: def test_multiple_dest(self):
					πF.SetLineno(4155)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_multiple_dest", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µe *πg.Object = πg.UnboundLocal; _ = µe
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µmsg *πg.Object = πg.UnboundLocal; _ = µmsg
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.BaseException
						_ = πTemp005
						var πTemp006 *πg.Traceback
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 4156: parser = argparse.ArgumentParser()
							πF.SetLineno(4156)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4157: parser.add_argument(dest='foo')
							πF.SetLineno(4157)
							πTemp003 = πg.KWArgs{
								{"dest", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							// line 4158: try:
							πF.SetLineno(4158)
							πF.PushCheckpoint(2)
							// line 4159: parser.add_argument('bar', dest='baz')
							πF.SetLineno(4159)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßbar.ToObject()
							πTemp003 = πg.KWArgs{
								{"dest", ßbaz.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
							  continue
							}
							πE = nil
							πTemp005, πTemp006 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsInstance(πF, πTemp005.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							πE = πF.Raise(πTemp005.ToObject(), nil, πTemp006.ToObject())
							continue
							// line 4160: except ValueError:
							πF.SetLineno(4160)
						Label3:
							// line 4161: e = sys.exc_info()[1]
							πF.SetLineno(4161)
							πTemp001 = πg.NewInt(1).ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, πTemp008, ßexc_info, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp009.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							µe = πTemp002
							// line 4162: expected = 'dest supplied twice for positional argument'
							πF.SetLineno(4162)
							µexpected = πg.NewStr("dest supplied twice for positional argument").ToObject()
							// line 4163: msg = 'expected %r, found %r' % (expected, e)
							πF.SetLineno(4163)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µexpected, µe).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("expected %r, found %r").ToObject(), πTemp002); πE != nil {
								continue
							}
							µmsg = πTemp001
							// line 4164: self.assertTrue(expected in str(e), msg)
							πF.SetLineno(4164)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp010[0] = µe
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp007, πE = πg.Contains(πF, πTemp008, µexpected); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp007).ToObject()
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp004[1] = µmsg
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_multiple_dest.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 4166: def test_no_argument_actions(self):
					πF.SetLineno(4166)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_no_argument_actions", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µaction *πg.Object = πg.UnboundLocal; _ = µaction
						var µattrs *πg.Object = πg.UnboundLocal; _ = µattrs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							πTemp002 = make([]*πg.Object, 5)
							πTemp002[0] = ßstore_const.ToObject()
							πTemp002[1] = ßstore_true.ToObject()
							πTemp002[2] = ßstore_false.ToObject()
							πTemp002[3] = ßappend_const.ToObject()
							πTemp002[4] = ßcount.ToObject()
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µaction = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							πTemp002 = make([]*πg.Object, 3)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"type", πTemp006},
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßdict); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp002[0] = πTemp008
							πTemp007 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßdict); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp002[1] = πTemp008
							πTemp007 = πg.KWArgs{
								{"choices", ßab.ToObject()},
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßdict); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp002[2] = πTemp008
							πTemp006 = πg.NewList(πTemp002...).ToObject()
							if πTemp003, πE = πg.Iter(πF, πTemp006); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp005 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp006, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µattrs = πTemp006
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 4171: self.assertTypeError('-x', action=action, **attrs)
							πF.SetLineno(4171)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.Invoke(πF, πTemp006, πTemp002, nil, πTemp007, µattrs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_no_argument_actions.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 4173: def test_no_argument_no_const_actions(self):
					πF.SetLineno(4173)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_no_argument_no_const_actions", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µaction *πg.Object = πg.UnboundLocal; _ = µaction
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp002 = make([]*πg.Object, 3)
							πTemp002[0] = ßstore_true.ToObject()
							πTemp002[1] = ßstore_false.ToObject()
							πTemp002[2] = ßcount.ToObject()
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µaction = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 4178: self.assertTypeError('-x', const='foo', action=action)
							πF.SetLineno(4178)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"const", ßfoo.ToObject()},
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 4181: self.assertTypeError('-x', nargs='*', action=action)
							πF.SetLineno(4181)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"nargs", πg.NewStr("*").ToObject()},
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_no_argument_no_const_actions.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 4183: def test_more_than_one_argument_actions(self):
					πF.SetLineno(4183)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_more_than_one_argument_actions", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µaction *πg.Object = πg.UnboundLocal; _ = µaction
						var µnargs *πg.Object = πg.UnboundLocal; _ = µnargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							πTemp002 = make([]*πg.Object, 2)
							πTemp002[0] = ßstore.ToObject()
							πTemp002[1] = ßappend.ToObject()
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µaction = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 4187: self.assertValueError('-x', nargs=0, action=action)
							πF.SetLineno(4187)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"nargs", πg.NewInt(0).ToObject()},
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 4188: self.assertValueError('spam', nargs=0, action=action)
							πF.SetLineno(4188)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßspam.ToObject()
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"nargs", πg.NewInt(0).ToObject()},
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp002 = make([]*πg.Object, 3)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewStr("*").ToObject()
							πTemp002[2] = πg.NewStr("+").ToObject()
							πTemp007 = πg.NewList(πTemp002...).ToObject()
							if πTemp003, πE = πg.Iter(πF, πTemp007); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp005 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp007, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µnargs = πTemp007
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 4192: self.assertValueError('-x', const='foo',
							πF.SetLineno(4192)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µnargs, "nargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"const", ßfoo.ToObject()},
								{"nargs", µnargs},
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp007.Call(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 4194: self.assertValueError('spam', const='foo',
							πF.SetLineno(4194)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßspam.ToObject()
							if πE = πg.CheckLocal(πF, µnargs, "nargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"const", ßfoo.ToObject()},
								{"nargs", µnargs},
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßassertValueError, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp007.Call(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_more_than_one_argument_actions.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 4197: def test_required_const_actions(self):
					πF.SetLineno(4197)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_required_const_actions", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µaction *πg.Object = πg.UnboundLocal; _ = µaction
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp002 = make([]*πg.Object, 2)
							πTemp002[0] = ßstore_const.ToObject()
							πTemp002[1] = ßappend_const.ToObject()
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µaction = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 4201: self.assertTypeError('-x', nargs='+', action=action)
							πF.SetLineno(4201)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
								{"action", µaction},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_required_const_actions.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 4203: def test_parsers_action_missing_params(self):
					πF.SetLineno(4203)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_parsers_action_missing_params", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4204: self.assertTypeError('command', action='parsers')
							πF.SetLineno(4204)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßcommand.ToObject()
							πTemp002 = πg.KWArgs{
								{"action", ßparsers.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4205: self.assertTypeError('command', action='parsers', prog='PROG')
							πF.SetLineno(4205)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßcommand.ToObject()
							πTemp002 = πg.KWArgs{
								{"action", ßparsers.ToObject()},
								{"prog", ßPROG.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 4206: self.assertTypeError('command', action='parsers',
							πF.SetLineno(4206)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßcommand.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßArgumentParser, nil); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"action", ßparsers.ToObject()},
								{"parser_class", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_parsers_action_missing_params.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 4209: def test_required_positional(self):
					πF.SetLineno(4209)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_required_positional", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4210: self.assertTypeError('foo', required=True)
							πF.SetLineno(4210)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßfoo.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"required", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTypeError, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_required_positional.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 4212: def test_user_defined_action(self):
					πF.SetLineno(4212)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_user_defined_action", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µSuccess *πg.Object = πg.UnboundLocal; _ = µSuccess
						var µAction *πg.Object = πg.UnboundLocal; _ = µAction
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4214: class Success(Exception):
							πF.SetLineno(4214)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßException); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Success", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 4215: pass
									πF.SetLineno(4215)
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("Success").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µSuccess = πTemp005
							// line 4217: class Action(object):
							πF.SetLineno(4217)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Action", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 4219: def __init__(self,
									πF.SetLineno(4219)
									πTemp002 = make([]πg.Param, 6)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "option_strings", Def: nil}
									πTemp002[2] = πg.Param{Name: "dest", Def: nil}
									πTemp002[3] = πg.Param{Name: "const", Def: nil}
									πTemp002[4] = πg.Param{Name: "default", Def: nil}
									if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
										continue
									}
									πTemp002[5] = πg.Param{Name: "required", Def: πTemp003}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µoption_strings *πg.Object = πArgs[1]; _ = µoption_strings
										var µdest *πg.Object = πArgs[2]; _ = µdest
										var µconst *πg.Object = πArgs[3]; _ = µconst
										var µdefault *πg.Object = πArgs[4]; _ = µdefault
										var µrequired *πg.Object = πArgs[5]; _ = µrequired
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 bool
										_ = πTemp002
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											if πE = πg.CheckLocal(πF, µdest, "dest"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Eq(πF, µdest, ßspam.ToObject()); πE != nil {
												continue
											}
											if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
												continue
											}
											if πTemp002 {
												goto Label1
											}
											goto Label2
											// line 4225: if dest == 'spam':
											πF.SetLineno(4225)
										Label1:
											if πE = πg.CheckLocal(πF, µconst, "const"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
												continue
											}
											πTemp001 = πg.GetBool(µconst == µSuccess).ToObject()
											if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
												continue
											}
											if πTemp002 {
												goto Label3
											}
											goto Label4
											// line 4226: if const is Success:
											πF.SetLineno(4226)
										Label3:
											if πE = πg.CheckLocal(πF, µdefault, "default"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
												continue
											}
											πTemp001 = πg.GetBool(µdefault == µSuccess).ToObject()
											if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
												continue
											}
											if πTemp002 {
												goto Label5
											}
											goto Label6
											// line 4227: if default is Success:
											πF.SetLineno(4227)
										Label5:
											if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
												continue
											}
											if πTemp001, πE = µSuccess.Call(πF, nil, nil); πE != nil {
												continue
											}
											// line 4228: raise Success()
											πF.SetLineno(4228)
											πE = πF.Raise(πTemp001, nil, nil)
											continue
											goto Label6
										Label6:
											goto Label4
										Label4:
											goto Label2
										Label2:
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 4230: def __call__(self, *args, **kwargs):
									πF.SetLineno(4230)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("__call__", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µargs *πg.Object = πArgs[1]; _ = µargs
										var µkwargs *πg.Object = πArgs[2]; _ = µkwargs
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 4231: pass
											πF.SetLineno(4231)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__call__.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("Action").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µAction = πTemp005
							// line 4233: parser = argparse.ArgumentParser()
							πF.SetLineno(4233)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 4234: self.assertRaises(Success, parser.add_argument, '--spam',
							πF.SetLineno(4234)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
								continue
							}
							πTemp003[0] = µSuccess
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							πTemp003[2] = πg.NewStr("--spam").ToObject()
							if πE = πg.CheckLocal(πF, µAction, "Action"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"action", µAction},
								{"default", µSuccess},
								{"const", µSuccess},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4236: self.assertRaises(Success, parser.add_argument, 'spam',
							πF.SetLineno(4236)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
								continue
							}
							πTemp003[0] = µSuccess
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							πTemp003[2] = ßspam.ToObject()
							if πE = πg.CheckLocal(πF, µAction, "Action"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µSuccess, "Success"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"action", µAction},
								{"default", µSuccess},
								{"const", µSuccess},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_user_defined_action.ToObject(), πTemp016); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestInvalidArgumentConstructors").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestInvalidArgumentConstructors.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4243: class TestActionsReturned(TestCase):
			πF.SetLineno(4243)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestActionsReturned", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4245: def test_dest(self):
					πF.SetLineno(4245)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_dest", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µaction *πg.Object = πg.UnboundLocal; _ = µaction
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4246: parser = argparse.ArgumentParser()
							πF.SetLineno(4246)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4247: action = parser.add_argument('--foo')
							πF.SetLineno(4247)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µaction = πTemp002
							// line 4248: self.assertEqual(action.dest, 'foo')
							πF.SetLineno(4248)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßdest, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ßfoo.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4249: action = parser.add_argument('-b', '--bar')
							πF.SetLineno(4249)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewStr("-b").ToObject()
							πTemp003[1] = πg.NewStr("--bar").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µaction = πTemp002
							// line 4250: self.assertEqual(action.dest, 'bar')
							πF.SetLineno(4250)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßdest, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ßbar.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4251: action = parser.add_argument('-x', '-y')
							πF.SetLineno(4251)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewStr("-x").ToObject()
							πTemp003[1] = πg.NewStr("-y").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µaction = πTemp002
							// line 4252: self.assertEqual(action.dest, 'x')
							πF.SetLineno(4252)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßdest, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ßx.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_dest.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4254: def test_misc(self):
					πF.SetLineno(4254)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_misc", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µaction *πg.Object = πg.UnboundLocal; _ = µaction
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4255: parser = argparse.ArgumentParser()
							πF.SetLineno(4255)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4256: action = parser.add_argument('--foo', nargs='?', const=42,
							πF.SetLineno(4256)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--foo").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp004 = make([]*πg.Object, 2)
							πTemp004[0] = πg.NewInt(1).ToObject()
							πTemp004[1] = πg.NewInt(2).ToObject()
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							πTemp005 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"const", πg.NewInt(42).ToObject()},
								{"default", πg.NewInt(84).ToObject()},
								{"type", πTemp001},
								{"choices", πTemp002},
								{"help", ßFOO.ToObject()},
								{"metavar", ßBAR.ToObject()},
								{"dest", ßbaz.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µaction = πTemp002
							// line 4259: self.assertEqual(action.nargs, '?')
							πF.SetLineno(4259)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßnargs, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewStr("?").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4260: self.assertEqual(action.const, 42)
							πF.SetLineno(4260)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßconst, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4261: self.assertEqual(action.default, 84)
							πF.SetLineno(4261)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßdefault, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewInt(84).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4262: self.assertEqual(action.type, int)
							πF.SetLineno(4262)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßtype, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4263: self.assertEqual(action.choices, [1, 2])
							πF.SetLineno(4263)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßchoices, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]*πg.Object, 2)
							πTemp004[0] = πg.NewInt(1).ToObject()
							πTemp004[1] = πg.NewInt(2).ToObject()
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4264: self.assertEqual(action.help, 'FOO')
							πF.SetLineno(4264)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßhelp, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ßFOO.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4265: self.assertEqual(action.metavar, 'BAR')
							πF.SetLineno(4265)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßmetavar, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ßBAR.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4266: self.assertEqual(action.dest, 'baz')
							πF.SetLineno(4266)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaction, "action"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µaction, ßdest, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ßbaz.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_misc.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestActionsReturned").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestActionsReturned.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4273: class TestConflictHandling(TestCase):
			πF.SetLineno(4273)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestConflictHandling", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4275: def test_bad_type(self):
					πF.SetLineno(4275)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_bad_type", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4276: self.assertRaises(ValueError, argparse.ArgumentParser,
							πF.SetLineno(4276)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentParser, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							πTemp004 = πg.KWArgs{
								{"conflict_handler", ßfoo.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bad_type.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4279: def test_conflict_error(self):
					πF.SetLineno(4279)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_conflict_error", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4280: parser = argparse.ArgumentParser()
							πF.SetLineno(4280)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4281: parser.add_argument('-x')
							πF.SetLineno(4281)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4282: self.assertRaises(argparse.ArgumentError,
							πF.SetLineno(4282)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentError, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							πTemp003[2] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4284: parser.add_argument('--spam')
							πF.SetLineno(4284)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--spam").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4285: self.assertRaises(argparse.ArgumentError,
							πF.SetLineno(4285)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentError, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							πTemp003[2] = πg.NewStr("--spam").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_conflict_error.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4288: def test_resolve_error(self):
					πF.SetLineno(4288)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_resolve_error", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µget_parser *πg.Object = πg.UnboundLocal; _ = µget_parser
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4289: get_parser = argparse.ArgumentParser
							πF.SetLineno(4289)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							µget_parser = πTemp002
							// line 4290: parser = get_parser(prog='PROG', conflict_handler='resolve')
							πF.SetLineno(4290)
							πTemp003 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
								{"conflict_handler", ßresolve.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µget_parser, "get_parser"); πE != nil {
								continue
							}
							if πTemp001, πE = µget_parser.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4292: parser.add_argument('-x', help='OLD X')
							πF.SetLineno(4292)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							πTemp003 = πg.KWArgs{
								{"help", πg.NewStr("OLD X").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4293: parser.add_argument('-x', help='NEW X')
							πF.SetLineno(4293)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							πTemp003 = πg.KWArgs{
								{"help", πg.NewStr("NEW X").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4294: self.assertEqual(parser.format_help(), textwrap.dedent('''\
							πF.SetLineno(4294)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("            usage: PROG [-h] [-x X]\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              -x X        NEW X\n            ").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4302: parser.add_argument('--spam', metavar='OLD_SPAM')
							πF.SetLineno(4302)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--spam").ToObject()
							πTemp003 = πg.KWArgs{
								{"metavar", ßOLD_SPAM.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4303: parser.add_argument('--spam', metavar='NEW_SPAM')
							πF.SetLineno(4303)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("--spam").ToObject()
							πTemp003 = πg.KWArgs{
								{"metavar", ßNEW_SPAM.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4304: self.assertEqual(parser.format_help(), textwrap.dedent('''\
							πF.SetLineno(4304)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("            usage: PROG [-h] [-x X] [--spam NEW_SPAM]\n\n            optional arguments:\n              -h, --help       show this help message and exit\n              -x X             NEW X\n              --spam NEW_SPAM\n            ").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtextwrap); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßdedent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_resolve_error.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestConflictHandling").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestConflictHandling.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4318: class TestOptionalsHelpVersionActions(TestCase):
			πF.SetLineno(4318)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestOptionalsHelpVersionActions", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4319: """Test the help and version actions"""
					πF.SetLineno(4319)
					// line 4321: def _get_error(self, func, *args, **kwargs):
					πF.SetLineno(4321)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "func", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("_get_error", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µfunc *πg.Object = πArgs[1]; _ = µfunc
						var µargs *πg.Object = πArgs[2]; _ = µargs
						var µkwargs *πg.Object = πArgs[3]; _ = µkwargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.BaseException
						_ = πTemp004
						var πTemp005 *πg.Traceback
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 4322: try:
							πF.SetLineno(4322)
							πF.PushCheckpoint(2)
							// line 4323: func(*args, **kwargs)
							πF.SetLineno(4323)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µfunc, "func"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Invoke(πF, µfunc, nil, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.PopCheckpoint()
							// line 4327: self.assertRaises(ArgumentParserError, func, *args, **kwargs)
							πF.SetLineno(4327)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µfunc, "func"); πE != nil {
								continue
							}
							πTemp002[1] = µfunc
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µkwargs, "kwargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp001, πTemp002, µargs, nil, µkwargs); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label1
						Label2:
							if πE == nil {
							  continue
							}
							πE = nil
							πTemp004, πTemp005 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsInstance(πF, πTemp004.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label3
							}
							πE = πF.Raise(πTemp004.ToObject(), nil, πTemp005.ToObject())
							continue
							// line 4324: except ArgumentParserError:
							πF.SetLineno(4324)
						Label3:
							// line 4325: return sys.exc_info()[1]
							πF.SetLineno(4325)
							πTemp001 = πg.NewInt(1).ToObject()
							if πTemp007, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßexc_info, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp008.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp007, πTemp001); πE != nil {
								continue
							}
							πR = πTemp003
							continue
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß_get_error.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4329: def assertPrintHelpExit(self, parser, args_str):
					πF.SetLineno(4329)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "parser", Def: nil}
					πTemp002[2] = πg.Param{Name: "args_str", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("assertPrintHelpExit", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πArgs[1]; _ = µparser
						var µargs_str *πg.Object = πArgs[2]; _ = µargs_str
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4330: self.assertEqual(
							πF.SetLineno(4330)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_help, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µargs_str, "args_str"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µargs_str, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_error, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßstdout, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertPrintHelpExit.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4334: def assertPrintVersionExit(self, parser, args_str):
					πF.SetLineno(4334)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "parser", Def: nil}
					πTemp002[2] = πg.Param{Name: "args_str", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("assertPrintVersionExit", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πArgs[1]; _ = µparser
						var µargs_str *πg.Object = πArgs[2]; _ = µargs_str
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4335: self.assertEqual(
							πF.SetLineno(4335)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßformat_version, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µargs_str, "args_str"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µargs_str, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_error, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßstderr, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertPrintVersionExit.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 4339: def assertArgumentParserError(self, parser, *args):
					πF.SetLineno(4339)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "parser", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("assertArgumentParserError", "build/src/__python__/test/test_argparse.py", πTemp002, πg.CodeFlagVarArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πArgs[1]; _ = µparser
						var µargs *πg.Object = πArgs[2]; _ = µargs
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4340: self.assertRaises(ArgumentParserError, parser.parse_args, args)
							πF.SetLineno(4340)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp001[2] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertArgumentParserError.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 4342: def test_version(self):
					πF.SetLineno(4342)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_version", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4343: parser = ErrorRaisingArgumentParser(version='1.0')
							πF.SetLineno(4343)
							πTemp001 = πg.KWArgs{
								{"version", πg.NewStr("1.0").ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4344: self.assertPrintHelpExit(parser, '-h')
							πF.SetLineno(4344)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("-h").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertPrintHelpExit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4345: self.assertPrintHelpExit(parser, '--help')
							πF.SetLineno(4345)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("--help").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertPrintHelpExit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4346: self.assertPrintVersionExit(parser, '-v')
							πF.SetLineno(4346)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("-v").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertPrintVersionExit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4347: self.assertPrintVersionExit(parser, '--version')
							πF.SetLineno(4347)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("--version").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertPrintVersionExit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_version.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 4349: def test_version_format(self):
					πF.SetLineno(4349)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_version_format", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µmsg *πg.Object = πg.UnboundLocal; _ = µmsg
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4350: parser = ErrorRaisingArgumentParser(prog='PPP', version='%(prog)s 3.5')
							πF.SetLineno(4350)
							πTemp001 = πg.KWArgs{
								{"prog", ßPPP.ToObject()},
								{"version", πg.NewStr("%(prog)s 3.5").ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4351: msg = self._get_error(parser.parse_args, ['-v']).stderr
							πF.SetLineno(4351)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = make([]*πg.Object, 1)
							πTemp005[0] = πg.NewStr("-v").ToObject()
							πTemp002 = πg.NewList(πTemp005...).ToObject()
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_error, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßstderr, nil); πE != nil {
								continue
							}
							µmsg = πTemp002
							// line 4352: self.assertEqual('PPP 3.5\n', msg)
							πF.SetLineno(4352)
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewStr("PPP 3.5\n").ToObject()
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp004[1] = µmsg
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_version_format.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 4354: def test_version_no_help(self):
					πF.SetLineno(4354)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_version_no_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4355: parser = ErrorRaisingArgumentParser(add_help=False, version='1.0')
							πF.SetLineno(4355)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"add_help", πTemp001},
								{"version", πg.NewStr("1.0").ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4356: self.assertArgumentParserError(parser, '-h')
							πF.SetLineno(4356)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("-h").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4357: self.assertArgumentParserError(parser, '--help')
							πF.SetLineno(4357)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("--help").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4358: self.assertPrintVersionExit(parser, '-v')
							πF.SetLineno(4358)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("-v").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertPrintVersionExit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4359: self.assertPrintVersionExit(parser, '--version')
							πF.SetLineno(4359)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("--version").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertPrintVersionExit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_version_no_help.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 4361: def test_version_action(self):
					πF.SetLineno(4361)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_version_action", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µmsg *πg.Object = πg.UnboundLocal; _ = µmsg
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4362: parser = ErrorRaisingArgumentParser(prog='XXX')
							πF.SetLineno(4362)
							πTemp001 = πg.KWArgs{
								{"prog", ßXXX.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4363: parser.add_argument('-V', action='version', version='%(prog)s 3.7')
							πF.SetLineno(4363)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-V").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßversion.ToObject()},
								{"version", πg.NewStr("%(prog)s 3.7").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4364: msg = self._get_error(parser.parse_args, ['-V']).stderr
							πF.SetLineno(4364)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							πTemp005 = make([]*πg.Object, 1)
							πTemp005[0] = πg.NewStr("-V").ToObject()
							πTemp002 = πg.NewList(πTemp005...).ToObject()
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_get_error, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßstderr, nil); πE != nil {
								continue
							}
							µmsg = πTemp002
							// line 4365: self.assertEqual('XXX 3.7\n', msg)
							πF.SetLineno(4365)
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewStr("XXX 3.7\n").ToObject()
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp004[1] = µmsg
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_version_action.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 4367: def test_no_help(self):
					πF.SetLineno(4367)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_no_help", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4368: parser = ErrorRaisingArgumentParser(add_help=False)
							πF.SetLineno(4368)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"add_help", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4369: self.assertArgumentParserError(parser, '-h')
							πF.SetLineno(4369)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("-h").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4370: self.assertArgumentParserError(parser, '--help')
							πF.SetLineno(4370)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("--help").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4371: self.assertArgumentParserError(parser, '-v')
							πF.SetLineno(4371)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("-v").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4372: self.assertArgumentParserError(parser, '--version')
							πF.SetLineno(4372)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							πTemp004[1] = πg.NewStr("--version").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_no_help.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 4374: def test_alternate_help_version(self):
					πF.SetLineno(4374)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_alternate_help_version", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4375: parser = ErrorRaisingArgumentParser()
							πF.SetLineno(4375)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 4376: parser.add_argument('-x', action='help')
							πF.SetLineno(4376)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("-x").ToObject()
							πTemp004 = πg.KWArgs{
								{"action", ßhelp.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4377: parser.add_argument('-y', action='version')
							πF.SetLineno(4377)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("-y").ToObject()
							πTemp004 = πg.KWArgs{
								{"action", ßversion.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4378: self.assertPrintHelpExit(parser, '-x')
							πF.SetLineno(4378)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp003[0] = µparser
							πTemp003[1] = πg.NewStr("-x").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertPrintHelpExit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4379: self.assertPrintVersionExit(parser, '-y')
							πF.SetLineno(4379)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp003[0] = µparser
							πTemp003[1] = πg.NewStr("-y").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertPrintVersionExit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4380: self.assertArgumentParserError(parser, '-v')
							πF.SetLineno(4380)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp003[0] = µparser
							πTemp003[1] = πg.NewStr("-v").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4381: self.assertArgumentParserError(parser, '--version')
							πF.SetLineno(4381)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp003[0] = µparser
							πTemp003[1] = πg.NewStr("--version").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertArgumentParserError, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_alternate_help_version.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 4383: def test_help_version_extra_arguments(self):
					πF.SetLineno(4383)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_help_version_extra_arguments", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µvalid_prefixes *πg.Object = πg.UnboundLocal; _ = µvalid_prefixes
						var µvalid_suffixes *πg.Object = πg.UnboundLocal; _ = µvalid_suffixes
						var µprefix *πg.Object = πg.UnboundLocal; _ = µprefix
						var µsuffix *πg.Object = πg.UnboundLocal; _ = µsuffix
						var µformat *πg.Object = πg.UnboundLocal; _ = µformat
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 4384: parser = ErrorRaisingArgumentParser(version='1.0')
							πF.SetLineno(4384)
							πTemp001 = πg.KWArgs{
								{"version", πg.NewStr("1.0").ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4385: parser.add_argument('-x', action='store_true')
							πF.SetLineno(4385)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("-x").ToObject()
							πTemp001 = πg.KWArgs{
								{"action", ßstore_true.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4386: parser.add_argument('y')
							πF.SetLineno(4386)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßy.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4389: valid_prefixes = ['', '-x', 'foo', '-x bar', 'baz -x']
							πF.SetLineno(4389)
							πTemp004 = make([]*πg.Object, 5)
							πTemp004[0] = ß.ToObject()
							πTemp004[1] = πg.NewStr("-x").ToObject()
							πTemp004[2] = ßfoo.ToObject()
							πTemp004[3] = πg.NewStr("-x bar").ToObject()
							πTemp004[4] = πg.NewStr("baz -x").ToObject()
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							µvalid_prefixes = πTemp002
							// line 4390: valid_suffixes = valid_prefixes + ['--bad-option', 'foo bar baz']
							πF.SetLineno(4390)
							if πE = πg.CheckLocal(πF, µvalid_prefixes, "valid_prefixes"); πE != nil {
								continue
							}
							πTemp004 = make([]*πg.Object, 2)
							πTemp004[0] = πg.NewStr("--bad-option").ToObject()
							πTemp004[1] = πg.NewStr("foo bar baz").ToObject()
							πTemp003 = πg.NewList(πTemp004...).ToObject()
							if πTemp002, πE = πg.Add(πF, µvalid_prefixes, πTemp003); πE != nil {
								continue
							}
							µvalid_suffixes = πTemp002
							if πE = πg.CheckLocal(πF, µvalid_prefixes, "valid_prefixes"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µvalid_prefixes); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µprefix = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							if πE = πg.CheckLocal(πF, µvalid_suffixes, "valid_suffixes"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Iter(πF, µvalid_suffixes); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp006 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp008, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µsuffix = πTemp008
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 4393: format = '%s %%s %s' % (prefix, suffix)
							πF.SetLineno(4393)
							if πE = πg.CheckLocal(πF, µprefix, "prefix"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsuffix, "suffix"); πE != nil {
								continue
							}
							πTemp009 = πg.NewTuple2(µprefix, µsuffix).ToObject()
							if πTemp008, πE = πg.Mod(πF, πg.NewStr("%s %%s %s").ToObject(), πTemp009); πE != nil {
								continue
							}
							µformat = πTemp008
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							// line 4394: self.assertPrintHelpExit(parser, format % '-h')
							πF.SetLineno(4394)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, µformat, πg.NewStr("-h").ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertPrintHelpExit, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4395: self.assertPrintHelpExit(parser, format % '--help')
							πF.SetLineno(4395)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, µformat, πg.NewStr("--help").ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertPrintHelpExit, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4396: self.assertPrintVersionExit(parser, format % '-v')
							πF.SetLineno(4396)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, µformat, πg.NewStr("-v").ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertPrintVersionExit, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4397: self.assertPrintVersionExit(parser, format % '--version')
							πF.SetLineno(4397)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp004[0] = µparser
							if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, µformat, πg.NewStr("--version").ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertPrintVersionExit, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_help_version_extra_arguments.ToObject(), πTemp012); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestOptionalsHelpVersionActions").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestOptionalsHelpVersionActions.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4404: class TestStrings(TestCase):
			πF.SetLineno(4404)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestStrings", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4405: """Test str()  and repr() on Optionals and Positionals"""
					πF.SetLineno(4405)
					// line 4407: def assertStringEqual(self, obj, result_string):
					πF.SetLineno(4407)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "obj", Def: nil}
					πTemp002[2] = πg.Param{Name: "result_string", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("assertStringEqual", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µobj *πg.Object = πArgs[1]; _ = µobj
						var µresult_string *πg.Object = πArgs[2]; _ = µresult_string
						var µfunc *πg.Object = πg.UnboundLocal; _ = µfunc
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp002 = make([]*πg.Object, 2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µfunc = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 4409: self.assertEqual(func(obj), result_string)
							πF.SetLineno(4409)
							πTemp002 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µobj, "obj"); πE != nil {
								continue
							}
							πTemp006[0] = µobj
							if πE = πg.CheckLocal(πF, µfunc, "func"); πE != nil {
								continue
							}
							if πTemp003, πE = µfunc.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µresult_string, "result_string"); πE != nil {
								continue
							}
							πTemp002[1] = µresult_string
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassertStringEqual.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4411: def test_optional(self):
					πF.SetLineno(4411)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_optional", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µoption *πg.Object = πg.UnboundLocal; _ = µoption
						var µstring *πg.Object = πg.UnboundLocal; _ = µstring
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4412: option = argparse.Action(
							πF.SetLineno(4412)
							πTemp001 = make([]*πg.Object, 3)
							πTemp001[0] = πg.NewStr("--foo").ToObject()
							πTemp001[1] = πg.NewStr("-a").ToObject()
							πTemp001[2] = πg.NewStr("-b").ToObject()
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							πTemp001 = make([]*πg.Object, 3)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp003 = πg.NewList(πTemp001...).ToObject()
							πTemp004 = πg.KWArgs{
								{"option_strings", πTemp002},
								{"dest", ßb.ToObject()},
								{"type", ßint.ToObject()},
								{"nargs", πg.NewStr("+").ToObject()},
								{"default", πg.NewInt(42).ToObject()},
								{"choices", πTemp003},
								{"help", ßHELP.ToObject()},
								{"metavar", ßMETAVAR.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßAction, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µoption = πTemp002
							// line 4421: string = (
							πF.SetLineno(4421)
							µstring = πg.NewStr("Action(option_strings=['--foo', '-a', '-b'], dest='b', nargs='+', const=None, default=42, type='int', choices=[1, 2, 3], help='HELP', metavar='METAVAR')").ToObject()
							// line 4425: self.assertStringEqual(option, string)
							πF.SetLineno(4425)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µoption, "option"); πE != nil {
								continue
							}
							πTemp001[0] = µoption
							if πE = πg.CheckLocal(πF, µstring, "string"); πE != nil {
								continue
							}
							πTemp001[1] = µstring
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertStringEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_optional.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4427: def test_argument(self):
					πF.SetLineno(4427)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_argument", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargument *πg.Object = πg.UnboundLocal; _ = µargument
						var µstring *πg.Object = πg.UnboundLocal; _ = µstring
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4428: argument = argparse.Action(
							πF.SetLineno(4428)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							πTemp001 = make([]*πg.Object, 3)
							πTemp001[0] = πg.NewFloat(0.5).ToObject()
							πTemp001[1] = πg.NewFloat(1.5).ToObject()
							πTemp001[2] = πg.NewFloat(2.5).ToObject()
							πTemp004 = πg.NewList(πTemp001...).ToObject()
							πTemp005 = πg.KWArgs{
								{"option_strings", πTemp002},
								{"dest", ßx.ToObject()},
								{"type", πTemp003},
								{"nargs", πg.NewStr("?").ToObject()},
								{"default", πg.NewFloat(2.5).ToObject()},
								{"choices", πTemp004},
								{"help", πg.NewStr("H HH H").ToObject()},
								{"metavar", πg.NewStr("MV MV MV").ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßAction, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µargument = πTemp002
							// line 4437: string = (
							πF.SetLineno(4437)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("Action(option_strings=[], dest='x', nargs='?', const=None, default=2.5, type=%r, choices=[0.5, 1.5, 2.5], help='H HH H', metavar='MV MV MV')").ToObject(), πTemp003); πE != nil {
								continue
							}
							µstring = πTemp002
							// line 4441: self.assertStringEqual(argument, string)
							πF.SetLineno(4441)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µargument, "argument"); πE != nil {
								continue
							}
							πTemp001[0] = µargument
							if πE = πg.CheckLocal(πF, µstring, "string"); πE != nil {
								continue
							}
							πTemp001[1] = µstring
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertStringEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_argument.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 4443: def test_namespace(self):
					πF.SetLineno(4443)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_namespace", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µns *πg.Object = πg.UnboundLocal; _ = µns
						var µstring *πg.Object = πg.UnboundLocal; _ = µstring
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4444: ns = argparse.Namespace(foo=42, bar='spam')
							πF.SetLineno(4444)
							πTemp001 = πg.KWArgs{
								{"foo", πg.NewInt(42).ToObject()},
								{"bar", ßspam.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µns = πTemp002
							// line 4445: string = "Namespace(bar='spam', foo=42)"
							πF.SetLineno(4445)
							µstring = πg.NewStr("Namespace(bar='spam', foo=42)").ToObject()
							// line 4446: self.assertStringEqual(ns, string)
							πF.SetLineno(4446)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							πTemp004[0] = µns
							if πE = πg.CheckLocal(πF, µstring, "string"); πE != nil {
								continue
							}
							πTemp004[1] = µstring
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertStringEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_namespace.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 4448: def test_parser(self):
					πF.SetLineno(4448)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_parser", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µstring *πg.Object = πg.UnboundLocal; _ = µstring
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4449: parser = argparse.ArgumentParser(prog='PROG')
							πF.SetLineno(4449)
							πTemp001 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µparser = πTemp002
							// line 4450: string = (
							πF.SetLineno(4450)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßHelpFormatter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("ArgumentParser(prog='PROG', usage=None, description=None, version=None, formatter_class=%r, conflict_handler='error', add_help=True)").ToObject(), πTemp004); πE != nil {
								continue
							}
							µstring = πTemp002
							// line 4454: self.assertStringEqual(parser, string)
							πF.SetLineno(4454)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							πTemp005[0] = µparser
							if πE = πg.CheckLocal(πF, µstring, "string"); πE != nil {
								continue
							}
							πTemp005[1] = µstring
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertStringEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_parser.ToObject(), πTemp006); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestStrings").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestStrings.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4460: class TestNamespace(TestCase):
			πF.SetLineno(4460)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestNamespace", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4462: def test_constructor(self):
					πF.SetLineno(4462)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_constructor", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µns *πg.Object = πg.UnboundLocal; _ = µns
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4463: ns = argparse.Namespace()
							πF.SetLineno(4463)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µns = πTemp001
							// line 4464: self.assertRaises(AttributeError, getattr, ns, 'x')
							πF.SetLineno(4464)
							πTemp003 = πF.MakeArgs(4)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßAttributeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							πTemp003[2] = µns
							πTemp003[3] = ßx.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4466: ns = argparse.Namespace(a=42, b='spam')
							πF.SetLineno(4466)
							πTemp004 = πg.KWArgs{
								{"a", πg.NewInt(42).ToObject()},
								{"b", ßspam.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µns = πTemp001
							// line 4467: self.assertEqual(ns.a, 42)
							πF.SetLineno(4467)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µns, ßa, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4468: self.assertEqual(ns.b, 'spam')
							πF.SetLineno(4468)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µns, ßb, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ßspam.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_constructor.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4470: def test_equality(self):
					πF.SetLineno(4470)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_equality", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µns1 *πg.Object = πg.UnboundLocal; _ = µns1
						var µns2 *πg.Object = πg.UnboundLocal; _ = µns2
						var µns3 *πg.Object = πg.UnboundLocal; _ = µns3
						var µns4 *πg.Object = πg.UnboundLocal; _ = µns4
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4471: ns1 = argparse.Namespace(a=1, b=2)
							πF.SetLineno(4471)
							πTemp001 = πg.KWArgs{
								{"a", πg.NewInt(1).ToObject()},
								{"b", πg.NewInt(2).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µns1 = πTemp002
							// line 4472: ns2 = argparse.Namespace(b=2, a=1)
							πF.SetLineno(4472)
							πTemp001 = πg.KWArgs{
								{"b", πg.NewInt(2).ToObject()},
								{"a", πg.NewInt(1).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µns2 = πTemp002
							// line 4473: ns3 = argparse.Namespace(a=1)
							πF.SetLineno(4473)
							πTemp001 = πg.KWArgs{
								{"a", πg.NewInt(1).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µns3 = πTemp002
							// line 4474: ns4 = argparse.Namespace(b=2)
							πF.SetLineno(4474)
							πTemp001 = πg.KWArgs{
								{"b", πg.NewInt(2).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µns4 = πTemp002
							// line 4476: self.assertEqual(ns1, ns2)
							πF.SetLineno(4476)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns1, "ns1"); πE != nil {
								continue
							}
							πTemp004[0] = µns1
							if πE = πg.CheckLocal(πF, µns2, "ns2"); πE != nil {
								continue
							}
							πTemp004[1] = µns2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4477: self.assertNotEqual(ns1, ns3)
							πF.SetLineno(4477)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns1, "ns1"); πE != nil {
								continue
							}
							πTemp004[0] = µns1
							if πE = πg.CheckLocal(πF, µns3, "ns3"); πE != nil {
								continue
							}
							πTemp004[1] = µns3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertNotEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4478: self.assertNotEqual(ns1, ns4)
							πF.SetLineno(4478)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns1, "ns1"); πE != nil {
								continue
							}
							πTemp004[0] = µns1
							if πE = πg.CheckLocal(πF, µns4, "ns4"); πE != nil {
								continue
							}
							πTemp004[1] = µns4
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertNotEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4479: self.assertNotEqual(ns2, ns3)
							πF.SetLineno(4479)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns2, "ns2"); πE != nil {
								continue
							}
							πTemp004[0] = µns2
							if πE = πg.CheckLocal(πF, µns3, "ns3"); πE != nil {
								continue
							}
							πTemp004[1] = µns3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertNotEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4480: self.assertNotEqual(ns2, ns4)
							πF.SetLineno(4480)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µns2, "ns2"); πE != nil {
								continue
							}
							πTemp004[0] = µns2
							if πE = πg.CheckLocal(πF, µns4, "ns4"); πE != nil {
								continue
							}
							πTemp004[1] = µns4
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertNotEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4481: self.assertTrue(ns1 != ns3)
							πF.SetLineno(4481)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µns1, "ns1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µns3, "ns3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µns1, µns3); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4482: self.assertTrue(ns1 != ns4)
							πF.SetLineno(4482)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µns1, "ns1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µns4, "ns4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µns1, µns4); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4483: self.assertTrue(ns2 != ns3)
							πF.SetLineno(4483)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µns2, "ns2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µns3, "ns3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µns2, µns3); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4484: self.assertTrue(ns2 != ns4)
							πF.SetLineno(4484)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µns2, "ns2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µns4, "ns4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µns2, µns4); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_equality.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4486: def test_equality_returns_notimplemeted(self):
					πF.SetLineno(4486)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_equality_returns_notimplemeted", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µns *πg.Object = πg.UnboundLocal; _ = µns
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4488: ns = argparse.Namespace(a=1, b=2)
							πF.SetLineno(4488)
							πTemp001 = πg.KWArgs{
								{"a", πg.NewInt(1).ToObject()},
								{"b", πg.NewInt(2).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamespace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µns = πTemp002
							// line 4489: self.assertIs(ns.__eq__(None), NotImplemented)
							πF.SetLineno(4489)
							πTemp004 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µns, ß__eq__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNotImplemented); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 4490: self.assertIs(ns.__ne__(None), NotImplemented)
							πF.SetLineno(4490)
							πTemp004 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µns, "ns"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µns, ß__ne__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNotImplemented); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_equality_returns_notimplemeted.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestNamespace").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestNamespace.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4515: class TestArgumentError(TestCase):
			πF.SetLineno(4515)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestArgumentError", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4517: def test_argument_error(self):
					πF.SetLineno(4517)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_argument_error", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µmsg *πg.Object = πg.UnboundLocal; _ = µmsg
						var µerror *πg.Object = πg.UnboundLocal; _ = µerror
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4518: msg = "my error here"
							πF.SetLineno(4518)
							µmsg = πg.NewStr("my error here").ToObject()
							// line 4519: error = argparse.ArgumentError(None, msg)
							πF.SetLineno(4519)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp001[1] = µmsg
							if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentError, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µerror = πTemp002
							// line 4520: self.assertEqual(str(error), msg)
							πF.SetLineno(4520)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µerror, "error"); πE != nil {
								continue
							}
							πTemp004[0] = µerror
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp001[1] = µmsg
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_argument_error.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestArgumentError").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestArgumentError.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4526: class TestArgumentTypeError(TestCase):
			πF.SetLineno(4526)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestArgumentTypeError", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4528: def test_argument_type_error(self):
					πF.SetLineno(4528)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_argument_type_error", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µspam *πg.Object = πg.UnboundLocal; _ = µspam
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µmsg *πg.Object = πg.UnboundLocal; _ = µmsg
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 4530: def spam(string):
							πF.SetLineno(4530)
							πTemp002 = make([]πg.Param, 1)
							πTemp002[0] = πg.Param{Name: "string", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("spam", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µstring *πg.Object = πArgs[0]; _ = µstring
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									πTemp001 = πF.MakeArgs(1)
									πTemp001[0] = πg.NewStr("spam!").ToObject()
									if πTemp002, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
										continue
									}
									if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßArgumentTypeError, nil); πE != nil {
										continue
									}
									if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									// line 4531: raise argparse.ArgumentTypeError('spam!')
									πF.SetLineno(4531)
									πE = πF.Raise(πTemp002, nil, nil)
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µspam = πTemp001
							// line 4533: parser = ErrorRaisingArgumentParser(prog='PROG', add_help=False)
							πF.SetLineno(4533)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"prog", ßPROG.ToObject()},
								{"add_help", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßErrorRaisingArgumentParser); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µparser = πTemp005
							// line 4534: parser.add_argument('x', type=spam)
							πF.SetLineno(4534)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßx.ToObject()
							if πE = πg.CheckLocal(πF, µspam, "spam"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"type", µspam},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp006, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 4535: try:
							πF.SetLineno(4535)
							πF.PushCheckpoint(2)
							// line 4536: parser.parse_args(['XXX'])
							πF.SetLineno(4536)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = make([]*πg.Object, 1)
							πTemp007[0] = ßXXX.ToObject()
							πTemp003 = πg.NewList(πTemp007...).ToObject()
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πF.PopCheckpoint()
							// line 4542: self.fail()
							πF.SetLineno(4542)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfail, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label1
						Label2:
							if πE == nil {
							  continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßArgumentParserError); πE != nil {
								continue
							}
							if πTemp010, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp010 {
								goto Label3
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 4537: except ArgumentParserError:
							πF.SetLineno(4537)
						Label3:
							// line 4538: expected = 'usage: PROG x\nPROG: error: argument x: spam!\n'
							πF.SetLineno(4538)
							µexpected = πg.NewStr("usage: PROG x\nPROG: error: argument x: spam!\n").ToObject()
							// line 4539: msg = sys.exc_info()[1].stderr
							πF.SetLineno(4539)
							πTemp003 = πg.NewInt(1).ToObject()
							if πTemp011, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp012, πE = πg.GetAttr(πF, πTemp011, ßexc_info, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp012.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp011, πTemp003); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp005, ßstderr, nil); πE != nil {
								continue
							}
							µmsg = πTemp003
							// line 4540: self.assertEqual(expected, msg)
							πF.SetLineno(4540)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp006[0] = µexpected
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp006[1] = µmsg
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_argument_type_error.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestArgumentTypeError").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestArgumentTypeError.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4548: class TestTypeFunctionCallOnlyOnce(TestCase):
			πF.SetLineno(4548)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTypeFunctionCallOnlyOnce", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4550: def test_type_function_call_only_once(self):
					πF.SetLineno(4550)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_type_function_call_only_once", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µspam *πg.Object = πg.UnboundLocal; _ = µspam
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4551: def spam(string_to_convert):
							πF.SetLineno(4551)
							πTemp002 = make([]πg.Param, 1)
							πTemp002[0] = πg.Param{Name: "string_to_convert", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("spam", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µstring_to_convert *πg.Object = πArgs[0]; _ = µstring_to_convert
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 4552: self.assertEqual(string_to_convert, 'spam!')
									πF.SetLineno(4552)
									πTemp001 = πF.MakeArgs(2)
									if πE = πg.CheckLocal(πF, µstring_to_convert, "string_to_convert"); πE != nil {
										continue
									}
									πTemp001[0] = µstring_to_convert
									πTemp001[1] = πg.NewStr("spam!").ToObject()
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									// line 4553: return 'foo_converted'
									πF.SetLineno(4553)
									πR = ßfoo_converted.ToObject()
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µspam = πTemp001
							// line 4555: parser = argparse.ArgumentParser()
							πF.SetLineno(4555)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4556: parser.add_argument('--foo', type=spam, default='bar')
							πF.SetLineno(4556)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µspam, "spam"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"type", µspam},
								{"default", ßbar.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 4557: args = parser.parse_args('--foo spam!'.split())
							πF.SetLineno(4557)
							πTemp005 = πF.MakeArgs(1)
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("--foo spam!").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µargs = πTemp004
							// line 4558: self.assertEqual(NS(foo='foo_converted'), args)
							πF.SetLineno(4558)
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = πg.KWArgs{
								{"foo", ßfoo_converted.ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp005[1] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_type_function_call_only_once.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestTypeFunctionCallOnlyOnce").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTypeFunctionCallOnlyOnce.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4564: class TestTypeFunctionCalledOnDefault(TestCase):
			πF.SetLineno(4564)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTypeFunctionCalledOnDefault", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4566: def test_type_function_call_with_non_string_default(self):
					πF.SetLineno(4566)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_type_function_call_with_non_string_default", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µspam *πg.Object = πg.UnboundLocal; _ = µspam
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4567: def spam(int_to_convert):
							πF.SetLineno(4567)
							πTemp002 = make([]πg.Param, 1)
							πTemp002[0] = πg.Param{Name: "int_to_convert", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("spam", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µint_to_convert *πg.Object = πArgs[0]; _ = µint_to_convert
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 4568: self.assertEqual(int_to_convert, 0)
									πF.SetLineno(4568)
									πTemp001 = πF.MakeArgs(2)
									if πE = πg.CheckLocal(πF, µint_to_convert, "int_to_convert"); πE != nil {
										continue
									}
									πTemp001[0] = µint_to_convert
									πTemp001[1] = πg.NewInt(0).ToObject()
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									// line 4569: return 'foo_converted'
									πF.SetLineno(4569)
									πR = ßfoo_converted.ToObject()
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µspam = πTemp001
							// line 4571: parser = argparse.ArgumentParser()
							πF.SetLineno(4571)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4572: parser.add_argument('--foo', type=spam, default=0)
							πF.SetLineno(4572)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µspam, "spam"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"type", µspam},
								{"default", πg.NewInt(0).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 4573: args = parser.parse_args([])
							πF.SetLineno(4573)
							πTemp005 = πF.MakeArgs(1)
							πTemp007 = make([]*πg.Object, 0)
							πTemp003 = πg.NewList(πTemp007...).ToObject()
							πTemp005[0] = πTemp003
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µargs = πTemp004
							// line 4575: self.assertEqual(NS(foo=0), args)
							πF.SetLineno(4575)
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = πg.KWArgs{
								{"foo", πg.NewInt(0).ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp005[1] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_type_function_call_with_non_string_default.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4577: def test_type_function_call_with_string_default(self):
					πF.SetLineno(4577)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_type_function_call_with_string_default", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µspam *πg.Object = πg.UnboundLocal; _ = µspam
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4578: def spam(int_to_convert):
							πF.SetLineno(4578)
							πTemp002 = make([]πg.Param, 1)
							πTemp002[0] = πg.Param{Name: "int_to_convert", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("spam", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µint_to_convert *πg.Object = πArgs[0]; _ = µint_to_convert
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 4579: return 'foo_converted'
									πF.SetLineno(4579)
									πR = ßfoo_converted.ToObject()
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µspam = πTemp001
							// line 4581: parser = argparse.ArgumentParser()
							πF.SetLineno(4581)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4582: parser.add_argument('--foo', type=spam, default='0')
							πF.SetLineno(4582)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µspam, "spam"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"type", µspam},
								{"default", ß0.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 4583: args = parser.parse_args([])
							πF.SetLineno(4583)
							πTemp005 = πF.MakeArgs(1)
							πTemp007 = make([]*πg.Object, 0)
							πTemp003 = πg.NewList(πTemp007...).ToObject()
							πTemp005[0] = πTemp003
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µargs = πTemp004
							// line 4585: self.assertEqual(NS(foo='foo_converted'), args)
							πF.SetLineno(4585)
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = πg.KWArgs{
								{"foo", ßfoo_converted.ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp005[1] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_type_function_call_with_string_default.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4587: def test_no_double_type_conversion_of_default(self):
					πF.SetLineno(4587)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_no_double_type_conversion_of_default", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µextend *πg.Object = πg.UnboundLocal; _ = µextend
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []πg.Param
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4588: def extend(str_to_convert):
							πF.SetLineno(4588)
							πTemp002 = make([]πg.Param, 1)
							πTemp002[0] = πg.Param{Name: "str_to_convert", Def: nil}
							πTemp001 = πg.NewFunction(πg.NewCode("extend", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µstr_to_convert *πg.Object = πArgs[0]; _ = µstr_to_convert
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 4589: return str_to_convert + '*'
									πF.SetLineno(4589)
									if πE = πg.CheckLocal(πF, µstr_to_convert, "str_to_convert"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µstr_to_convert, πg.NewStr("*").ToObject()); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µextend = πTemp001
							// line 4591: parser = argparse.ArgumentParser()
							πF.SetLineno(4591)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 4592: parser.add_argument('--test', type=extend, default='*')
							πF.SetLineno(4592)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("--test").ToObject()
							if πE = πg.CheckLocal(πF, µextend, "extend"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"type", µextend},
								{"default", πg.NewStr("*").ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 4593: args = parser.parse_args([])
							πF.SetLineno(4593)
							πTemp005 = πF.MakeArgs(1)
							πTemp007 = make([]*πg.Object, 0)
							πTemp003 = πg.NewList(πTemp007...).ToObject()
							πTemp005[0] = πTemp003
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µargs = πTemp004
							// line 4597: self.assertEqual(NS(test='**'), args)
							πF.SetLineno(4597)
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = πg.KWArgs{
								{"test", πg.NewStr("**").ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp005[1] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_no_double_type_conversion_of_default.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 4599: def test_issue_15906(self):
					πF.SetLineno(4599)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_issue_15906", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4603: parser = argparse.ArgumentParser()
							πF.SetLineno(4603)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4604: parser.add_argument('--test', dest='test', type=str,
							πF.SetLineno(4604)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--test").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							πTemp004 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							πTemp005 = πg.KWArgs{
								{"dest", ßtest.ToObject()},
								{"type", πTemp001},
								{"default", πTemp002},
								{"action", ßappend.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4606: args = parser.parse_args([])
							πF.SetLineno(4606)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µargs = πTemp002
							// line 4607: self.assertEqual(args.test, [])
							πF.SetLineno(4607)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µargs, ßtest, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_issue_15906.ToObject(), πTemp005); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestTypeFunctionCalledOnDefault").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTypeFunctionCalledOnDefault.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4613: class TestParseKnownArgs(TestCase):
			πF.SetLineno(4613)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestParseKnownArgs", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4615: def test_arguments_tuple(self):
					πF.SetLineno(4615)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_arguments_tuple", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4616: parser = argparse.ArgumentParser()
							πF.SetLineno(4616)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4617: parser.parse_args(())
							πF.SetLineno(4617)
							πTemp003 = πF.MakeArgs(1)
							πTemp001 = πg.NewTuple0().ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_arguments_tuple.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4619: def test_arguments_list(self):
					πF.SetLineno(4619)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_arguments_list", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4620: parser = argparse.ArgumentParser()
							πF.SetLineno(4620)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4621: parser.parse_args([])
							πF.SetLineno(4621)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_arguments_list.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4623: def test_arguments_tuple_positional(self):
					πF.SetLineno(4623)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_arguments_tuple_positional", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4624: parser = argparse.ArgumentParser()
							πF.SetLineno(4624)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4625: parser.add_argument('x')
							πF.SetLineno(4625)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßx.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4626: parser.parse_args(('x',))
							πF.SetLineno(4626)
							πTemp003 = πF.MakeArgs(1)
							πTemp001 = πg.NewTuple1(ßx.ToObject()).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_arguments_tuple_positional.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 4628: def test_arguments_list_positional(self):
					πF.SetLineno(4628)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_arguments_list_positional", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4629: parser = argparse.ArgumentParser()
							πF.SetLineno(4629)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4630: parser.add_argument('x')
							πF.SetLineno(4630)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßx.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4631: parser.parse_args(['x'])
							πF.SetLineno(4631)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = make([]*πg.Object, 1)
							πTemp004[0] = ßx.ToObject()
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_arguments_list_positional.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 4633: def test_optionals(self):
					πF.SetLineno(4633)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_optionals", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µextras *πg.Object = πg.UnboundLocal; _ = µextras
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4634: parser = argparse.ArgumentParser()
							πF.SetLineno(4634)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4635: parser.add_argument('--foo')
							πF.SetLineno(4635)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4636: args, extras = parser.parse_known_args('--foo F --bar --baz'.split())
							πF.SetLineno(4636)
							πTemp003 = πF.MakeArgs(1)
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("--foo F --bar --baz").ToObject(), ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_known_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp004}}}, πTemp002); πE != nil {
								continue
							}
							µargs = πTemp001
							µextras = πTemp004
							// line 4637: self.assertEqual(NS(foo='F'), args)
							πF.SetLineno(4637)
							πTemp003 = πF.MakeArgs(2)
							πTemp005 = πg.KWArgs{
								{"foo", ßF.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp003[1] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4638: self.assertEqual(['--bar', '--baz'], extras)
							πF.SetLineno(4638)
							πTemp003 = πF.MakeArgs(2)
							πTemp006 = make([]*πg.Object, 2)
							πTemp006[0] = πg.NewStr("--bar").ToObject()
							πTemp006[1] = πg.NewStr("--baz").ToObject()
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µextras, "extras"); πE != nil {
								continue
							}
							πTemp003[1] = µextras
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_optionals.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 4640: def test_mixed(self):
					πF.SetLineno(4640)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_mixed", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µargv *πg.Object = πg.UnboundLocal; _ = µargv
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µextras *πg.Object = πg.UnboundLocal; _ = µextras
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4641: parser = argparse.ArgumentParser()
							πF.SetLineno(4641)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4642: parser.add_argument('-v', nargs='?', const=1, type=int)
							πF.SetLineno(4642)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("-v").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"const", πg.NewInt(1).ToObject()},
								{"type", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4643: parser.add_argument('--spam', action='store_false')
							πF.SetLineno(4643)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--spam").ToObject()
							πTemp004 = πg.KWArgs{
								{"action", ßstore_false.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4644: parser.add_argument('badger')
							πF.SetLineno(4644)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßbadger.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4646: argv = ["B", "C", "--foo", "-v", "3", "4"]
							πF.SetLineno(4646)
							πTemp003 = make([]*πg.Object, 6)
							πTemp003[0] = ßB.ToObject()
							πTemp003[1] = ßC.ToObject()
							πTemp003[2] = πg.NewStr("--foo").ToObject()
							πTemp003[3] = πg.NewStr("-v").ToObject()
							πTemp003[4] = ß3.ToObject()
							πTemp003[5] = ß4.ToObject()
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							µargv = πTemp001
							// line 4647: args, extras = parser.parse_known_args(argv)
							πF.SetLineno(4647)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µargv, "argv"); πE != nil {
								continue
							}
							πTemp003[0] = µargv
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßparse_known_args, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp005}}}, πTemp002); πE != nil {
								continue
							}
							µargs = πTemp001
							µextras = πTemp005
							// line 4648: self.assertEqual(NS(v=3, spam=True, badger="B"), args)
							πF.SetLineno(4648)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"v", πg.NewInt(3).ToObject()},
								{"spam", πTemp001},
								{"badger", ßB.ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNS); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp003[1] = µargs
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 4649: self.assertEqual(["C", "--foo", "4"], extras)
							πF.SetLineno(4649)
							πTemp003 = πF.MakeArgs(2)
							πTemp006 = make([]*πg.Object, 3)
							πTemp006[0] = ßC.ToObject()
							πTemp006[1] = πg.NewStr("--foo").ToObject()
							πTemp006[2] = ß4.ToObject()
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µextras, "extras"); πE != nil {
								continue
							}
							πTemp003[1] = µextras
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_mixed.ToObject(), πTemp007); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestParseKnownArgs").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestParseKnownArgs.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4655: class TestAddArgumentMetavar(TestCase):
			πF.SetLineno(4655)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTestCase); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp004 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestAddArgumentMetavar", "build/src/__python__/test/test_argparse.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp004
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				var πTemp021 *πg.Object
				_ = πTemp021
				var πTemp022 *πg.Object
				_ = πTemp022
				var πTemp023 *πg.Object
				_ = πTemp023
				var πTemp024 *πg.Object
				_ = πTemp024
				var πTemp025 *πg.Object
				_ = πTemp025
				var πTemp026 *πg.Object
				_ = πTemp026
				var πTemp027 *πg.Object
				_ = πTemp027
				var πTemp028 *πg.Object
				_ = πTemp028
				var πTemp029 *πg.Object
				_ = πTemp029
				var πTemp030 *πg.Object
				_ = πTemp030
				var πTemp031 *πg.Object
				_ = πTemp031
				var πTemp032 *πg.Object
				_ = πTemp032
				var πTemp033 *πg.Object
				_ = πTemp033
				var πTemp034 *πg.Object
				_ = πTemp034
				var πTemp035 *πg.Object
				_ = πTemp035
				var πTemp036 *πg.Object
				_ = πTemp036
				var πTemp037 *πg.Object
				_ = πTemp037
				var πTemp038 *πg.Object
				_ = πTemp038
				var πTemp039 *πg.Object
				_ = πTemp039
				var πTemp040 *πg.Object
				_ = πTemp040
				var πTemp041 *πg.Object
				_ = πTemp041
				var πTemp042 *πg.Object
				_ = πTemp042
				var πTemp043 *πg.Object
				_ = πTemp043
				var πTemp044 *πg.Object
				_ = πTemp044
				var πTemp045 *πg.Object
				_ = πTemp045
				var πTemp046 *πg.Object
				_ = πTemp046
				var πTemp047 *πg.Object
				_ = πTemp047
				var πTemp048 *πg.Object
				_ = πTemp048
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4657: EXPECTED_MESSAGE = "length of metavar tuple does not match nargs"
					πF.SetLineno(4657)
					if πE = πClass.SetItem(πF, ßEXPECTED_MESSAGE.ToObject(), πg.NewStr("length of metavar tuple does not match nargs").ToObject()); πE != nil {
						continue
					}
					// line 4659: def do_test_no_exception(self, nargs, metavar):
					πF.SetLineno(4659)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "nargs", Def: nil}
					πTemp002[2] = πg.Param{Name: "metavar", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("do_test_no_exception", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µnargs *πg.Object = πArgs[1]; _ = µnargs
						var µmetavar *πg.Object = πArgs[2]; _ = µmetavar
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4660: parser = argparse.ArgumentParser()
							πF.SetLineno(4660)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4661: parser.add_argument("--foo", nargs=nargs, metavar=metavar)
							πF.SetLineno(4661)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µnargs, "nargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmetavar, "metavar"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nargs", µnargs},
								{"metavar", µmetavar},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdo_test_no_exception.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 4663: def do_test_exception(self, nargs, metavar):
					πF.SetLineno(4663)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "nargs", Def: nil}
					πTemp002[2] = πg.Param{Name: "metavar", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("do_test_exception", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µnargs *πg.Object = πArgs[1]; _ = µnargs
						var µmetavar *πg.Object = πArgs[2]; _ = µmetavar
						var µparser *πg.Object = πg.UnboundLocal; _ = µparser
						var µcm *πg.Object = πg.UnboundLocal; _ = µcm
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.BaseException
						_ = πTemp009
						var πTemp010 *πg.Traceback
						_ = πTemp010
						var πTemp011 *πg.Type
						_ = πTemp011
						var πTemp012 []*πg.Object
						_ = πTemp012
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							default: panic("unexpected function state")
							}
							// line 4664: parser = argparse.ArgumentParser()
							πF.SetLineno(4664)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßargparse); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßArgumentParser, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp001
							// line 4665: with self.assertRaises(ValueError) as cm:
							πF.SetLineno(4665)
							πTemp003 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.GetAttr(πF, πTemp002.Type().ToObject(), ß__exit__, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002.Type().ToObject(), ß__enter__, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp004.Call(πF, πg.Args{πTemp002}, nil); πE != nil {
								continue
							}
							πF.PushCheckpoint(1)
							µcm = πTemp004
							// line 4666: parser.add_argument("--foo", nargs=nargs, metavar=metavar)
							πF.SetLineno(4666)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("--foo").ToObject()
							if πE = πg.CheckLocal(πF, µnargs, "nargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmetavar, "metavar"); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"nargs", µnargs},
								{"metavar", µmetavar},
							}
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µparser, ßadd_argument, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πF.PopCheckpoint()
						Label1:
							πTemp009, πTemp010 = nil, nil
							if πE != nil {
								πTemp009, πTemp010 = πF.ExcInfo()
							}
							if πTemp009 != nil {
								πTemp011 = πTemp009.Type()
								if πTemp006, πE = πTemp001.Call(πF, πg.Args{πTemp002, πTemp011.ToObject(), πTemp009.ToObject(), πTemp010.ToObject()}, nil); πE != nil {
									continue
								}
							} else {
								if πTemp006, πE = πTemp001.Call(πF, πg.Args{πTemp002, πg.None, πg.None, πg.None}, nil); πE != nil {
									continue
								}
							}
							if πTemp008, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp009 != nil && πTemp008 != true {
								πE = πF.Raise(nil, nil, nil)
								continue
							}
							if πR != nil {
								continue
							}
							// line 4668: self.assertEqual(str(cm.exception), self.EXPECTED_MESSAGE)
							πF.SetLineno(4668)
							πTemp003 = πF.MakeArgs(2)
							πTemp012 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcm, "cm"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µcm, ßexception, nil); πE != nil {
								continue
							}
							πTemp012[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßEXPECTED_MESSAGE, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdo_test_exception.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 4672: def test_nargs_None_metavar_string(self):
					πF.SetLineno(4672)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_nargs_None_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4673: self.do_test_no_exception(nargs=None, metavar="1")
							πF.SetLineno(4673)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"nargs", πTemp001},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_None_metavar_string.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 4675: def test_nargs_None_metavar_length0(self):
					πF.SetLineno(4675)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_nargs_None_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4676: self.do_test_exception(nargs=None, metavar=tuple())
							πF.SetLineno(4676)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nargs", πTemp001},
								{"metavar", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_None_metavar_length0.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 4678: def test_nargs_None_metavar_length1(self):
					πF.SetLineno(4678)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_nargs_None_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4679: self.do_test_no_exception(nargs=None, metavar=("1"))
							πF.SetLineno(4679)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"nargs", πTemp001},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_None_metavar_length1.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 4681: def test_nargs_None_metavar_length2(self):
					πF.SetLineno(4681)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_nargs_None_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4682: self.do_test_exception(nargs=None, metavar=("1", "2"))
							πF.SetLineno(4682)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp003 = πg.KWArgs{
								{"nargs", πTemp001},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_None_metavar_length2.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 4684: def test_nargs_None_metavar_length3(self):
					πF.SetLineno(4684)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_nargs_None_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4685: self.do_test_exception(nargs=None, metavar=("1", "2", "3"))
							πF.SetLineno(4685)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp003 = πg.KWArgs{
								{"nargs", πTemp001},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_None_metavar_length3.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 4689: def test_nargs_optional_metavar_string(self):
					πF.SetLineno(4689)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_nargs_optional_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4690: self.do_test_no_exception(nargs="?", metavar="1")
							πF.SetLineno(4690)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_optional_metavar_string.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 4692: def test_nargs_optional_metavar_length0(self):
					πF.SetLineno(4692)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_nargs_optional_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4693: self.do_test_exception(nargs="?", metavar=tuple())
							πF.SetLineno(4693)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_optional_metavar_length0.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 4695: def test_nargs_optional_metavar_length1(self):
					πF.SetLineno(4695)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_nargs_optional_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4696: self.do_test_no_exception(nargs="?", metavar=("1"))
							πF.SetLineno(4696)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_optional_metavar_length1.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 4698: def test_nargs_optional_metavar_length2(self):
					πF.SetLineno(4698)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_nargs_optional_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4699: self.do_test_exception(nargs="?", metavar=("1", "2"))
							πF.SetLineno(4699)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_optional_metavar_length2.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 4701: def test_nargs_optional_metavar_length3(self):
					πF.SetLineno(4701)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_nargs_optional_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4702: self.do_test_exception(nargs="?", metavar=("1", "2", "3"))
							πF.SetLineno(4702)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("?").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_optional_metavar_length3.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 4706: def test_nargs_zeroormore_metavar_string(self):
					πF.SetLineno(4706)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_nargs_zeroormore_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4707: self.do_test_no_exception(nargs="*", metavar="1")
							πF.SetLineno(4707)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("*").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_zeroormore_metavar_string.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 4709: def test_nargs_zeroormore_metavar_length0(self):
					πF.SetLineno(4709)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_nargs_zeroormore_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4710: self.do_test_exception(nargs="*", metavar=tuple())
							πF.SetLineno(4710)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("*").ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_zeroormore_metavar_length0.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 4712: def test_nargs_zeroormore_metavar_length1(self):
					πF.SetLineno(4712)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_nargs_zeroormore_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4713: self.do_test_no_exception(nargs="*", metavar=("1"))
							πF.SetLineno(4713)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("*").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_zeroormore_metavar_length1.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 4715: def test_nargs_zeroormore_metavar_length2(self):
					πF.SetLineno(4715)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("test_nargs_zeroormore_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4716: self.do_test_no_exception(nargs="*", metavar=("1", "2"))
							πF.SetLineno(4716)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("*").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_zeroormore_metavar_length2.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 4718: def test_nargs_zeroormore_metavar_length3(self):
					πF.SetLineno(4718)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("test_nargs_zeroormore_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4719: self.do_test_exception(nargs="*", metavar=("1", "2", "3"))
							πF.SetLineno(4719)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("*").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_zeroormore_metavar_length3.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 4723: def test_nargs_oneormore_metavar_string(self):
					πF.SetLineno(4723)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("test_nargs_oneormore_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4724: self.do_test_no_exception(nargs="+", metavar="1")
							πF.SetLineno(4724)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_oneormore_metavar_string.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 4726: def test_nargs_oneormore_metavar_length0(self):
					πF.SetLineno(4726)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp020 = πg.NewFunction(πg.NewCode("test_nargs_oneormore_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4727: self.do_test_exception(nargs="+", metavar=tuple())
							πF.SetLineno(4727)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_oneormore_metavar_length0.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 4729: def test_nargs_oneormore_metavar_length1(self):
					πF.SetLineno(4729)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp021 = πg.NewFunction(πg.NewCode("test_nargs_oneormore_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4730: self.do_test_no_exception(nargs="+", metavar=("1"))
							πF.SetLineno(4730)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_oneormore_metavar_length1.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 4732: def test_nargs_oneormore_metavar_length2(self):
					πF.SetLineno(4732)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp022 = πg.NewFunction(πg.NewCode("test_nargs_oneormore_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4733: self.do_test_no_exception(nargs="+", metavar=("1", "2"))
							πF.SetLineno(4733)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_oneormore_metavar_length2.ToObject(), πTemp022); πE != nil {
						continue
					}
					// line 4735: def test_nargs_oneormore_metavar_length3(self):
					πF.SetLineno(4735)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp023 = πg.NewFunction(πg.NewCode("test_nargs_oneormore_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4736: self.do_test_exception(nargs="+", metavar=("1", "2", "3"))
							πF.SetLineno(4736)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("+").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_oneormore_metavar_length3.ToObject(), πTemp023); πE != nil {
						continue
					}
					// line 4740: def test_nargs_remainder_metavar_string(self):
					πF.SetLineno(4740)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp024 = πg.NewFunction(πg.NewCode("test_nargs_remainder_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4741: self.do_test_no_exception(nargs="...", metavar="1")
							πF.SetLineno(4741)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("...").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_remainder_metavar_string.ToObject(), πTemp024); πE != nil {
						continue
					}
					// line 4743: def test_nargs_remainder_metavar_length0(self):
					πF.SetLineno(4743)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp025 = πg.NewFunction(πg.NewCode("test_nargs_remainder_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4744: self.do_test_no_exception(nargs="...", metavar=tuple())
							πF.SetLineno(4744)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("...").ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_remainder_metavar_length0.ToObject(), πTemp025); πE != nil {
						continue
					}
					// line 4746: def test_nargs_remainder_metavar_length1(self):
					πF.SetLineno(4746)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp026 = πg.NewFunction(πg.NewCode("test_nargs_remainder_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4747: self.do_test_no_exception(nargs="...", metavar=("1"))
							πF.SetLineno(4747)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("...").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_remainder_metavar_length1.ToObject(), πTemp026); πE != nil {
						continue
					}
					// line 4749: def test_nargs_remainder_metavar_length2(self):
					πF.SetLineno(4749)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp027 = πg.NewFunction(πg.NewCode("test_nargs_remainder_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4750: self.do_test_no_exception(nargs="...", metavar=("1", "2"))
							πF.SetLineno(4750)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("...").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_remainder_metavar_length2.ToObject(), πTemp027); πE != nil {
						continue
					}
					// line 4752: def test_nargs_remainder_metavar_length3(self):
					πF.SetLineno(4752)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp028 = πg.NewFunction(πg.NewCode("test_nargs_remainder_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4753: self.do_test_no_exception(nargs="...", metavar=("1", "2", "3"))
							πF.SetLineno(4753)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("...").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_remainder_metavar_length3.ToObject(), πTemp028); πE != nil {
						continue
					}
					// line 4757: def test_nargs_parser_metavar_string(self):
					πF.SetLineno(4757)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp029 = πg.NewFunction(πg.NewCode("test_nargs_parser_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4758: self.do_test_no_exception(nargs="A...", metavar="1")
							πF.SetLineno(4758)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("A...").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_parser_metavar_string.ToObject(), πTemp029); πE != nil {
						continue
					}
					// line 4760: def test_nargs_parser_metavar_length0(self):
					πF.SetLineno(4760)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp030 = πg.NewFunction(πg.NewCode("test_nargs_parser_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4761: self.do_test_exception(nargs="A...", metavar=tuple())
							πF.SetLineno(4761)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewStr("A...").ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_parser_metavar_length0.ToObject(), πTemp030); πE != nil {
						continue
					}
					// line 4763: def test_nargs_parser_metavar_length1(self):
					πF.SetLineno(4763)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp031 = πg.NewFunction(πg.NewCode("test_nargs_parser_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4764: self.do_test_no_exception(nargs="A...", metavar=("1"))
							πF.SetLineno(4764)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewStr("A...").ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_parser_metavar_length1.ToObject(), πTemp031); πE != nil {
						continue
					}
					// line 4766: def test_nargs_parser_metavar_length2(self):
					πF.SetLineno(4766)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp032 = πg.NewFunction(πg.NewCode("test_nargs_parser_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4767: self.do_test_exception(nargs="A...", metavar=("1", "2"))
							πF.SetLineno(4767)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("A...").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_parser_metavar_length2.ToObject(), πTemp032); πE != nil {
						continue
					}
					// line 4769: def test_nargs_parser_metavar_length3(self):
					πF.SetLineno(4769)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp033 = πg.NewFunction(πg.NewCode("test_nargs_parser_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4770: self.do_test_exception(nargs="A...", metavar=("1", "2", "3"))
							πF.SetLineno(4770)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewStr("A...").ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_parser_metavar_length3.ToObject(), πTemp033); πE != nil {
						continue
					}
					// line 4774: def test_nargs_1_metavar_string(self):
					πF.SetLineno(4774)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp034 = πg.NewFunction(πg.NewCode("test_nargs_1_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4775: self.do_test_no_exception(nargs=1, metavar="1")
							πF.SetLineno(4775)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewInt(1).ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_1_metavar_string.ToObject(), πTemp034); πE != nil {
						continue
					}
					// line 4777: def test_nargs_1_metavar_length0(self):
					πF.SetLineno(4777)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp035 = πg.NewFunction(πg.NewCode("test_nargs_1_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4778: self.do_test_exception(nargs=1, metavar=tuple())
							πF.SetLineno(4778)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewInt(1).ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_1_metavar_length0.ToObject(), πTemp035); πE != nil {
						continue
					}
					// line 4780: def test_nargs_1_metavar_length1(self):
					πF.SetLineno(4780)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp036 = πg.NewFunction(πg.NewCode("test_nargs_1_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4781: self.do_test_no_exception(nargs=1, metavar=("1"))
							πF.SetLineno(4781)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewInt(1).ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_1_metavar_length1.ToObject(), πTemp036); πE != nil {
						continue
					}
					// line 4783: def test_nargs_1_metavar_length2(self):
					πF.SetLineno(4783)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp037 = πg.NewFunction(πg.NewCode("test_nargs_1_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4784: self.do_test_exception(nargs=1, metavar=("1", "2"))
							πF.SetLineno(4784)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewInt(1).ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_1_metavar_length2.ToObject(), πTemp037); πE != nil {
						continue
					}
					// line 4786: def test_nargs_1_metavar_length3(self):
					πF.SetLineno(4786)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp038 = πg.NewFunction(πg.NewCode("test_nargs_1_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4787: self.do_test_exception(nargs=1, metavar=("1", "2", "3"))
							πF.SetLineno(4787)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewInt(1).ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_1_metavar_length3.ToObject(), πTemp038); πE != nil {
						continue
					}
					// line 4791: def test_nargs_2_metavar_string(self):
					πF.SetLineno(4791)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp039 = πg.NewFunction(πg.NewCode("test_nargs_2_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4792: self.do_test_no_exception(nargs=2, metavar="1")
							πF.SetLineno(4792)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewInt(2).ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_2_metavar_string.ToObject(), πTemp039); πE != nil {
						continue
					}
					// line 4794: def test_nargs_2_metavar_length0(self):
					πF.SetLineno(4794)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp040 = πg.NewFunction(πg.NewCode("test_nargs_2_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4795: self.do_test_exception(nargs=2, metavar=tuple())
							πF.SetLineno(4795)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewInt(2).ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_2_metavar_length0.ToObject(), πTemp040); πE != nil {
						continue
					}
					// line 4797: def test_nargs_2_metavar_length1(self):
					πF.SetLineno(4797)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp041 = πg.NewFunction(πg.NewCode("test_nargs_2_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4798: self.do_test_no_exception(nargs=2, metavar=("1"))
							πF.SetLineno(4798)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewInt(2).ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_2_metavar_length1.ToObject(), πTemp041); πE != nil {
						continue
					}
					// line 4800: def test_nargs_2_metavar_length2(self):
					πF.SetLineno(4800)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp042 = πg.NewFunction(πg.NewCode("test_nargs_2_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4801: self.do_test_no_exception(nargs=2, metavar=("1", "2"))
							πF.SetLineno(4801)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewInt(2).ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_2_metavar_length2.ToObject(), πTemp042); πE != nil {
						continue
					}
					// line 4803: def test_nargs_2_metavar_length3(self):
					πF.SetLineno(4803)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp043 = πg.NewFunction(πg.NewCode("test_nargs_2_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4804: self.do_test_exception(nargs=2, metavar=("1", "2", "3"))
							πF.SetLineno(4804)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewInt(2).ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_2_metavar_length3.ToObject(), πTemp043); πE != nil {
						continue
					}
					// line 4808: def test_nargs_3_metavar_string(self):
					πF.SetLineno(4808)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp044 = πg.NewFunction(πg.NewCode("test_nargs_3_metavar_string", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4809: self.do_test_no_exception(nargs=3, metavar="1")
							πF.SetLineno(4809)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewInt(3).ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_3_metavar_string.ToObject(), πTemp044); πE != nil {
						continue
					}
					// line 4811: def test_nargs_3_metavar_length0(self):
					πF.SetLineno(4811)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp045 = πg.NewFunction(πg.NewCode("test_nargs_3_metavar_length0", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4812: self.do_test_exception(nargs=3, metavar=tuple())
							πF.SetLineno(4812)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtuple); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nargs", πg.NewInt(3).ToObject()},
								{"metavar", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_3_metavar_length0.ToObject(), πTemp045); πE != nil {
						continue
					}
					// line 4814: def test_nargs_3_metavar_length1(self):
					πF.SetLineno(4814)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp046 = πg.NewFunction(πg.NewCode("test_nargs_3_metavar_length1", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4815: self.do_test_no_exception(nargs=3, metavar=("1"))
							πF.SetLineno(4815)
							πTemp001 = πg.KWArgs{
								{"nargs", πg.NewInt(3).ToObject()},
								{"metavar", ß1.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_3_metavar_length1.ToObject(), πTemp046); πE != nil {
						continue
					}
					// line 4817: def test_nargs_3_metavar_length2(self):
					πF.SetLineno(4817)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp047 = πg.NewFunction(πg.NewCode("test_nargs_3_metavar_length2", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4818: self.do_test_exception(nargs=3, metavar=("1", "2"))
							πF.SetLineno(4818)
							πTemp001 = πg.NewTuple2(ß1.ToObject(), ß2.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewInt(3).ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_3_metavar_length2.ToObject(), πTemp047); πE != nil {
						continue
					}
					// line 4820: def test_nargs_3_metavar_length3(self):
					πF.SetLineno(4820)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp048 = πg.NewFunction(πg.NewCode("test_nargs_3_metavar_length3", "build/src/__python__/test/test_argparse.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 4821: self.do_test_no_exception(nargs=3, metavar=("1", "2", "3"))
							πF.SetLineno(4821)
							πTemp001 = πg.NewTuple3(ß1.ToObject(), ß2.ToObject(), ß3.ToObject()).ToObject()
							πTemp002 = πg.KWArgs{
								{"nargs", πg.NewInt(3).ToObject()},
								{"metavar", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdo_test_no_exception, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_nargs_3_metavar_length3.ToObject(), πTemp048); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp005 == nil {
				πTemp005 = πg.TypeType.ToObject()
			}
			if πTemp006, πE = πTemp005.Call(πF, []*πg.Object{πg.NewStr("TestAddArgumentMetavar").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestAddArgumentMetavar.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 4842: def test_main():
			πF.SetLineno(4842)
			πTemp007 = make([]πg.Param, 0)
			πTemp003 = πg.NewFunction(πg.NewCode("test_main", "build/src/__python__/test/test_argparse.py", πTemp007, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Dict
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πR *πg.Object; _ = πR
				var πE *πg.BaseException; _ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 4850: test_support.run_unittest(__name__)
					πF.SetLineno(4850)
					πTemp001 = πF.MakeArgs(1)
					if πTemp002, πE = πg.ResolveGlobal(πF, ß__name__); πE != nil {
						continue
					}
					πTemp001[0] = πTemp002
					if πTemp002, πE = πg.ResolveGlobal(πF, ßtest_support); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßrun_unittest, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					// line 4852: RFile.seen = {}
					πF.SetLineno(4852)
					πTemp004 = πg.NewDict()
					πTemp002 = πTemp004.ToObject()
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveGlobal(πF, ßRFile); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp005, ßseen, πTemp003); πE != nil {
						continue
					}
					// line 4853: WFile.seen = set()
					πF.SetLineno(4853)
					if πTemp002, πE = πg.ResolveGlobal(πF, ßset); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveGlobal(πF, ßWFile); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp005, ßseen, πTemp002); πE != nil {
						continue
					}
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßtest_main.ToObject(), πTemp003); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ß__name__); πE != nil {
				continue
			}
			if πTemp005, πE = πg.Eq(πF, πTemp006, ß__main__.ToObject()); πE != nil {
				continue
			}
			if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
				continue
			}
			if πTemp009 {
				goto Label1
			}
			goto Label2
			// line 4857: if __name__ == '__main__':
			πF.SetLineno(4857)
		Label1:
			// line 4858: test_main()
			πF.SetLineno(4858)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßtest_main); πE != nil {
				continue
			}
			if πTemp006, πE = πTemp005.Call(πF, nil, nil); πE != nil {
				continue
			}
			goto Label2
		Label2:
		}
		return nil, πE
	})
	πg.RegisterModule("test.test_argparse", Code)
}
