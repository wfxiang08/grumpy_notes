package test_datetime
import πg "grumpy"
var Code *πg.Code
func init() {
	Code = πg.NewCode("<module>", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
		var πR *πg.Object; _ = πR
		var πE *πg.BaseException; _ = πE
		ß := πg.InternStr("")
		ß03 := πg.InternStr("03")
		ß1900 := πg.InternStr("1900")
		ß42 := πg.InternStr("42")
		ß44 := πg.InternStr("44")
		ß9 := πg.InternStr("9")
		ßA := πg.InternStr("A")
		ßB := πg.InternStr("B")
		ßCDT := πg.InternStr("CDT")
		ßCST := πg.InternStr("CST")
		ßCentral := πg.InternStr("Central")
		ßDAY := πg.InternStr("DAY")
		ßDSTEND := πg.InternStr("DSTEND")
		ßDSTSTART := πg.InternStr("DSTSTART")
		ßEDT := πg.InternStr("EDT")
		ßEST := πg.InternStr("EST")
		ßEastern := πg.InternStr("Eastern")
		ßFEDT := πg.InternStr("FEDT")
		ßFEST := πg.InternStr("FEST")
		ßFEastern := πg.InternStr("FEastern")
		ßFalse := πg.InternStr("False")
		ßFixedOffset := πg.InternStr("FixedOffset")
		ßHOUR := πg.InternStr("HOUR")
		ßHarmlessMixedComparison := πg.InternStr("HarmlessMixedComparison")
		ßMAXYEAR := πg.InternStr("MAXYEAR")
		ßMDT := πg.InternStr("MDT")
		ßMET := πg.InternStr("MET")
		ßMINYEAR := πg.InternStr("MINYEAR")
		ßMST := πg.InternStr("MST")
		ßMountain := πg.InternStr("Mountain")
		ßNone := πg.InternStr("None")
		ßNotByALongShot := πg.InternStr("NotByALongShot")
		ßNotImplementedError := πg.InternStr("NotImplementedError")
		ßOTHERSTUFF := πg.InternStr("OTHERSTUFF")
		ßOddballs := πg.InternStr("Oddballs")
		ßOverflowError := πg.InternStr("OverflowError")
		ßPDT := πg.InternStr("PDT")
		ßPST := πg.InternStr("PST")
		ßPacific := πg.InternStr("Pacific")
		ßPicklableFixedOffset := πg.InternStr("PicklableFixedOffset")
		ßSubclassDate := πg.InternStr("SubclassDate")
		ßSubclassDatetime := πg.InternStr("SubclassDatetime")
		ßSubclassTime := πg.InternStr("SubclassTime")
		ßT := πg.InternStr("T")
		ßTZInfoBase := πg.InternStr("TZInfoBase")
		ßTestCase := πg.InternStr("TestCase")
		ßTestDate := πg.InternStr("TestDate")
		ßTestDateOnly := πg.InternStr("TestDateOnly")
		ßTestDateTime := πg.InternStr("TestDateTime")
		ßTestDateTimeTZ := πg.InternStr("TestDateTimeTZ")
		ßTestModule := πg.InternStr("TestModule")
		ßTestTZInfo := πg.InternStr("TestTZInfo")
		ßTestTime := πg.InternStr("TestTime")
		ßTestTimeDelta := πg.InternStr("TestTimeDelta")
		ßTestTimeTZ := πg.InternStr("TestTimeTZ")
		ßTestTimezoneConversions := πg.InternStr("TestTimezoneConversions")
		ßThree := πg.InternStr("Three")
		ßTrue := πg.InternStr("True")
		ßTypeError := πg.InternStr("TypeError")
		ßUSTimeZone := πg.InternStr("USTimeZone")
		ßUTC := πg.InternStr("UTC")
		ßUTCfake := πg.InternStr("UTCfake")
		ßValueError := πg.InternStr("ValueError")
		ßZERO := πg.InternStr("ZERO")
		ßZeroDivisionError := πg.InternStr("ZeroDivisionError")
		ß__add__ := πg.InternStr("__add__")
		ß__class__ := πg.InternStr("__class__")
		ß__cmp__ := πg.InternStr("__cmp__")
		ß__dstoffset := πg.InternStr("__dstoffset")
		ß__eq__ := πg.InternStr("__eq__")
		ß__format__ := πg.InternStr("__format__")
		ß__hash__ := πg.InternStr("__hash__")
		ß__init__ := πg.InternStr("__init__")
		ß__main__ := πg.InternStr("__main__")
		ß__metaclass__ := πg.InternStr("__metaclass__")
		ß__module__ := πg.InternStr("__module__")
		ß__name := πg.InternStr("__name")
		ß__name__ := πg.InternStr("__name__")
		ß__new__ := πg.InternStr("__new__")
		ß__offset := πg.InternStr("__offset")
		ß__repr__ := πg.InternStr("__repr__")
		ß__str__ := πg.InternStr("__str__")
		ß__sub__ := πg.InternStr("__sub__")
		ßabc := πg.InternStr("abc")
		ßabs := πg.InternStr("abs")
		ßaname := πg.InternStr("aname")
		ßappend := πg.InternStr("append")
		ßas_hours := πg.InternStr("as_hours")
		ßassertAlmostEqual := πg.InternStr("assertAlmostEqual")
		ßassertEqual := πg.InternStr("assertEqual")
		ßassertFalse := πg.InternStr("assertFalse")
		ßassertIn := πg.InternStr("assertIn")
		ßassertIs := πg.InternStr("assertIs")
		ßassertIsInstance := πg.InternStr("assertIsInstance")
		ßassertIsNone := πg.InternStr("assertIsNone")
		ßassertLessEqual := πg.InternStr("assertLessEqual")
		ßassertRaises := πg.InternStr("assertRaises")
		ßassertTrue := πg.InternStr("assertTrue")
		ßastimezone := πg.InternStr("astimezone")
		ßbool := πg.InternStr("bool")
		ßcheckinside := πg.InternStr("checkinside")
		ßcheckoutside := πg.InternStr("checkoutside")
		ßchr := πg.InternStr("chr")
		ßcmp := πg.InternStr("cmp")
		ßcombine := πg.InternStr("combine")
		ßconvert_between_tz_and_utc := πg.InternStr("convert_between_tz_and_utc")
		ßcopy := πg.InternStr("copy")
		ßctime := πg.InternStr("ctime")
		ßdate := πg.InternStr("date")
		ßdatetime := πg.InternStr("datetime")
		ßday := πg.InternStr("day")
		ßdays := πg.InternStr("days")
		ßdivmod := πg.InternStr("divmod")
		ßdst := πg.InternStr("dst")
		ßdstname := πg.InternStr("dstname")
		ßdstoff := πg.InternStr("dstoff")
		ßdston := πg.InternStr("dston")
		ßdstvalue := πg.InternStr("dstvalue")
		ßeval := πg.InternStr("eval")
		ßexpectedFailure := πg.InternStr("expectedFailure")
		ßextra := πg.InternStr("extra")
		ßfail := πg.InternStr("fail")
		ßfirst_sunday_on_or_after := πg.InternStr("first_sunday_on_or_after")
		ßfrom_td := πg.InternStr("from_td")
		ßfromordinal := πg.InternStr("fromordinal")
		ßfromtimestamp := πg.InternStr("fromtimestamp")
		ßfromutc := πg.InternStr("fromutc")
		ßgmtime := πg.InternStr("gmtime")
		ßgrumpy := πg.InternStr("grumpy")
		ßhasattr := πg.InternStr("hasattr")
		ßhash := πg.InternStr("hash")
		ßhour := πg.InternStr("hour")
		ßimpossible := πg.InternStr("impossible")
		ßint := πg.InternStr("int")
		ßisinstance := πg.InternStr("isinstance")
		ßisocalendar := πg.InternStr("isocalendar")
		ßisoformat := πg.InternStr("isoformat")
		ßisoweekday := πg.InternStr("isoweekday")
		ßissubclass := πg.InternStr("issubclass")
		ßk := πg.InternStr("k")
		ßlen := πg.InternStr("len")
		ßlocaltime := πg.InternStr("localtime")
		ßlower := πg.InternStr("lower")
		ßm300 := πg.InternStr("m300")
		ßmap := πg.InternStr("map")
		ßmax := πg.InternStr("max")
		ßmicrosecond := πg.InternStr("microsecond")
		ßmicroseconds := πg.InternStr("microseconds")
		ßmin := πg.InternStr("min")
		ßminute := πg.InternStr("minute")
		ßmktime := πg.InternStr("mktime")
		ßmonth := πg.InternStr("month")
		ßname := πg.InternStr("name")
		ßnewmeth := πg.InternStr("newmeth")
		ßnone := πg.InternStr("none")
		ßnow := πg.InternStr("now")
		ßobject := πg.InternStr("object")
		ßoffset := πg.InternStr("offset")
		ßone := πg.InternStr("one")
		ßpop := πg.InternStr("pop")
		ßrandomtimezone := πg.InternStr("randomtimezone")
		ßrandrange := πg.InternStr("randrange")
		ßrange := πg.InternStr("range")
		ßreal := πg.InternStr("real")
		ßreplace := πg.InternStr("replace")
		ßrepr := πg.InternStr("repr")
		ßreprname := πg.InternStr("reprname")
		ßresolution := πg.InternStr("resolution")
		ßround := πg.InternStr("round")
		ßrun_unittest := πg.InternStr("run_unittest")
		ßsecond := πg.InternStr("second")
		ßseconds := πg.InternStr("seconds")
		ßskip := πg.InternStr("skip")
		ßsleep := πg.InternStr("sleep")
		ßsort := πg.InternStr("sort")
		ßsplit := πg.InternStr("split")
		ßstartswith := πg.InternStr("startswith")
		ßstaticmethod := πg.InternStr("staticmethod")
		ßstdname := πg.InternStr("stdname")
		ßstdoffset := πg.InternStr("stdoffset")
		ßstr := πg.InternStr("str")
		ßstrftime := πg.InternStr("strftime")
		ßsub_var := πg.InternStr("sub_var")
		ßsys := πg.InternStr("sys")
		ßtest_1653736 := πg.InternStr("test_1653736")
		ßtest_argument_passing := πg.InternStr("test_argument_passing")
		ßtest_astimezone := πg.InternStr("test_astimezone")
		ßtest_aware_compare := πg.InternStr("test_aware_compare")
		ßtest_aware_subtract := πg.InternStr("test_aware_subtract")
		ßtest_backdoor_resistance := πg.InternStr("test_backdoor_resistance")
		ßtest_bad_constructor_arguments := πg.InternStr("test_bad_constructor_arguments")
		ßtest_bad_tzinfo_classes := πg.InternStr("test_bad_tzinfo_classes")
		ßtest_basic_attributes := πg.InternStr("test_basic_attributes")
		ßtest_basic_attributes_nonzero := πg.InternStr("test_basic_attributes_nonzero")
		ßtest_bogus_dst := πg.InternStr("test_bogus_dst")
		ßtest_bool := πg.InternStr("test_bool")
		ßtest_bug_1028306 := πg.InternStr("test_bug_1028306")
		ßtest_carries := πg.InternStr("test_carries")
		ßtest_combine := πg.InternStr("test_combine")
		ßtest_compare := πg.InternStr("test_compare")
		ßtest_comparing := πg.InternStr("test_comparing")
		ßtest_computations := πg.InternStr("test_computations")
		ßtest_constants := πg.InternStr("test_constants")
		ßtest_constructor := πg.InternStr("test_constructor")
		ßtest_ctime := πg.InternStr("test_ctime")
		ßtest_delta_non_days_ignored := πg.InternStr("test_delta_non_days_ignored")
		ßtest_disallowed_computations := πg.InternStr("test_disallowed_computations")
		ßtest_easy := πg.InternStr("test_easy")
		ßtest_empty := πg.InternStr("test_empty")
		ßtest_even_more_compare := πg.InternStr("test_even_more_compare")
		ßtest_extract := πg.InternStr("test_extract")
		ßtest_extreme_hashes := πg.InternStr("test_extreme_hashes")
		ßtest_extreme_ordinals := πg.InternStr("test_extreme_ordinals")
		ßtest_extreme_timedelta := πg.InternStr("test_extreme_timedelta")
		ßtest_format := πg.InternStr("test_format")
		ßtest_fromtimestamp := πg.InternStr("test_fromtimestamp")
		ßtest_fromutc := πg.InternStr("test_fromutc")
		ßtest_harmful_mixed_comparison := πg.InternStr("test_harmful_mixed_comparison")
		ßtest_harmless_mixed_comparison := πg.InternStr("test_harmless_mixed_comparison")
		ßtest_hash_edge_cases := πg.InternStr("test_hash_edge_cases")
		ßtest_hash_equality := πg.InternStr("test_hash_equality")
		ßtest_insane_fromtimestamp := πg.InternStr("test_insane_fromtimestamp")
		ßtest_insane_utcfromtimestamp := πg.InternStr("test_insane_utcfromtimestamp")
		ßtest_iso_long_years := πg.InternStr("test_iso_long_years")
		ßtest_isocalendar := πg.InternStr("test_isocalendar")
		ßtest_isoformat := πg.InternStr("test_isoformat")
		ßtest_main := πg.InternStr("test_main")
		ßtest_massive_normalization := πg.InternStr("test_massive_normalization")
		ßtest_microsecond_rounding := πg.InternStr("test_microsecond_rounding")
		ßtest_mixed_compare := πg.InternStr("test_mixed_compare")
		ßtest_more_astimezone := πg.InternStr("test_more_astimezone")
		ßtest_more_bool := πg.InternStr("test_more_bool")
		ßtest_more_compare := πg.InternStr("test_more_compare")
		ßtest_more_ctime := πg.InternStr("test_more_ctime")
		ßtest_more_strftime := πg.InternStr("test_more_strftime")
		ßtest_more_timetuple := πg.InternStr("test_more_timetuple")
		ßtest_non_abstractness := πg.InternStr("test_non_abstractness")
		ßtest_normal := πg.InternStr("test_normal")
		ßtest_ordinal_conversions := πg.InternStr("test_ordinal_conversions")
		ßtest_overflow := πg.InternStr("test_overflow")
		ßtest_replace := πg.InternStr("test_replace")
		ßtest_repr := πg.InternStr("test_repr")
		ßtest_resolution_info := πg.InternStr("test_resolution_info")
		ßtest_roundtrip := πg.InternStr("test_roundtrip")
		ßtest_str := πg.InternStr("test_str")
		ßtest_strftime := πg.InternStr("test_strftime")
		ßtest_strftime_out_of_range := πg.InternStr("test_strftime_out_of_range")
		ßtest_strftime_with_bad_tzname_replace := πg.InternStr("test_strftime_with_bad_tzname_replace")
		ßtest_subclass_date := πg.InternStr("test_subclass_date")
		ßtest_subclass_datetime := πg.InternStr("test_subclass_datetime")
		ßtest_subclass_datetimetz := πg.InternStr("test_subclass_datetimetz")
		ßtest_subclass_must_override := πg.InternStr("test_subclass_must_override")
		ßtest_subclass_time := πg.InternStr("test_subclass_time")
		ßtest_subclass_timedelta := πg.InternStr("test_subclass_timedelta")
		ßtest_subclass_timetz := πg.InternStr("test_subclass_timetz")
		ßtest_support := πg.InternStr("test_support")
		ßtest_timetuple := πg.InternStr("test_timetuple")
		ßtest_today := πg.InternStr("test_today")
		ßtest_total_seconds := πg.InternStr("test_total_seconds")
		ßtest_tricky := πg.InternStr("test_tricky")
		ßtest_trivial := πg.InternStr("test_trivial")
		ßtest_tz_aware_arithmetic := πg.InternStr("test_tz_aware_arithmetic")
		ßtest_tz_independent_comparing := πg.InternStr("test_tz_independent_comparing")
		ßtest_tzinfo_classes := πg.InternStr("test_tzinfo_classes")
		ßtest_tzinfo_fromtimestamp := πg.InternStr("test_tzinfo_fromtimestamp")
		ßtest_tzinfo_isoformat := πg.InternStr("test_tzinfo_isoformat")
		ßtest_tzinfo_now := πg.InternStr("test_tzinfo_now")
		ßtest_tzinfo_timetuple := πg.InternStr("test_tzinfo_timetuple")
		ßtest_tzinfo_utcfromtimestamp := πg.InternStr("test_tzinfo_utcfromtimestamp")
		ßtest_tzinfo_utcnow := πg.InternStr("test_tzinfo_utcnow")
		ßtest_utc_offset_out_of_bounds := πg.InternStr("test_utc_offset_out_of_bounds")
		ßtest_utcfromtimestamp := πg.InternStr("test_utcfromtimestamp")
		ßtest_utcnow := πg.InternStr("test_utcnow")
		ßtest_utctimetuple := πg.InternStr("test_utctimetuple")
		ßtest_weekday := πg.InternStr("test_weekday")
		ßtest_zones := πg.InternStr("test_zones")
		ßtheAnswer := πg.InternStr("theAnswer")
		ßtheclass := πg.InternStr("theclass")
		ßtime := πg.InternStr("time")
		ßtimedelta := πg.InternStr("timedelta")
		ßtimetuple := πg.InternStr("timetuple")
		ßtimetz := πg.InternStr("timetz")
		ßtm_hour := πg.InternStr("tm_hour")
		ßtm_isdst := πg.InternStr("tm_isdst")
		ßtm_mday := πg.InternStr("tm_mday")
		ßtm_min := πg.InternStr("tm_min")
		ßtm_mon := πg.InternStr("tm_mon")
		ßtm_sec := πg.InternStr("tm_sec")
		ßtm_wday := πg.InternStr("tm_wday")
		ßtm_yday := πg.InternStr("tm_yday")
		ßtm_year := πg.InternStr("tm_year")
		ßtoday := πg.InternStr("today")
		ßtoordinal := πg.InternStr("toordinal")
		ßtotal_seconds := πg.InternStr("total_seconds")
		ßtwo := πg.InternStr("two")
		ßtype := πg.InternStr("type")
		ßtz := πg.InternStr("tz")
		ßtzinfo := πg.InternStr("tzinfo")
		ßtzname := πg.InternStr("tzname")
		ßunittest := πg.InternStr("unittest")
		ßuofs := πg.InternStr("uofs")
		ßutc := πg.InternStr("utc")
		ßutc_fake := πg.InternStr("utc_fake")
		ßutc_real := πg.InternStr("utc_real")
		ßutcfromtimestamp := πg.InternStr("utcfromtimestamp")
		ßutcnow := πg.InternStr("utcnow")
		ßutcoffset := πg.InternStr("utcoffset")
		ßutctimetuple := πg.InternStr("utctimetuple")
		ßverify_field_equality := πg.InternStr("verify_field_equality")
		ßweekday := πg.InternStr("weekday")
		ßweirdtz := πg.InternStr("weirdtz")
		ßx := πg.InternStr("x")
		ßxrange := πg.InternStr("xrange")
		ßyear := πg.InternStr("year")
		ßzip := πg.InternStr("zip")
		var πTemp001 *πg.Object
		_ = πTemp001
		var πTemp002 []*πg.Object
		_ = πTemp002
		var πTemp003 *πg.Object
		_ = πTemp003
		var πTemp004 *πg.Object
		_ = πTemp004
		var πTemp005 *πg.Object
		_ = πTemp005
		var πTemp006 *πg.Object
		_ = πTemp006
		var πTemp007 *πg.Object
		_ = πTemp007
		var πTemp008 *πg.Object
		_ = πTemp008
		var πTemp009 *πg.Object
		_ = πTemp009
		var πTemp010 *πg.Dict
		_ = πTemp010
		var πTemp011 []*πg.Object
		_ = πTemp011
		var πTemp012 []πg.Param
		_ = πTemp012
		var πTemp013 πg.KWArgs
		_ = πTemp013
		var πTemp014 bool
		_ = πTemp014
		for ; πF.State() >= 0; πF.PopCheckpoint() {
			switch πF.State() {
			case 0:
			default: panic("unexpected function state")
			}
			// line 1: """Test date/time type.
			πF.SetLineno(1)
			// line 6: import sys
			πF.SetLineno(6)
			if πTemp002, πE = πg.ImportModule(πF, "sys"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßsys.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 9: import unittest
			πF.SetLineno(9)
			if πTemp002, πE = πg.ImportModule(πF, "unittest"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßunittest.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 11: from test import test_support
			πF.SetLineno(11)
			if πTemp002, πE = πg.ImportModule(πF, "test.test_support"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßtest_support.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 18: import datetime
			πF.SetLineno(18)
			if πTemp002, πE = πg.ImportModule(πF, "datetime"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßdatetime.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 19: MINYEAR, MAXYEAR, timedelta, tzinfo, time, date, datetime = \
			πF.SetLineno(19)
			πTemp002 = make([]*πg.Object, 7)
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßMINYEAR, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßMAXYEAR, nil); πE != nil {
				continue
			}
			πTemp002[1] = πTemp004
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßtimedelta, nil); πE != nil {
				continue
			}
			πTemp002[2] = πTemp004
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßtzinfo, nil); πE != nil {
				continue
			}
			πTemp002[3] = πTemp004
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßtime, nil); πE != nil {
				continue
			}
			πTemp002[4] = πTemp004
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßdate, nil); πE != nil {
				continue
			}
			πTemp002[5] = πTemp004
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßdatetime, nil); πE != nil {
				continue
			}
			πTemp002[6] = πTemp004
			πTemp001 = πg.NewTuple(πTemp002...).ToObject()
			if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp003}, πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp007}, πg.TieTarget{Target: &πTemp008}, πg.TieTarget{Target: &πTemp009}}}, πTemp001); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßMINYEAR.ToObject(), πTemp003); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßMAXYEAR.ToObject(), πTemp004); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßtimedelta.ToObject(), πTemp005); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßtzinfo.ToObject(), πTemp006); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßtime.ToObject(), πTemp007); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßdate.ToObject(), πTemp008); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßdatetime.ToObject(), πTemp009); πE != nil {
				continue
			}
			// line 31: OTHERSTUFF = (10, 10L, 34.5, "abc", {}, [], ())
			πF.SetLineno(31)
			πTemp002 = make([]*πg.Object, 7)
			πTemp002[0] = πg.NewInt(10).ToObject()
			πTemp002[1] = πg.NewLongFromBytes([]byte{0xa,}).ToObject()
			πTemp002[2] = πg.NewFloat(34.5).ToObject()
			πTemp002[3] = ßabc.ToObject()
			πTemp010 = πg.NewDict()
			πTemp003 = πTemp010.ToObject()
			πTemp002[4] = πTemp003
			πTemp011 = make([]*πg.Object, 0)
			πTemp003 = πg.NewList(πTemp011...).ToObject()
			πTemp002[5] = πTemp003
			πTemp003 = πg.NewTuple0().ToObject()
			πTemp002[6] = πTemp003
			πTemp001 = πg.NewTuple(πTemp002...).ToObject()
			if πE = πF.Globals().SetItem(πF, ßOTHERSTUFF.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 37: class TestModule(unittest.TestCase):
			πF.SetLineno(37)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestModule", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 39: def test_constants(self):
					πF.SetLineno(39)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_constants", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdatetime *πg.Object = πg.UnboundLocal; _ = µdatetime
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 40: import datetime
							πF.SetLineno(40)
							if πTemp002, πE = πg.ImportModule(πF, "datetime"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µdatetime = πTemp001
							// line 41: self.assertEqual(datetime.MINYEAR, 1)
							πF.SetLineno(41)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdatetime, "datetime"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdatetime, ßMINYEAR, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp002[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 42: self.assertEqual(datetime.MAXYEAR, 9999)
							πF.SetLineno(42)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdatetime, "datetime"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdatetime, ßMAXYEAR, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp002[1] = πg.NewInt(9999).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_constants.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestModule").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestModule.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 47: class FixedOffset(tzinfo):
			πF.SetLineno(47)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("FixedOffset", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 48: def __init__(self, offset, name, dstoffset=42):
					πF.SetLineno(48)
					πTemp002 = make([]πg.Param, 4)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "offset", Def: nil}
					πTemp002[2] = πg.Param{Name: "name", Def: nil}
					πTemp002[3] = πg.Param{Name: "dstoffset", Def: πg.NewInt(42).ToObject()}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µoffset *πg.Object = πArgs[1]; _ = µoffset
						var µname *πg.Object = πArgs[2]; _ = µname
						var µdstoffset *πg.Object = πArgs[3]; _ = µdstoffset
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							πTemp001[0] = µoffset
							if πTemp002, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 49: if isinstance(offset, int):
							πF.SetLineno(49)
						Label1:
							// line 50: offset = timedelta(minutes=offset)
							πF.SetLineno(50)
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"minutes", µoffset},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µoffset = πTemp003
							goto Label2
						Label2:
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdstoffset, "dstoffset"); πE != nil {
								continue
							}
							πTemp001[0] = µdstoffset
							if πTemp002, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							goto Label4
							// line 51: if isinstance(dstoffset, int):
							πF.SetLineno(51)
						Label3:
							// line 52: dstoffset = timedelta(minutes=dstoffset)
							πF.SetLineno(52)
							if πE = πg.CheckLocal(πF, µdstoffset, "dstoffset"); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"minutes", µdstoffset},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µdstoffset = πTemp003
							goto Label4
						Label4:
							// line 53: self.__offset = offset
							πF.SetLineno(53)
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µoffset); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß__offset, πTemp002); πE != nil {
								continue
							}
							// line 54: self.__name = name
							πF.SetLineno(54)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µname); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß__name, πTemp002); πE != nil {
								continue
							}
							// line 55: self.__dstoffset = dstoffset
							πF.SetLineno(55)
							if πE = πg.CheckLocal(πF, µdstoffset, "dstoffset"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µdstoffset); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß__dstoffset, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 56: def __repr__(self):
					πF.SetLineno(56)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("__repr__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 57: return self.__name.lower()
							πF.SetLineno(57)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß__name, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßlower, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__repr__.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 58: def utcoffset(self, dt):
					πF.SetLineno(58)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "dt", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 59: return self.__offset
							πF.SetLineno(59)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß__offset, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 60: def tzname(self, dt):
					πF.SetLineno(60)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "dt", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 61: return self.__name
							πF.SetLineno(61)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß__name, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 62: def dst(self, dt):
					πF.SetLineno(62)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "dt", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 63: return self.__dstoffset
							πF.SetLineno(63)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß__dstoffset, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp006); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("FixedOffset").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßFixedOffset.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 65: class PicklableFixedOffset(FixedOffset):
			πF.SetLineno(65)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("PicklableFixedOffset", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 66: def __init__(self, offset=None, name=None, dstoffset=None):
					πF.SetLineno(66)
					πTemp002 = make([]πg.Param, 4)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[1] = πg.Param{Name: "offset", Def: πTemp003}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "name", Def: πTemp003}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[3] = πg.Param{Name: "dstoffset", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µoffset *πg.Object = πArgs[1]; _ = µoffset
						var µname *πg.Object = πArgs[2]; _ = µname
						var µdstoffset *πg.Object = πArgs[3]; _ = µdstoffset
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 67: FixedOffset.__init__(self, offset, name, dstoffset)
							πF.SetLineno(67)
							πTemp001 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							πTemp001[1] = µoffset
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							πTemp001[2] = µname
							if πE = πg.CheckLocal(πF, µdstoffset, "dstoffset"); πE != nil {
								continue
							}
							πTemp001[3] = µdstoffset
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ß__init__, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("PicklableFixedOffset").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßPicklableFixedOffset.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 69: class TestTZInfo(unittest.TestCase):
			πF.SetLineno(69)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTZInfo", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 71: def test_non_abstractness(self):
					πF.SetLineno(71)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_non_abstractness", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µuseless *πg.Object = πg.UnboundLocal; _ = µuseless
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 75: useless = tzinfo()
							πF.SetLineno(75)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µuseless = πTemp002
							// line 76: dt = datetime.max
							πF.SetLineno(76)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßmax, nil); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 77: self.assertRaises(NotImplementedError, useless.tzname, dt)
							πF.SetLineno(77)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µuseless, "useless"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µuseless, ßtzname, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[2] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 78: self.assertRaises(NotImplementedError, useless.utcoffset, dt)
							πF.SetLineno(78)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µuseless, "useless"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µuseless, ßutcoffset, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[2] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 79: self.assertRaises(NotImplementedError, useless.dst, dt)
							πF.SetLineno(79)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µuseless, "useless"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µuseless, ßdst, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[2] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_non_abstractness.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 81: def test_subclass_must_override(self):
					πF.SetLineno(81)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_subclass_must_override", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µNotEnough *πg.Object = πg.UnboundLocal; _ = µNotEnough
						var µne *πg.Object = πg.UnboundLocal; _ = µne
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 82: class NotEnough(tzinfo):
							πF.SetLineno(82)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("NotEnough", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 83: def __init__(self, offset, name):
									πF.SetLineno(83)
									πTemp002 = make([]πg.Param, 3)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "offset", Def: nil}
									πTemp002[2] = πg.Param{Name: "name", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µoffset *πg.Object = πArgs[1]; _ = µoffset
										var µname *πg.Object = πArgs[2]; _ = µname
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 84: self.__offset = offset
											πF.SetLineno(84)
											if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µoffset); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ß__offset, πTemp001); πE != nil {
												continue
											}
											// line 85: self.__name = name
											πF.SetLineno(85)
											if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µname); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ß__name, πTemp001); πE != nil {
												continue
											}
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("NotEnough").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µNotEnough = πTemp005
							// line 86: self.assertTrue(issubclass(NotEnough, tzinfo))
							πF.SetLineno(86)
							πTemp003 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µNotEnough, "NotEnough"); πE != nil {
								continue
							}
							πTemp006[0] = µNotEnough
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp006[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßissubclass); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 87: ne = NotEnough(3, "NotByALongShot")
							πF.SetLineno(87)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(3).ToObject()
							πTemp003[1] = ßNotByALongShot.ToObject()
							if πE = πg.CheckLocal(πF, µNotEnough, "NotEnough"); πE != nil {
								continue
							}
							if πTemp002, πE = µNotEnough.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µne = πTemp002
							// line 88: self.assertIsInstance(ne, tzinfo)
							πF.SetLineno(88)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µne, "ne"); πE != nil {
								continue
							}
							πTemp003[0] = µne
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 90: dt = datetime.now()
							πF.SetLineno(90)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßnow, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 91: self.assertRaises(NotImplementedError, ne.tzname, dt)
							πF.SetLineno(91)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µne, "ne"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µne, ßtzname, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[2] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 92: self.assertRaises(NotImplementedError, ne.utcoffset, dt)
							πF.SetLineno(92)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µne, "ne"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µne, ßutcoffset, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[2] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 93: self.assertRaises(NotImplementedError, ne.dst, dt)
							πF.SetLineno(93)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µne, "ne"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µne, ßdst, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[2] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subclass_must_override.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 95: def test_normal(self):
					πF.SetLineno(95)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_normal", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µfo *πg.Object = πg.UnboundLocal; _ = µfo
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 96: fo = FixedOffset(3, "Three")
							πF.SetLineno(96)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(3).ToObject()
							πTemp001[1] = ßThree.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfo = πTemp003
							// line 97: self.assertIsInstance(fo, tzinfo)
							πF.SetLineno(97)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µfo, "fo"); πE != nil {
								continue
							}
							πTemp001[0] = µfo
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßnow, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πTemp004, πTemp005).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µdt = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 99: self.assertEqual(fo.utcoffset(dt), timedelta(minutes=3))
							πF.SetLineno(99)
							πTemp001 = πF.MakeArgs(2)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp008[0] = µdt
							if πE = πg.CheckLocal(πF, µfo, "fo"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfo, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp001[0] = πTemp004
							πTemp009 = πg.KWArgs{
								{"minutes", πg.NewInt(3).ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp009); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 100: self.assertEqual(fo.tzname(dt), "Three")
							πF.SetLineno(100)
							πTemp001 = πF.MakeArgs(2)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp008[0] = µdt
							if πE = πg.CheckLocal(πF, µfo, "fo"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfo, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp001[0] = πTemp004
							πTemp001[1] = ßThree.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 101: self.assertEqual(fo.dst(dt), timedelta(minutes=42))
							πF.SetLineno(101)
							πTemp001 = πF.MakeArgs(2)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp008[0] = µdt
							if πE = πg.CheckLocal(πF, µfo, "fo"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfo, ßdst, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp001[0] = πTemp004
							πTemp009 = πg.KWArgs{
								{"minutes", πg.NewInt(42).ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp009); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_normal.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestTZInfo").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTZInfo.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 134: class HarmlessMixedComparison(object):
			πF.SetLineno(134)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("HarmlessMixedComparison", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 140: def test_harmless_mixed_comparison(self):
					πF.SetLineno(140)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_harmless_mixed_comparison", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µme *πg.Object = πg.UnboundLocal; _ = µme
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 141: me = self.theclass(1, 1, 1)
							πF.SetLineno(141)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µme = πTemp003
							// line 143: self.assertFalse(me == ())
							πF.SetLineno(143)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple0().ToObject()
							if πTemp002, πE = πg.Eq(πF, µme, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 144: self.assertTrue(me != ())
							πF.SetLineno(144)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple0().ToObject()
							if πTemp002, πE = πg.NE(πF, µme, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 145: self.assertFalse(() == me)
							πF.SetLineno(145)
							πTemp001 = πF.MakeArgs(1)
							πTemp003 = πg.NewTuple0().ToObject()
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp003, µme); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 146: self.assertTrue(() != me)
							πF.SetLineno(146)
							πTemp001 = πF.MakeArgs(1)
							πTemp003 = πg.NewTuple0().ToObject()
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, πTemp003, µme); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 148: self.assertIn(me, [1, 20L, [], me])
							πF.SetLineno(148)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							πTemp001[0] = µme
							πTemp004 = make([]*πg.Object, 4)
							πTemp004[0] = πg.NewInt(1).ToObject()
							πTemp004[1] = πg.NewLongFromBytes([]byte{0x14,}).ToObject()
							πTemp005 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp005...).ToObject()
							πTemp004[2] = πTemp002
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							πTemp004[3] = µme
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIn, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 149: self.assertIn([], [me, 1, 20L, []])
							πF.SetLineno(149)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							πTemp001[0] = πTemp002
							πTemp004 = make([]*πg.Object, 4)
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							πTemp004[0] = µme
							πTemp004[1] = πg.NewInt(1).ToObject()
							πTemp004[2] = πg.NewLongFromBytes([]byte{0x14,}).ToObject()
							πTemp005 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp005...).ToObject()
							πTemp004[3] = πTemp002
							πTemp002 = πg.NewList(πTemp004...).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIn, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_harmless_mixed_comparison.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 151: def test_harmful_mixed_comparison(self):
					πF.SetLineno(151)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_harmful_mixed_comparison", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µme *πg.Object = πg.UnboundLocal; _ = µme
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []πg.Param
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 152: me = self.theclass(1, 1, 1)
							πF.SetLineno(152)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µme = πTemp003
							// line 154: self.assertRaises(TypeError, lambda: me < ())
							πF.SetLineno(154)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 154: self.assertRaises(TypeError, lambda: me < ())
									πF.SetLineno(154)
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple0().ToObject()
									if πTemp001, πE = πg.LT(πF, µme, πTemp002); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 155: self.assertRaises(TypeError, lambda: me <= ())
							πF.SetLineno(155)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 155: self.assertRaises(TypeError, lambda: me <= ())
									πF.SetLineno(155)
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple0().ToObject()
									if πTemp001, πE = πg.LE(πF, µme, πTemp002); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 156: self.assertRaises(TypeError, lambda: me > ())
							πF.SetLineno(156)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 156: self.assertRaises(TypeError, lambda: me > ())
									πF.SetLineno(156)
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple0().ToObject()
									if πTemp001, πE = πg.GT(πF, µme, πTemp002); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 157: self.assertRaises(TypeError, lambda: me >= ())
							πF.SetLineno(157)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 157: self.assertRaises(TypeError, lambda: me >= ())
									πF.SetLineno(157)
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									πTemp002 = πg.NewTuple0().ToObject()
									if πTemp001, πE = πg.GE(πF, µme, πTemp002); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 159: self.assertRaises(TypeError, lambda: () < me)
							πF.SetLineno(159)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 159: self.assertRaises(TypeError, lambda: () < me)
									πF.SetLineno(159)
									πTemp002 = πg.NewTuple0().ToObject()
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, πTemp002, µme); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 160: self.assertRaises(TypeError, lambda: () <= me)
							πF.SetLineno(160)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 160: self.assertRaises(TypeError, lambda: () <= me)
									πF.SetLineno(160)
									πTemp002 = πg.NewTuple0().ToObject()
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, πTemp002, µme); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 161: self.assertRaises(TypeError, lambda: () > me)
							πF.SetLineno(161)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 161: self.assertRaises(TypeError, lambda: () > me)
									πF.SetLineno(161)
									πTemp002 = πg.NewTuple0().ToObject()
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, πTemp002, µme); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 162: self.assertRaises(TypeError, lambda: () >= me)
							πF.SetLineno(162)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 162: self.assertRaises(TypeError, lambda: () >= me)
									πF.SetLineno(162)
									πTemp002 = πg.NewTuple0().ToObject()
									if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, πTemp002, µme); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 164: self.assertRaises(TypeError, cmp, (), me)
							πF.SetLineno(164)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp002 = πg.NewTuple0().ToObject()
							πTemp001[2] = πTemp002
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							πTemp001[3] = µme
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 165: self.assertRaises(TypeError, cmp, me, ())
							πF.SetLineno(165)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µme, "me"); πE != nil {
								continue
							}
							πTemp001[2] = µme
							πTemp002 = πg.NewTuple0().ToObject()
							πTemp001[3] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_harmful_mixed_comparison.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("HarmlessMixedComparison").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßHarmlessMixedComparison.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 170: class TestTimeDelta(HarmlessMixedComparison, unittest.TestCase):
			πF.SetLineno(170)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßHarmlessMixedComparison); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[1] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTimeDelta", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 172: theclass = timedelta
					πF.SetLineno(172)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßtimedelta); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßtheclass.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 174: def test_constructor(self):
					πF.SetLineno(174)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_constructor", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µeq *πg.Object = πg.UnboundLocal; _ = µeq
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 175: eq = self.assertEqual
							πF.SetLineno(175)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							µeq = πTemp001
							// line 176: td = timedelta
							πF.SetLineno(176)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 179: eq(td(), td(weeks=0, days=0, hours=0, minutes=0, seconds=0,
							πF.SetLineno(179)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"weeks", πg.NewInt(0).ToObject()},
								{"days", πg.NewInt(0).ToObject()},
								{"hours", πg.NewInt(0).ToObject()},
								{"minutes", πg.NewInt(0).ToObject()},
								{"seconds", πg.NewInt(0).ToObject()},
								{"milliseconds", πg.NewInt(0).ToObject()},
								{"microseconds", πg.NewInt(0).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 181: eq(td(1), td(days=1))
							πF.SetLineno(181)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 182: eq(td(0, 1), td(seconds=1))
							πF.SetLineno(182)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"seconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 183: eq(td(0, 0, 1), td(microseconds=1))
							πF.SetLineno(183)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 184: eq(td(weeks=1), td(days=7))
							πF.SetLineno(184)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"weeks", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"days", πg.NewInt(7).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 185: eq(td(days=1), td(hours=24))
							πF.SetLineno(185)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"hours", πg.NewInt(24).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 186: eq(td(hours=1), td(minutes=60))
							πF.SetLineno(186)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"hours", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"minutes", πg.NewInt(60).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 187: eq(td(minutes=1), td(seconds=60))
							πF.SetLineno(187)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"minutes", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"seconds", πg.NewInt(60).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 188: eq(td(seconds=1), td(milliseconds=1000))
							πF.SetLineno(188)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"seconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"milliseconds", πg.NewInt(1000).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 189: eq(td(milliseconds=1), td(microseconds=1000))
							πF.SetLineno(189)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"milliseconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"microseconds", πg.NewInt(1000).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 192: eq(td(weeks=1.0/7), td(days=1))
							πF.SetLineno(192)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(1.0).ToObject(), πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"weeks", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 193: eq(td(days=1.0/24), td(hours=1))
							πF.SetLineno(193)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(1.0).ToObject(), πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"days", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"hours", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 194: eq(td(hours=1.0/60), td(minutes=1))
							πF.SetLineno(194)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(1.0).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"hours", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"minutes", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 195: eq(td(minutes=1.0/60), td(seconds=1))
							πF.SetLineno(195)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(1.0).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"minutes", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"seconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 196: eq(td(seconds=0.001), td(milliseconds=1))
							πF.SetLineno(196)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"seconds", πg.NewFloat(0.001).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"milliseconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 197: eq(td(milliseconds=0.001), td(microseconds=1))
							πF.SetLineno(197)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πg.KWArgs{
								{"milliseconds", πg.NewFloat(0.001).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_constructor.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 199: def test_computations(self):
					πF.SetLineno(199)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_computations", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µeq *πg.Object = πg.UnboundLocal; _ = µeq
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var µc *πg.Object = πg.UnboundLocal; _ = µc
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 200: eq = self.assertEqual
							πF.SetLineno(200)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							µeq = πTemp001
							// line 201: td = timedelta
							πF.SetLineno(201)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 203: a = td(7) # One week
							πF.SetLineno(203)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µa = πTemp001
							// line 204: b = td(0, 60) # One minute
							πF.SetLineno(204)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = πg.NewInt(60).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µb = πTemp001
							// line 205: c = td(0, 0, 1000) # One millisecond
							πF.SetLineno(205)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = πg.NewInt(0).ToObject()
							πTemp002[2] = πg.NewInt(1000).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µc = πTemp001
							// line 206: eq(a+b+c, td(7, 60, 1000))
							πF.SetLineno(206)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µb); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, µc); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(7).ToObject()
							πTemp004[1] = πg.NewInt(60).ToObject()
							πTemp004[2] = πg.NewInt(1000).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 207: eq(a-b, td(6, 24*3600 - 60))
							πF.SetLineno(207)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µa, µb); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(6).ToObject()
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 208: eq(-a, td(-7))
							πF.SetLineno(208)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Neg(πF, µa); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 210: eq(-b, td(-1, 24*3600 - 60))
							πF.SetLineno(210)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Neg(πF, µb); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 211: eq(-c, td(-1, 24*3600 - 1, 999000))
							πF.SetLineno(211)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Neg(πF, µc); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							πTemp004[2] = πg.NewInt(999000).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 212: eq(abs(a), a)
							πF.SetLineno(212)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp004[0] = µa
							if πTemp001, πE = πg.ResolveGlobal(πF, ßabs); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp002[1] = µa
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 213: eq(abs(-a), a)
							πF.SetLineno(213)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Neg(πF, µa); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßabs); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp002[1] = µa
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 214: eq(td(6, 24*3600), a)
							πF.SetLineno(214)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(6).ToObject()
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp002[1] = µa
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 215: eq(td(0, 0, 60*1000000), b)
							πF.SetLineno(215)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(60).ToObject(), πg.NewInt(1000000).ToObject()); πE != nil {
								continue
							}
							πTemp004[2] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							πTemp002[1] = µb
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 216: eq(a*10, td(70))
							πF.SetLineno(216)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µa, πg.NewInt(10).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(70).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 217: eq(a*10, 10*a)
							πF.SetLineno(217)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µa, πg.NewInt(10).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(10).ToObject(), µa); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 218: eq(a*10L, 10*a)
							πF.SetLineno(218)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µa, πg.NewLongFromBytes([]byte{0xa,}).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(10).ToObject(), µa); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 219: eq(b*10, td(0, 600))
							πF.SetLineno(219)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µb, πg.NewInt(10).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(600).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 220: eq(10*b, td(0, 600))
							πF.SetLineno(220)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(10).ToObject(), µb); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(600).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 221: eq(b*10L, td(0, 600))
							πF.SetLineno(221)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µb, πg.NewLongFromBytes([]byte{0xa,}).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(600).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 222: eq(c*10, td(0, 0, 10000))
							πF.SetLineno(222)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µc, πg.NewInt(10).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							πTemp004[2] = πg.NewInt(10000).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 223: eq(10*c, td(0, 0, 10000))
							πF.SetLineno(223)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(10).ToObject(), µc); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							πTemp004[2] = πg.NewInt(10000).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 224: eq(c*10L, td(0, 0, 10000))
							πF.SetLineno(224)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µc, πg.NewLongFromBytes([]byte{0xa,}).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							πTemp004[2] = πg.NewInt(10000).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 225: eq(a*-1, -a)
							πF.SetLineno(225)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Neg(πF, µa); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 226: eq(b*-2, -b-b)
							πF.SetLineno(226)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µb, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, µb); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, µb); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 227: eq(c*-2, -c+-c)
							πF.SetLineno(227)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µc, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, µc); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Neg(πF, µc); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 228: eq(b*(60*24), (b*60)*24)
							πF.SetLineno(228)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(60).ToObject(), πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µb, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, µb, πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πTemp003, πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 229: eq(b*(60*24), (60*b)*24)
							πF.SetLineno(229)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(60).ToObject(), πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µb, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(60).ToObject(), µb); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πTemp003, πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 230: eq(c*1000, td(0, 1))
							πF.SetLineno(230)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µc, πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 231: eq(1000*c, td(0, 1))
							πF.SetLineno(231)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(1000).ToObject(), µc); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 232: eq(a//7, td(1))
							πF.SetLineno(232)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.FloorDiv(πF, µa, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 233: eq(b//10, td(0, 6))
							πF.SetLineno(233)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.FloorDiv(πF, µb, πg.NewInt(10).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 234: eq(c//1000, td(0, 0, 1))
							πF.SetLineno(234)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.FloorDiv(πF, µc, πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 235: eq(a//10, td(0, 7*24*360))
							πF.SetLineno(235)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.FloorDiv(πF, µa, πg.NewInt(10).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(7).ToObject(), πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πTemp003, πg.NewInt(360).ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 236: eq(a//3600000, td(0, 0, 7*24*1000))
							πF.SetLineno(236)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.FloorDiv(πF, µa, πg.NewInt(3600000).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(7).ToObject(), πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πTemp003, πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp004[2] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 239: eq(td(999999999, 86399, 999999) - td(999999999, 86399, 999998),
							πF.SetLineno(239)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(999999999).ToObject()
							πTemp004[1] = πg.NewInt(86399).ToObject()
							πTemp004[2] = πg.NewInt(999999).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp003, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(999999999).ToObject()
							πTemp004[1] = πg.NewInt(86399).ToObject()
							πTemp004[2] = πg.NewInt(999998).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp005, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp001, πE = πg.Sub(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 241: eq(td(999999999, 1, 1) - td(999999999, 1, 0),
							πF.SetLineno(241)
							πTemp002 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(999999999).ToObject()
							πTemp004[1] = πg.NewInt(1).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp003, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(999999999).ToObject()
							πTemp004[1] = πg.NewInt(1).ToObject()
							πTemp004[2] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp005, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp001, πE = πg.Sub(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(0).ToObject()
							πTemp004[1] = πg.NewInt(0).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_computations.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 245: def test_disallowed_computations(self):
					πF.SetLineno(245)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_disallowed_computations", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µx *πg.Object = πg.UnboundLocal; _ = µx
						var µzero *πg.Object = πg.UnboundLocal; _ = µzero
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []πg.Param
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 246: a = timedelta(42)
							πF.SetLineno(246)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(42).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp003
							πTemp003 = πg.NewTuple3(πg.NewInt(1).ToObject(), πg.NewLongFromBytes([]byte{0x1,}).ToObject(), πg.NewFloat(1.0).ToObject()).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 250: self.assertRaises(TypeError, lambda: a+i)
							πF.SetLineno(250)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 250: self.assertRaises(TypeError, lambda: a+i)
									πF.SetLineno(250)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µa, µi); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 251: self.assertRaises(TypeError, lambda: a-i)
							πF.SetLineno(251)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 251: self.assertRaises(TypeError, lambda: a-i)
									πF.SetLineno(251)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µa, µi); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 252: self.assertRaises(TypeError, lambda: i+a)
							πF.SetLineno(252)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 252: self.assertRaises(TypeError, lambda: i+a)
									πF.SetLineno(252)
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µi, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 253: self.assertRaises(TypeError, lambda: i-a)
							πF.SetLineno(253)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 253: self.assertRaises(TypeError, lambda: i-a)
									πF.SetLineno(253)
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µi, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 256: x = 2.3
							πF.SetLineno(256)
							µx = πg.NewFloat(2.3).ToObject()
							// line 257: self.assertRaises(TypeError, lambda: a*x)
							πF.SetLineno(257)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 257: self.assertRaises(TypeError, lambda: a*x)
									πF.SetLineno(257)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µa, µx); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 258: self.assertRaises(TypeError, lambda: x*a)
							πF.SetLineno(258)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 258: self.assertRaises(TypeError, lambda: x*a)
									πF.SetLineno(258)
									if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µx, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 259: self.assertRaises(TypeError, lambda: a/x)
							πF.SetLineno(259)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 259: self.assertRaises(TypeError, lambda: a/x)
									πF.SetLineno(259)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Div(πF, µa, µx); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 260: self.assertRaises(TypeError, lambda: x/a)
							πF.SetLineno(260)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 260: self.assertRaises(TypeError, lambda: x/a)
									πF.SetLineno(260)
									if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Div(πF, µx, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 261: self.assertRaises(TypeError, lambda: a // x)
							πF.SetLineno(261)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 261: self.assertRaises(TypeError, lambda: a // x)
									πF.SetLineno(261)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µa, µx); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 262: self.assertRaises(TypeError, lambda: x // a)
							πF.SetLineno(262)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 262: self.assertRaises(TypeError, lambda: x // a)
									πF.SetLineno(262)
									if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µx, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp003 = πg.NewTuple2(πg.NewInt(0).ToObject(), πg.NewInt(0).ToObject()).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp004 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µzero = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 267: self.assertRaises(TypeError, lambda: zero // a)
							πF.SetLineno(267)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 267: self.assertRaises(TypeError, lambda: zero // a)
									πF.SetLineno(267)
									if πE = πg.CheckLocal(πF, µzero, "zero"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µzero, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 268: self.assertRaises(ZeroDivisionError, lambda: a // zero)
							πF.SetLineno(268)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßZeroDivisionError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 268: self.assertRaises(ZeroDivisionError, lambda: a // zero)
									πF.SetLineno(268)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µzero, "zero"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µa, µzero); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_disallowed_computations.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 270: def test_basic_attributes(self):
					πF.SetLineno(270)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_basic_attributes", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdays *πg.Object = πg.UnboundLocal; _ = µdays
						var µseconds *πg.Object = πg.UnboundLocal; _ = µseconds
						var µus *πg.Object = πg.UnboundLocal; _ = µus
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 271: days, seconds, us = 1, 7, 31
							πF.SetLineno(271)
							πTemp001 = πg.NewTuple3(πg.NewInt(1).ToObject(), πg.NewInt(7).ToObject(), πg.NewInt(31).ToObject()).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp003}, πg.TieTarget{Target: &πTemp004}}}, πTemp001); πE != nil {
								continue
							}
							µdays = πTemp002
							µseconds = πTemp003
							µus = πTemp004
							// line 272: td = timedelta(days, seconds, us)
							πF.SetLineno(272)
							πTemp005 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							πTemp005[0] = µdays
							if πE = πg.CheckLocal(πF, µseconds, "seconds"); πE != nil {
								continue
							}
							πTemp005[1] = µseconds
							if πE = πg.CheckLocal(πF, µus, "us"); πE != nil {
								continue
							}
							πTemp005[2] = µus
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µtd = πTemp002
							// line 273: self.assertEqual(td.days, days)
							πF.SetLineno(273)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtd, ßdays, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							πTemp005[1] = µdays
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 274: self.assertEqual(td.seconds, seconds)
							πF.SetLineno(274)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtd, ßseconds, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µseconds, "seconds"); πE != nil {
								continue
							}
							πTemp005[1] = µseconds
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 275: self.assertEqual(td.microseconds, us)
							πF.SetLineno(275)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtd, ßmicroseconds, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µus, "us"); πE != nil {
								continue
							}
							πTemp005[1] = µus
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_basic_attributes.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 278: def test_total_seconds(self):
					πF.SetLineno(278)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_total_seconds", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var µtotal_seconds *πg.Object = πg.UnboundLocal; _ = µtotal_seconds
						var µms *πg.Object = πg.UnboundLocal; _ = µms
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 279: td = timedelta(days=365)
							πF.SetLineno(279)
							πTemp001 = πg.KWArgs{
								{"days", πg.NewInt(365).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µtd = πTemp003
							// line 280: self.assertEqual(td.total_seconds(), 31536000.0)
							πF.SetLineno(280)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtd, ßtotal_seconds, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							πTemp004[1] = πg.NewFloat(31536000.0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp004 = make([]*πg.Object, 5)
							πTemp004[0] = πg.NewFloat(123456.789012).ToObject()
							if πTemp003, πE = πg.Neg(πF, πg.NewFloat(123456.789012).ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							πTemp004[2] = πg.NewFloat(0.123456).ToObject()
							πTemp004[3] = πg.NewInt(0).ToObject()
							πTemp004[4] = πg.NewFloat(1000000.0).ToObject()
							πTemp003 = πg.NewList(πTemp004...).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µtotal_seconds = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 282: td = timedelta(seconds=total_seconds)
							πF.SetLineno(282)
							if πE = πg.CheckLocal(πF, µtotal_seconds, "total_seconds"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"seconds", µtotal_seconds},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µtd = πTemp007
							// line 283: self.assertEqual(td.total_seconds(), total_seconds)
							πF.SetLineno(283)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µtd, ßtotal_seconds, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp007
							if πE = πg.CheckLocal(πF, µtotal_seconds, "total_seconds"); πE != nil {
								continue
							}
							πTemp004[1] = µtotal_seconds
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							πTemp004 = make([]*πg.Object, 3)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(123).ToObject()); πE != nil {
								continue
							}
							πTemp004[2] = πTemp003
							πTemp003 = πg.NewList(πTemp004...).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp005 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µms = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 287: td = timedelta(microseconds=ms)
							πF.SetLineno(287)
							if πE = πg.CheckLocal(πF, µms, "ms"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"microseconds", µms},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µtd = πTemp007
							// line 288: self.assertEqual(td.total_seconds(),
							πF.SetLineno(288)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µtd, ßtotal_seconds, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp007
							if πTemp011, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp012, πE = πg.GetAttr(πF, µtd, ßdays, nil); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Mul(πF, πTemp011, πTemp012); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, µtd, ßseconds, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Add(πF, πTemp010, πTemp011); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Pow(πF, πg.NewInt(10).ToObject(), πg.NewInt(6).ToObject()); πE != nil {
								continue
							}
							if πTemp008, πE = πg.Mul(πF, πTemp009, πTemp010); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µtd, ßmicroseconds, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, πTemp008, πTemp009); πE != nil {
								continue
							}
							if πTemp008, πE = πg.Pow(πF, πg.NewInt(10).ToObject(), πg.NewInt(6).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Div(πF, πTemp007, πTemp008); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_total_seconds.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 277: @unittest.expectedFailure
					πF.SetLineno(277)
					πTemp007 = πF.MakeArgs(1)
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßtest_total_seconds); πE != nil {
						continue
					}
					πTemp007[0] = πTemp008
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp009, πE = πg.GetAttr(πF, πTemp008, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp009.Call(πF, πTemp007, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					if πE = πClass.SetItem(πF, ßtest_total_seconds.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 292: def test_carries(self):
					πF.SetLineno(292)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_carries", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 293: t1 = timedelta(days=100,
							πF.SetLineno(293)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Sub(πF, πg.NewInt(100).ToObject(), πg.NewInt(49).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mul(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(3).ToObject()); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Mul(πF, πg.NewInt(3).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, πTemp007, πg.NewInt(12).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Mul(πF, πTemp006, πg.NewFloat(1000000.0).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"days", πg.NewInt(100).ToObject()},
								{"weeks", πTemp001},
								{"hours", πTemp002},
								{"minutes", πTemp003},
								{"seconds", πg.NewInt(12).ToObject()},
								{"microseconds", πTemp004},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp008); πE != nil {
								continue
							}
							µt1 = πTemp002
							// line 299: t2 = timedelta(microseconds=1)
							πF.SetLineno(299)
							πTemp008 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp008); πE != nil {
								continue
							}
							µt2 = πTemp002
							// line 300: self.assertEqual(t1, t2)
							πF.SetLineno(300)
							πTemp009 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp009[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp009[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_carries.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 303: def test_hash_equality(self):
					πF.SetLineno(303)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_hash_equality", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πTemp010 *πg.Dict
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 304: t1 = timedelta(days=100,
							πF.SetLineno(304)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Sub(πF, πg.NewInt(100).ToObject(), πg.NewInt(49).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mul(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(3).ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Mul(πF, πg.NewInt(3).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, πTemp006, πg.NewInt(12).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Mul(πF, πTemp005, πg.NewInt(1000000).ToObject()); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"days", πg.NewInt(100).ToObject()},
								{"weeks", πTemp001},
								{"hours", πTemp002},
								{"minutes", πTemp003},
								{"seconds", πg.NewInt(12).ToObject()},
								{"microseconds", πTemp004},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							µt1 = πTemp002
							// line 310: t2 = timedelta()
							πF.SetLineno(310)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt2 = πTemp002
							// line 311: self.assertEqual(hash(t1), hash(t2))
							πF.SetLineno(311)
							πTemp008 = πF.MakeArgs(2)
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp009[0] = µt1
							if πTemp001, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp008[0] = πTemp002
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp009[0] = µt2
							if πTemp001, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp008[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							// line 313: t1 += timedelta(weeks=7)
							πF.SetLineno(313)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"weeks", πg.NewInt(7).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, µt1, πTemp002); πE != nil {
								continue
							}
							µt1 = πTemp001
							// line 314: t2 += timedelta(days=7*7)
							πF.SetLineno(314)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(7).ToObject(), πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"days", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, µt2, πTemp002); πE != nil {
								continue
							}
							µt2 = πTemp001
							// line 315: self.assertEqual(t1, t2)
							πF.SetLineno(315)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp008[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp008[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							// line 316: self.assertEqual(hash(t1), hash(t2))
							πF.SetLineno(316)
							πTemp008 = πF.MakeArgs(2)
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp009[0] = µt1
							if πTemp001, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp008[0] = πTemp002
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp009[0] = µt2
							if πTemp001, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp008[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							// line 318: d = {t1: 1}
							πF.SetLineno(318)
							πTemp010 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πTemp010.SetItem(πF, µt1, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp010.ToObject()
							µd = πTemp001
							// line 319: d[t2] = 2
							πF.SetLineno(319)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp002 = µt2
							if πE = πg.SetItem(πF, µd, πTemp002, πTemp001); πE != nil {
								continue
							}
							// line 320: self.assertEqual(len(d), 1)
							πF.SetLineno(320)
							πTemp008 = πF.MakeArgs(2)
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp009[0] = µd
							if πTemp001, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp008[0] = πTemp002
							πTemp008[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							// line 321: self.assertEqual(d[t1], 2)
							πF.SetLineno(321)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001 = µt1
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µd, πTemp001); πE != nil {
								continue
							}
							πTemp008[0] = πTemp002
							πTemp008[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_hash_equality.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 302: @unittest.expectedFailure
					πF.SetLineno(302)
					πTemp007 = πF.MakeArgs(1)
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßtest_hash_equality); πE != nil {
						continue
					}
					πTemp007[0] = πTemp010
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp010, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp010, πE = πTemp011.Call(πF, πTemp007, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					if πE = πClass.SetItem(πF, ßtest_hash_equality.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 331: def test_compare(self):
					πF.SetLineno(331)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µbadarg *πg.Object = πg.UnboundLocal; _ = µbadarg
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 []πg.Param
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 332: t1 = timedelta(2, 3, 4)
							πF.SetLineno(332)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp003
							// line 333: t2 = timedelta(2, 3, 4)
							πF.SetLineno(333)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 334: self.assertTrue(t1 == t2)
							πF.SetLineno(334)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 335: self.assertTrue(t1 <= t2)
							πF.SetLineno(335)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 336: self.assertTrue(t1 >= t2)
							πF.SetLineno(336)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 337: self.assertFalse(t1 != t2)
							πF.SetLineno(337)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 338: self.assertFalse(t1 < t2)
							πF.SetLineno(338)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 339: self.assertFalse(t1 > t2)
							πF.SetLineno(339)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 340: self.assertEqual(cmp(t1, t2), 0)
							πF.SetLineno(340)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 341: self.assertEqual(cmp(t2, t1), 0)
							πF.SetLineno(341)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp005 = πg.NewTuple3(πg.NewInt(3).ToObject(), πg.NewInt(3).ToObject(), πg.NewInt(3).ToObject()).ToObject()
							πTemp006 = πg.NewTuple3(πg.NewInt(2).ToObject(), πg.NewInt(4).ToObject(), πg.NewInt(4).ToObject()).ToObject()
							πTemp007 = πg.NewTuple3(πg.NewInt(2).ToObject(), πg.NewInt(3).ToObject(), πg.NewInt(5).ToObject()).ToObject()
							πTemp003 = πg.NewTuple3(πTemp005, πTemp006, πTemp007).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp008 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µargs = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 344: t2 = timedelta(*args)   # this is larger than t1
							πF.SetLineno(344)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Invoke(πF, πTemp003, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µt2 = πTemp005
							// line 345: self.assertTrue(t1 < t2)
							πF.SetLineno(345)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 346: self.assertTrue(t2 > t1)
							πF.SetLineno(346)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 347: self.assertTrue(t1 <= t2)
							πF.SetLineno(347)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 348: self.assertTrue(t2 >= t1)
							πF.SetLineno(348)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 349: self.assertTrue(t1 != t2)
							πF.SetLineno(349)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 350: self.assertTrue(t2 != t1)
							πF.SetLineno(350)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 351: self.assertFalse(t1 == t2)
							πF.SetLineno(351)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 352: self.assertFalse(t2 == t1)
							πF.SetLineno(352)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 353: self.assertFalse(t1 > t2)
							πF.SetLineno(353)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 354: self.assertFalse(t2 < t1)
							πF.SetLineno(354)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 355: self.assertFalse(t1 >= t2)
							πF.SetLineno(355)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 356: self.assertFalse(t2 <= t1)
							πF.SetLineno(356)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 357: self.assertEqual(cmp(t1, t2), -1)
							πF.SetLineno(357)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 358: self.assertEqual(cmp(t2, t1), 1)
							πF.SetLineno(358)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πTemp003, πE = πg.ResolveGlobal(πF, ßOTHERSTUFF); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp008 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µbadarg = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 361: self.assertEqual(t1 == badarg, False)
							πF.SetLineno(361)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µbadarg); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 362: self.assertEqual(t1 != badarg, True)
							πF.SetLineno(362)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µbadarg); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 363: self.assertEqual(badarg == t1, False)
							πF.SetLineno(363)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µbadarg, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 364: self.assertEqual(badarg != t1, True)
							πF.SetLineno(364)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µbadarg, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 366: self.assertRaises(TypeError, lambda: t1 <= badarg)
							πF.SetLineno(366)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 366: self.assertRaises(TypeError, lambda: t1 <= badarg)
									πF.SetLineno(366)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 367: self.assertRaises(TypeError, lambda: t1 < badarg)
							πF.SetLineno(367)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 367: self.assertRaises(TypeError, lambda: t1 < badarg)
									πF.SetLineno(367)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 368: self.assertRaises(TypeError, lambda: t1 > badarg)
							πF.SetLineno(368)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 368: self.assertRaises(TypeError, lambda: t1 > badarg)
									πF.SetLineno(368)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 369: self.assertRaises(TypeError, lambda: t1 >= badarg)
							πF.SetLineno(369)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 369: self.assertRaises(TypeError, lambda: t1 >= badarg)
									πF.SetLineno(369)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 370: self.assertRaises(TypeError, lambda: badarg <= t1)
							πF.SetLineno(370)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 370: self.assertRaises(TypeError, lambda: badarg <= t1)
									πF.SetLineno(370)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 371: self.assertRaises(TypeError, lambda: badarg < t1)
							πF.SetLineno(371)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 371: self.assertRaises(TypeError, lambda: badarg < t1)
									πF.SetLineno(371)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 372: self.assertRaises(TypeError, lambda: badarg > t1)
							πF.SetLineno(372)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 372: self.assertRaises(TypeError, lambda: badarg > t1)
									πF.SetLineno(372)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 373: self.assertRaises(TypeError, lambda: badarg >= t1)
							πF.SetLineno(373)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 373: self.assertRaises(TypeError, lambda: badarg >= t1)
									πF.SetLineno(373)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_compare.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 375: def test_str(self):
					πF.SetLineno(375)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_str", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var µeq *πg.Object = πg.UnboundLocal; _ = µeq
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 376: td = timedelta
							πF.SetLineno(376)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 377: eq = self.assertEqual
							πF.SetLineno(377)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							µeq = πTemp001
							// line 379: eq(str(td(1)), "1 day, 0:00:00")
							πF.SetLineno(379)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("1 day, 0:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 380: eq(str(td(-1)), "-1 day, 0:00:00")
							πF.SetLineno(380)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("-1 day, 0:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 381: eq(str(td(2)), "2 days, 0:00:00")
							πF.SetLineno(381)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("2 days, 0:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 382: eq(str(td(-2)), "-2 days, 0:00:00")
							πF.SetLineno(382)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("-2 days, 0:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 384: eq(str(td(hours=12, minutes=58, seconds=59)), "12:58:59")
							πF.SetLineno(384)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp006 = πg.KWArgs{
								{"hours", πg.NewInt(12).ToObject()},
								{"minutes", πg.NewInt(58).ToObject()},
								{"seconds", πg.NewInt(59).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("12:58:59").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 385: eq(str(td(hours=2, minutes=3, seconds=4)), "2:03:04")
							πF.SetLineno(385)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp006 = πg.KWArgs{
								{"hours", πg.NewInt(2).ToObject()},
								{"minutes", πg.NewInt(3).ToObject()},
								{"seconds", πg.NewInt(4).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("2:03:04").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 386: eq(str(td(weeks=-30, hours=23, minutes=12, seconds=34)),
							πF.SetLineno(386)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(30).ToObject()); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"weeks", πTemp001},
								{"hours", πg.NewInt(23).ToObject()},
								{"minutes", πg.NewInt(12).ToObject()},
								{"seconds", πg.NewInt(34).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("-210 days, 23:12:34").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 389: eq(str(td(milliseconds=1)), "0:00:00.001000")
							πF.SetLineno(389)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp006 = πg.KWArgs{
								{"milliseconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("0:00:00.001000").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 390: eq(str(td(microseconds=3)), "0:00:00.000003")
							πF.SetLineno(390)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp006 = πg.KWArgs{
								{"microseconds", πg.NewInt(3).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("0:00:00.000003").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 392: eq(str(td(days=999999999, hours=23, minutes=59, seconds=59,
							πF.SetLineno(392)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp006 = πg.KWArgs{
								{"days", πg.NewInt(999999999).ToObject()},
								{"hours", πg.NewInt(23).ToObject()},
								{"minutes", πg.NewInt(59).ToObject()},
								{"seconds", πg.NewInt(59).ToObject()},
								{"microseconds", πg.NewInt(999999).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							πTemp002[1] = πg.NewStr("999999999 days, 23:59:59.999999").ToObject()
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_str.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 397: def test_roundtrip(self):
					πF.SetLineno(397)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_roundtrip", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var µs *πg.Object = πg.UnboundLocal; _ = µs
						var µtd2 *πg.Object = πg.UnboundLocal; _ = µtd2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πTemp011 []*πg.Object
						_ = πTemp011
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp003 = πg.KWArgs{
								{"days", πg.NewInt(999999999).ToObject()},
								{"hours", πg.NewInt(23).ToObject()},
								{"minutes", πg.NewInt(59).ToObject()},
								{"seconds", πg.NewInt(59).ToObject()},
								{"microseconds", πg.NewInt(999999).ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(999999999).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"days", πTemp004},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
								{"seconds", πg.NewInt(2).ToObject()},
								{"microseconds", πg.NewInt(3).ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp004.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple3(πTemp005, πTemp006, πTemp007).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp008 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µtd = πTemp002
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 404: s = repr(td)
							πF.SetLineno(404)
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							πTemp010[0] = µtd
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							µs = πTemp004
							// line 405: self.assertTrue(s.startswith('datetime.'))
							πF.SetLineno(405)
							πTemp010 = πF.MakeArgs(1)
							πTemp011 = πF.MakeArgs(1)
							πTemp011[0] = πg.NewStr("datetime.").ToObject()
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µs, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp011, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp011)
							πTemp010[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							// line 406: s = s[9:]
							πF.SetLineno(406)
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(9).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µs, πTemp002); πE != nil {
								continue
							}
							µs = πTemp004
							// line 407: td2 = eval(s)
							πF.SetLineno(407)
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							πTemp010[0] = µs
							if πTemp002, πE = πg.ResolveGlobal(πF, ßeval); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							µtd2 = πTemp004
							// line 408: self.assertEqual(td, td2)
							πF.SetLineno(408)
							πTemp010 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							πTemp010[0] = µtd
							if πE = πg.CheckLocal(πF, µtd2, "td2"); πE != nil {
								continue
							}
							πTemp010[1] = µtd2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							// line 411: td2 = timedelta(td.days, td.seconds, td.microseconds)
							πF.SetLineno(411)
							πTemp010 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtd, ßdays, nil); πE != nil {
								continue
							}
							πTemp010[0] = πTemp002
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtd, ßseconds, nil); πE != nil {
								continue
							}
							πTemp010[1] = πTemp002
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtd, ßmicroseconds, nil); πE != nil {
								continue
							}
							πTemp010[2] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							µtd2 = πTemp004
							// line 412: self.assertEqual(td, td2)
							πF.SetLineno(412)
							πTemp010 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							πTemp010[0] = µtd
							if πE = πg.CheckLocal(πF, µtd2, "td2"); πE != nil {
								continue
							}
							πTemp010[1] = µtd2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 396: @unittest.expectedFailure
					πF.SetLineno(396)
					πTemp007 = πF.MakeArgs(1)
					if πTemp013, πE = πg.ResolveClass(πF, πClass, nil, ßtest_roundtrip); πE != nil {
						continue
					}
					πTemp007[0] = πTemp013
					if πTemp013, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp014, πE = πg.GetAttr(πF, πTemp013, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp013, πE = πTemp014.Call(πF, πTemp007, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 414: def test_resolution_info(self):
					πF.SetLineno(414)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_resolution_info", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 415: self.assertIsInstance(timedelta.min, timedelta)
							πF.SetLineno(415)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 416: self.assertIsInstance(timedelta.max, timedelta)
							πF.SetLineno(416)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 417: self.assertIsInstance(timedelta.resolution, timedelta)
							πF.SetLineno(417)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßresolution, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 418: self.assertTrue(timedelta.max > timedelta.min)
							πF.SetLineno(418)
							πTemp001 = πF.MakeArgs(1)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßmax, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßmin, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, πTemp004, πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 419: self.assertEqual(timedelta.min, timedelta(-999999999))
							πF.SetLineno(419)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(999999999).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 420: self.assertEqual(timedelta.max, timedelta(999999999, 24*3600-1, 1e6-1))
							πF.SetLineno(420)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = πF.MakeArgs(3)
							πTemp006[0] = πg.NewInt(999999999).ToObject()
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp006[1] = πTemp002
							if πTemp002, πE = πg.Sub(πF, πg.NewFloat(1000000.0).ToObject(), πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp006[2] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 421: self.assertEqual(timedelta.resolution, timedelta(0, 0, 1))
							πF.SetLineno(421)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßresolution, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp006 = πF.MakeArgs(3)
							πTemp006[0] = πg.NewInt(0).ToObject()
							πTemp006[1] = πg.NewInt(0).ToObject()
							πTemp006[2] = πg.NewInt(1).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_resolution_info.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 423: def test_overflow(self):
					πF.SetLineno(423)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_overflow", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtiny *πg.Object = πg.UnboundLocal; _ = µtiny
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []πg.Param
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 424: tiny = timedelta.resolution
							πF.SetLineno(424)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßresolution, nil); πE != nil {
								continue
							}
							µtiny = πTemp002
							// line 426: td = timedelta.min + tiny
							πF.SetLineno(426)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, µtiny); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 427: td -= tiny  # no problem
							πF.SetLineno(427)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ISub(πF, µtd, µtiny); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 428: self.assertRaises(OverflowError, td.__sub__, tiny)
							πF.SetLineno(428)
							πTemp004 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtd, ß__sub__, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							πTemp004[2] = µtiny
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 429: self.assertRaises(OverflowError, td.__add__, -tiny)
							πF.SetLineno(429)
							πTemp004 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtd, ß__add__, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Neg(πF, µtiny); πE != nil {
								continue
							}
							πTemp004[2] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 431: td = timedelta.max - tiny
							πF.SetLineno(431)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, µtiny); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 432: td += tiny  # no problem
							πF.SetLineno(432)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, µtd, µtiny); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 433: self.assertRaises(OverflowError, td.__add__, tiny)
							πF.SetLineno(433)
							πTemp004 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtd, ß__add__, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							πTemp004[2] = µtiny
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 434: self.assertRaises(OverflowError, td.__sub__, -tiny)
							πF.SetLineno(434)
							πTemp004 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtd, ß__sub__, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Neg(πF, µtiny); πE != nil {
								continue
							}
							πTemp004[2] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 436: self.assertRaises(OverflowError, lambda: -timedelta.max)
							πF.SetLineno(436)
							πTemp004 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp005 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 436: self.assertRaises(OverflowError, lambda: -timedelta.max)
									πF.SetLineno(436)
									if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
										continue
									}
									if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Neg(πF, πTemp003); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_overflow.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 438: def test_microsecond_rounding(self):
					πF.SetLineno(438)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_microsecond_rounding", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var µeq *πg.Object = πg.UnboundLocal; _ = µeq
						var µus_per_hour *πg.Object = πg.UnboundLocal; _ = µus_per_hour
						var µus_per_day *πg.Object = πg.UnboundLocal; _ = µus_per_day
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 439: td = timedelta
							πF.SetLineno(439)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							µtd = πTemp001
							// line 440: eq = self.assertEqual
							πF.SetLineno(440)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							µeq = πTemp001
							// line 443: eq(td(milliseconds=0.4/1000), td(0))    # rounds to 0
							πF.SetLineno(443)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(0.4).ToObject(), πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"milliseconds", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 444: eq(td(milliseconds=-0.4/1000), td(0))    # rounds to 0
							πF.SetLineno(444)
							πTemp002 = πF.MakeArgs(2)
							if πTemp005, πE = πg.Neg(πF, πg.NewFloat(0.4).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πTemp005, πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"milliseconds", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 445: eq(td(milliseconds=0.6/1000), td(microseconds=1))
							πF.SetLineno(445)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(0.6).ToObject(), πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"milliseconds", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 446: eq(td(milliseconds=-0.6/1000), td(microseconds=-1))
							πF.SetLineno(446)
							πTemp002 = πF.MakeArgs(2)
							if πTemp005, πE = πg.Neg(πF, πg.NewFloat(0.6).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πTemp005, πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"milliseconds", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"microseconds", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 449: us_per_hour = 3600e6
							πF.SetLineno(449)
							µus_per_hour = πg.NewFloat(3600000000.0).ToObject()
							// line 450: us_per_day = us_per_hour * 24
							πF.SetLineno(450)
							if πE = πg.CheckLocal(πF, µus_per_hour, "us_per_hour"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µus_per_hour, πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							µus_per_day = πTemp001
							// line 451: eq(td(days=.4/us_per_day), td(0))
							πF.SetLineno(451)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µus_per_day, "us_per_day"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(0.4).ToObject(), µus_per_day); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"days", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 452: eq(td(hours=.2/us_per_hour), td(0))
							πF.SetLineno(452)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µus_per_hour, "us_per_hour"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(0.2).ToObject(), µus_per_hour); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"hours", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 453: eq(td(days=.4/us_per_day, hours=.2/us_per_hour), td(microseconds=1))
							πF.SetLineno(453)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µus_per_day, "us_per_day"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πg.NewFloat(0.4).ToObject(), µus_per_day); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µus_per_hour, "us_per_hour"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Div(πF, πg.NewFloat(0.2).ToObject(), µus_per_hour); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"days", πTemp001},
								{"hours", πTemp005},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp003 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 455: eq(td(days=-.4/us_per_day), td(0))
							πF.SetLineno(455)
							πTemp002 = πF.MakeArgs(2)
							if πTemp005, πE = πg.Neg(πF, πg.NewFloat(0.4).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µus_per_day, "us_per_day"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πTemp005, µus_per_day); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"days", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 456: eq(td(hours=-.2/us_per_hour), td(0))
							πF.SetLineno(456)
							πTemp002 = πF.MakeArgs(2)
							if πTemp005, πE = πg.Neg(πF, πg.NewFloat(0.2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µus_per_hour, "us_per_hour"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πTemp005, µus_per_hour); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"hours", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 457: eq(td(days=-.4/us_per_day, hours=-.2/us_per_hour), td(microseconds=-1))
							πF.SetLineno(457)
							πTemp002 = πF.MakeArgs(2)
							if πTemp005, πE = πg.Neg(πF, πg.NewFloat(0.4).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µus_per_day, "us_per_day"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πTemp005, µus_per_day); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Neg(πF, πg.NewFloat(0.2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µus_per_hour, "us_per_hour"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Div(πF, πTemp006, µus_per_hour); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"days", πTemp001},
								{"hours", πTemp005},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"microseconds", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp001, πE = µtd.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µeq, "eq"); πE != nil {
								continue
							}
							if πTemp001, πE = µeq.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_microsecond_rounding.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 459: def test_massive_normalization(self):
					πF.SetLineno(459)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_massive_normalization", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtd *πg.Object = πg.UnboundLocal; _ = µtd
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 460: td = timedelta(microseconds=-1)
							πF.SetLineno(460)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"microseconds", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
								continue
							}
							µtd = πTemp003
							// line 461: self.assertEqual((td.days, td.seconds, td.microseconds),
							πF.SetLineno(461)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µtd, ßdays, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µtd, ßseconds, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µtd, ßmicroseconds, nil); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple3(πTemp003, πTemp005, πTemp006).ToObject()
							πTemp004[0] = πTemp001
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, πTemp006, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple3(πTemp003, πTemp005, πg.NewInt(999999).ToObject()).ToObject()
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_massive_normalization.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 464: def test_bool(self):
					πF.SetLineno(464)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("test_bool", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 465: self.assertTrue(timedelta(1))
							πF.SetLineno(465)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(1).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 466: self.assertTrue(timedelta(0, 1))
							πF.SetLineno(466)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = πg.NewInt(1).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 467: self.assertTrue(timedelta(0, 0, 1))
							πF.SetLineno(467)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = πg.NewInt(0).ToObject()
							πTemp002[2] = πg.NewInt(1).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 468: self.assertTrue(timedelta(microseconds=1))
							πF.SetLineno(468)
							πTemp001 = πF.MakeArgs(1)
							πTemp005 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 469: self.assertFalse(timedelta(0))
							πF.SetLineno(469)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(0).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bool.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 471: def test_subclass_timedelta(self):
					πF.SetLineno(471)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("test_subclass_timedelta", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µT *πg.Object = πg.UnboundLocal; _ = µT
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µt3 *πg.Object = πg.UnboundLocal; _ = µt3
						var µt4 *πg.Object = πg.UnboundLocal; _ = µt4
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 473: class T(timedelta):
							πF.SetLineno(473)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("T", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 []*πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 475: def from_td(td):
									πF.SetLineno(475)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "td", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("from_td", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µtd *πg.Object = πArgs[0]; _ = µtd
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 476: return T(td.days, td.seconds, td.microseconds)
											πF.SetLineno(476)
											πTemp001 = πF.MakeArgs(3)
											if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µtd, ßdays, nil); πE != nil {
												continue
											}
											πTemp001[0] = πTemp002
											if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µtd, ßseconds, nil); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πE = πg.CheckLocal(πF, µtd, "td"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µtd, ßmicroseconds, nil); πE != nil {
												continue
											}
											πTemp001[2] = πTemp002
											if πE = πg.CheckLocal(πF, µT, "T"); πE != nil {
												continue
											}
											if πTemp002, πE = µT.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											πR = πTemp002
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßfrom_td.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 474: @staticmethod
									πF.SetLineno(474)
									πTemp003 = πF.MakeArgs(1)
									if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßfrom_td); πE != nil {
										continue
									}
									πTemp003[0] = πTemp004
									if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßstaticmethod); πE != nil {
										continue
									}
									if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp003)
									if πE = πClass.SetItem(πF, ßfrom_td.ToObject(), πTemp005); πE != nil {
										continue
									}
									// line 478: def as_hours(self):
									πF.SetLineno(478)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp004 = πg.NewFunction(πg.NewCode("as_hours", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µsum *πg.Object = πg.UnboundLocal; _ = µsum
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 *πg.Object
										_ = πTemp004
										var πTemp005 *πg.Object
										_ = πTemp005
										var πTemp006 []*πg.Object
										_ = πTemp006
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 479: sum = (self.days * 24 +
											πF.SetLineno(479)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µself, ßdays, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πg.Mul(πF, πTemp004, πg.NewInt(24).ToObject()); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp005, πE = πg.GetAttr(πF, µself, ßseconds, nil); πE != nil {
												continue
											}
											if πTemp004, πE = πg.Div(πF, πTemp005, πg.NewFloat(3600.0).ToObject()); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Add(πF, πTemp003, πTemp004); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µself, ßmicroseconds, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πg.Div(πF, πTemp004, πg.NewFloat(3600000000.0).ToObject()); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Add(πF, πTemp002, πTemp003); πE != nil {
												continue
											}
											µsum = πTemp001
											// line 482: return round(sum)
											πF.SetLineno(482)
											πTemp006 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µsum, "sum"); πE != nil {
												continue
											}
											πTemp006[0] = µsum
											if πTemp001, πE = πg.ResolveGlobal(πF, ßround); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp006)
											πR = πTemp002
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßas_hours.ToObject(), πTemp004); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("T").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µT = πTemp005
							// line 484: t1 = T(days=1)
							πF.SetLineno(484)
							πTemp006 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µT, "T"); πE != nil {
								continue
							}
							if πTemp002, πE = µT.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µt1 = πTemp002
							// line 485: self.assertIs(type(t1), T)
							πF.SetLineno(485)
							πTemp003 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp007[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µT, "T"); πE != nil {
								continue
							}
							πTemp003[1] = µT
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 486: self.assertEqual(t1.as_hours(), 24)
							πF.SetLineno(486)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßas_hours, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							πTemp003[1] = πg.NewInt(24).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 488: t2 = T(days=-1, seconds=-3600)
							πF.SetLineno(488)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"days", πTemp002},
								{"seconds", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µT, "T"); πE != nil {
								continue
							}
							if πTemp002, πE = µT.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µt2 = πTemp002
							// line 489: self.assertIs(type(t2), T)
							πF.SetLineno(489)
							πTemp003 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp007[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µT, "T"); πE != nil {
								continue
							}
							πTemp003[1] = µT
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 490: self.assertEqual(t2.as_hours(), -25)
							πF.SetLineno(490)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßas_hours, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(25).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 492: t3 = t1 + t2
							πF.SetLineno(492)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µt1, µt2); πE != nil {
								continue
							}
							µt3 = πTemp002
							// line 493: self.assertIs(type(t3), timedelta)
							πF.SetLineno(493)
							πTemp003 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp007[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[0] = πTemp004
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 494: t4 = T.from_td(t3)
							πF.SetLineno(494)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp003[0] = µt3
							if πE = πg.CheckLocal(πF, µT, "T"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µT, ßfrom_td, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt4 = πTemp004
							// line 495: self.assertIs(type(t4), T)
							πF.SetLineno(495)
							πTemp003 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							πTemp007[0] = µt4
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µT, "T"); πE != nil {
								continue
							}
							πTemp003[1] = µT
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 496: self.assertEqual(t3.days, t4.days)
							πF.SetLineno(496)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßdays, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßdays, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 497: self.assertEqual(t3.seconds, t4.seconds)
							πF.SetLineno(497)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßseconds, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßseconds, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 498: self.assertEqual(t3.microseconds, t4.microseconds)
							πF.SetLineno(498)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßmicroseconds, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßmicroseconds, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 499: self.assertEqual(str(t3), str(t4))
							πF.SetLineno(499)
							πTemp003 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp007[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[0] = πTemp004
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							πTemp007[0] = µt4
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 500: self.assertEqual(t4.as_hours(), -1)
							πF.SetLineno(500)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßas_hours, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subclass_timedelta.ToObject(), πTemp018); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestTimeDelta").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTimeDelta.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 505: class TestDateOnly(unittest.TestCase):
			πF.SetLineno(505)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestDateOnly", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 509: def test_delta_non_days_ignored(self):
					πF.SetLineno(509)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_delta_non_days_ignored", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var µdelta *πg.Object = πg.UnboundLocal; _ = µdelta
						var µdays *πg.Object = πg.UnboundLocal; _ = µdays
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 510: dt = date(2000, 1, 2)
							πF.SetLineno(510)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 511: delta = timedelta(days=1, hours=2, minutes=3, seconds=4,
							πF.SetLineno(511)
							πTemp004 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
								{"hours", πg.NewInt(2).ToObject()},
								{"minutes", πg.NewInt(3).ToObject()},
								{"seconds", πg.NewInt(4).ToObject()},
								{"microseconds", πg.NewInt(5).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µdelta = πTemp003
							// line 513: days = timedelta(delta.days)
							πF.SetLineno(513)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdelta, ßdays, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdays = πTemp003
							// line 514: self.assertEqual(days, timedelta(1))
							πF.SetLineno(514)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							πTemp001[0] = µdays
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewInt(1).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 516: dt2 = dt + delta
							πF.SetLineno(516)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdt, µdelta); πE != nil {
								continue
							}
							µdt2 = πTemp002
							// line 517: self.assertEqual(dt2, dt + days)
							πF.SetLineno(517)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp001[0] = µdt2
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdt, µdays); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 519: dt2 = delta + dt
							πF.SetLineno(519)
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdelta, µdt); πE != nil {
								continue
							}
							µdt2 = πTemp002
							// line 520: self.assertEqual(dt2, dt + days)
							πF.SetLineno(520)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp001[0] = µdt2
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdt, µdays); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 522: dt2 = dt - delta
							πF.SetLineno(522)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µdt, µdelta); πE != nil {
								continue
							}
							µdt2 = πTemp002
							// line 523: self.assertEqual(dt2, dt - days)
							πF.SetLineno(523)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp001[0] = µdt2
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µdt, µdays); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 525: delta = -delta
							πF.SetLineno(525)
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µdelta); πE != nil {
								continue
							}
							µdelta = πTemp002
							// line 526: days = timedelta(delta.days)
							πF.SetLineno(526)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdelta, ßdays, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdays = πTemp003
							// line 527: self.assertEqual(days, timedelta(-2))
							πF.SetLineno(527)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							πTemp001[0] = µdays
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 529: dt2 = dt + delta
							πF.SetLineno(529)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdt, µdelta); πE != nil {
								continue
							}
							µdt2 = πTemp002
							// line 530: self.assertEqual(dt2, dt + days)
							πF.SetLineno(530)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp001[0] = µdt2
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdt, µdays); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 532: dt2 = delta + dt
							πF.SetLineno(532)
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdelta, µdt); πE != nil {
								continue
							}
							µdt2 = πTemp002
							// line 533: self.assertEqual(dt2, dt + days)
							πF.SetLineno(533)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp001[0] = µdt2
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdt, µdays); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 535: dt2 = dt - delta
							πF.SetLineno(535)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µdt, µdelta); πE != nil {
								continue
							}
							µdt2 = πTemp002
							// line 536: self.assertEqual(dt2, dt - days)
							πF.SetLineno(536)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp001[0] = µdt2
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdays, "days"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µdt, µdays); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_delta_non_days_ignored.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestDateOnly").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestDateOnly.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 538: class SubclassDate(date):
			πF.SetLineno(538)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("SubclassDate", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 539: sub_var = 1
					πF.SetLineno(539)
					if πE = πClass.SetItem(πF, ßsub_var.ToObject(), πg.NewInt(1).ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("SubclassDate").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßSubclassDate.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 541: class TestDate(HarmlessMixedComparison, unittest.TestCase):
			πF.SetLineno(541)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßHarmlessMixedComparison); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[1] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestDate", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				var πTemp021 *πg.Object
				_ = πTemp021
				var πTemp022 *πg.Object
				_ = πTemp022
				var πTemp023 *πg.Object
				_ = πTemp023
				var πTemp024 *πg.Object
				_ = πTemp024
				var πTemp025 *πg.Object
				_ = πTemp025
				var πTemp026 *πg.Object
				_ = πTemp026
				var πTemp027 *πg.Object
				_ = πTemp027
				var πTemp028 *πg.Object
				_ = πTemp028
				var πTemp029 *πg.Object
				_ = πTemp029
				var πTemp030 *πg.Object
				_ = πTemp030
				var πTemp031 *πg.Object
				_ = πTemp031
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 545: theclass = date
					πF.SetLineno(545)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßdate); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßtheclass.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 547: def test_basic_attributes(self):
					πF.SetLineno(547)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_basic_attributes", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 548: dt = self.theclass(2002, 3, 1)
							πF.SetLineno(548)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 549: self.assertEqual(dt.year, 2002)
							πF.SetLineno(549)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(2002).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 550: self.assertEqual(dt.month, 3)
							πF.SetLineno(550)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 551: self.assertEqual(dt.day, 1)
							πF.SetLineno(551)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_basic_attributes.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 554: def test_roundtrip(self):
					πF.SetLineno(554)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_roundtrip", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var µs *πg.Object = πg.UnboundLocal; _ = µs
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp004, ßtoday, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(πTemp005, πTemp004).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µdt = πTemp002
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 558: s = repr(dt)
							πF.SetLineno(558)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[0] = µdt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µs = πTemp004
							// line 559: self.assertTrue(s.startswith('datetime.'))
							πF.SetLineno(559)
							πTemp003 = πF.MakeArgs(1)
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = πg.NewStr("datetime.").ToObject()
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µs, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 560: s = s[9:]
							πF.SetLineno(560)
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(9).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µs, πTemp002); πE != nil {
								continue
							}
							µs = πTemp004
							// line 561: dt2 = eval(s)
							πF.SetLineno(561)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							πTemp003[0] = µs
							if πTemp002, πE = πg.ResolveGlobal(πF, ßeval); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µdt2 = πTemp004
							// line 562: self.assertEqual(dt, dt2)
							πF.SetLineno(562)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[0] = µdt
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp003[1] = µdt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 565: dt2 = self.theclass(dt.year, dt.month, dt.day)
							πF.SetLineno(565)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßday, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µdt2 = πTemp004
							// line 566: self.assertEqual(dt, dt2)
							πF.SetLineno(566)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[0] = µdt
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp003[1] = µdt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 553: @unittest.expectedFailure
					πF.SetLineno(553)
					πTemp004 = πF.MakeArgs(1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßtest_roundtrip); πE != nil {
						continue
					}
					πTemp004[0] = πTemp005
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp006.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 568: def test_ordinal_conversions(self):
					πF.SetLineno(568)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_ordinal_conversions", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µy *πg.Object = πg.UnboundLocal; _ = µy
						var µm *πg.Object = πg.UnboundLocal; _ = µm
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µn *πg.Object = πg.UnboundLocal; _ = µn
						var µfromord *πg.Object = πg.UnboundLocal; _ = µfromord
						var µyear *πg.Object = πg.UnboundLocal; _ = µyear
						var µd2 *πg.Object = πg.UnboundLocal; _ = µd2
						var µdim *πg.Object = πg.UnboundLocal; _ = µdim
						var µisleap *πg.Object = πg.UnboundLocal; _ = µisleap
						var µmonth *πg.Object = πg.UnboundLocal; _ = µmonth
						var µmaxday *πg.Object = πg.UnboundLocal; _ = µmaxday
						var µday *πg.Object = πg.UnboundLocal; _ = µday
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 bool
						_ = πTemp012
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 6: goto Label6
							case 7: goto Label7
							case 11: goto Label11
							case 12: goto Label12
							case 14: goto Label14
							case 15: goto Label15
							case 20: goto Label20
							case 21: goto Label21
							default: panic("unexpected function state")
							}
							πTemp002 = make([]*πg.Object, 4)
							πTemp003 = πg.NewTuple4(πg.NewInt(1).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp002[0] = πTemp003
							πTemp003 = πg.NewTuple4(πg.NewInt(1).ToObject(), πg.NewInt(12).ToObject(), πg.NewInt(31).ToObject(), πg.NewInt(365).ToObject()).ToObject()
							πTemp002[1] = πTemp003
							πTemp003 = πg.NewTuple4(πg.NewInt(2).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(366).ToObject()).ToObject()
							πTemp002[2] = πTemp003
							πTemp003 = πg.NewTuple4(πg.NewInt(1945).ToObject(), πg.NewInt(11).ToObject(), πg.NewInt(12).ToObject(), πg.NewInt(710347).ToObject()).ToObject()
							πTemp002[3] = πTemp003
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp007}, πg.TieTarget{Target: &πTemp008}, πg.TieTarget{Target: &πTemp009}}}, πTemp003); πE != nil {
									continue
								}
								µy = πTemp006
								µm = πTemp007
								µd = πTemp008
								µn = πTemp009
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 575: d = self.theclass(y, m, d)
							πF.SetLineno(575)
							πTemp002 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							πTemp002[0] = µy
							if πE = πg.CheckLocal(πF, µm, "m"); πE != nil {
								continue
							}
							πTemp002[1] = µm
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002[2] = µd
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp006
							// line 576: self.assertEqual(n, d.toordinal())
							πF.SetLineno(576)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							πTemp002[0] = µn
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 577: fromord = self.theclass.fromordinal(n)
							πF.SetLineno(577)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							πTemp002[0] = µn
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µfromord = πTemp003
							// line 578: self.assertEqual(d, fromord)
							πF.SetLineno(578)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002[0] = µd
							if πE = πg.CheckLocal(πF, µfromord, "fromord"); πE != nil {
								continue
							}
							πTemp002[1] = µfromord
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µfromord, "fromord"); πE != nil {
								continue
							}
							πTemp002[0] = µfromord
							πTemp002[1] = ßhour.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhasattr); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp005, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 579: if hasattr(fromord, "hour"):
							πF.SetLineno(579)
						Label4:
							// line 582: self.assertEqual(fromord.hour, 0)
							πF.SetLineno(582)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µfromord, "fromord"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfromord, ßhour, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 583: self.assertEqual(fromord.minute, 0)
							πF.SetLineno(583)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µfromord, "fromord"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfromord, ßminute, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 584: self.assertEqual(fromord.second, 0)
							πF.SetLineno(584)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µfromord, "fromord"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfromord, ßsecond, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 585: self.assertEqual(fromord.microsecond, 0)
							πF.SetLineno(585)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µfromord, "fromord"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfromord, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							πTemp002 = πF.MakeArgs(3)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMINYEAR); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp006, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp006, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							πTemp002[2] = πg.NewInt(7).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßxrange); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp006); πE != nil {
								continue
							}
							πF.PushCheckpoint(7)
							πTemp004 = false
						Label6:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label8
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µyear = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(6)            
							// line 591: d = self.theclass(year, 1, 1)
							πF.SetLineno(591)
							πTemp002 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µyear, "year"); πE != nil {
								continue
							}
							πTemp002[0] = µyear
							πTemp002[1] = πg.NewInt(1).ToObject()
							πTemp002[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp006
							// line 592: n = d.toordinal()
							πF.SetLineno(592)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µn = πTemp006
							// line 593: d2 = self.theclass.fromordinal(n)
							πF.SetLineno(593)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							πTemp002[0] = µn
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd2 = πTemp003
							// line 594: self.assertEqual(d, d2)
							πF.SetLineno(594)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002[0] = µd
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp002[1] = µd2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πg.CheckLocal(πF, µyear, "year"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µyear, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label9
							}
							goto Label10
							// line 596: if year > 1:
							πF.SetLineno(596)
						Label9:
							// line 597: d = self.theclass.fromordinal(n-1)
							πF.SetLineno(597)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µn, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp003
							// line 598: d2 = self.theclass(year-1, 12, 31)
							πF.SetLineno(598)
							πTemp002 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µyear, "year"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µyear, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(12).ToObject()
							πTemp002[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd2 = πTemp006
							// line 599: self.assertEqual(d, d2)
							πF.SetLineno(599)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002[0] = µd
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp002[1] = µd2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 600: self.assertEqual(d2.toordinal(), n-1)
							πF.SetLineno(600)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd2, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp006
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µn, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label10
						Label10:
							continue
						Label7:
							if πE != nil || πR != nil {
								continue
							}
						Label8:
							// line 603: dim = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
							πF.SetLineno(603)
							πTemp002 = make([]*πg.Object, 12)
							πTemp002[0] = πg.NewInt(31).ToObject()
							πTemp002[1] = πg.NewInt(28).ToObject()
							πTemp002[2] = πg.NewInt(31).ToObject()
							πTemp002[3] = πg.NewInt(30).ToObject()
							πTemp002[4] = πg.NewInt(31).ToObject()
							πTemp002[5] = πg.NewInt(30).ToObject()
							πTemp002[6] = πg.NewInt(31).ToObject()
							πTemp002[7] = πg.NewInt(31).ToObject()
							πTemp002[8] = πg.NewInt(30).ToObject()
							πTemp002[9] = πg.NewInt(31).ToObject()
							πTemp002[10] = πg.NewInt(30).ToObject()
							πTemp002[11] = πg.NewInt(31).ToObject()
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µdim = πTemp001
							if πTemp007, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(πg.NewInt(2000).ToObject(), πTemp007).ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp007 = πg.NewTuple2(πg.NewInt(2002).ToObject(), πTemp008).ToObject()
							πTemp003 = πg.NewTuple2(πTemp006, πTemp007).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(12)
							πTemp004 = false
						Label11:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label13
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
									continue
								}
								µyear = πTemp006
								µisleap = πTemp007
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(11)            
							// line 605: n = self.theclass(year, 1, 1).toordinal()
							πF.SetLineno(605)
							πTemp002 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µyear, "year"); πE != nil {
								continue
							}
							πTemp002[0] = µyear
							πTemp002[1] = πg.NewInt(1).ToObject()
							πTemp002[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp003, πE = πg.GetAttr(πF, πTemp006, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µn = πTemp006
							πTemp002 = πF.MakeArgs(2)
							πTemp010 = πF.MakeArgs(2)
							πTemp010[0] = πg.NewInt(1).ToObject()
							πTemp010[1] = πg.NewInt(13).ToObject()
							if πTemp006, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp002[0] = πTemp007
							if πE = πg.CheckLocal(πF, µdim, "dim"); πE != nil {
								continue
							}
							πTemp002[1] = µdim
							if πTemp006, πE = πg.ResolveGlobal(πF, ßzip); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp003, πE = πg.Iter(πF, πTemp007); πE != nil {
								continue
							}
							πF.PushCheckpoint(15)
							πTemp005 = false
						Label14:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label16
							}
							if πTemp006, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp011 = !isStop
							} else {
								πTemp011 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp007}, πg.TieTarget{Target: &πTemp008}}}, πTemp006); πE != nil {
									continue
								}
								µmonth = πTemp007
								µmaxday = πTemp008
							}
							if πE != nil || !πTemp011 {
								continue
							}
							πF.PushCheckpoint(14)            
							if πE = πg.CheckLocal(πF, µmonth, "month"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Eq(πF, µmonth, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp006 = πTemp007
							if πTemp011, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if !πTemp011 {
								goto Label17
							}
							if πE = πg.CheckLocal(πF, µisleap, "isleap"); πE != nil {
								continue
							}
							πTemp006 = µisleap
						Label17:
							if πTemp011, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label18
							}
							goto Label19
							// line 607: if month == 2 and isleap:
							πF.SetLineno(607)
						Label18:
							// line 608: maxday += 1
							πF.SetLineno(608)
							if πE = πg.CheckLocal(πF, µmaxday, "maxday"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, µmaxday, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µmaxday = πTemp006
							goto Label19
						Label19:
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µmaxday, "maxday"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µmaxday, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp007
							if πTemp007, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp006, πE = πg.Iter(πF, πTemp008); πE != nil {
								continue
							}
							πF.PushCheckpoint(21)
							πTemp011 = false
						Label20:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp011 {
								πF.PopCheckpoint()
								goto Label22
							}
							if πTemp007, πE = πg.Next(πF, πTemp006); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp012 = !isStop
							} else {
								πTemp012 = true
								µday = πTemp007
							}
							if πE != nil || !πTemp012 {
								continue
							}
							πF.PushCheckpoint(20)            
							// line 610: d = self.theclass(year, month, day)
							πF.SetLineno(610)
							πTemp002 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µyear, "year"); πE != nil {
								continue
							}
							πTemp002[0] = µyear
							if πE = πg.CheckLocal(πF, µmonth, "month"); πE != nil {
								continue
							}
							πTemp002[1] = µmonth
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							πTemp002[2] = µday
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp008
							// line 611: self.assertEqual(d.toordinal(), n)
							πF.SetLineno(611)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µd, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp008
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							πTemp002[1] = µn
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 612: self.assertEqual(d, self.theclass.fromordinal(n))
							πF.SetLineno(612)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002[0] = µd
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							πTemp010[0] = µn
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp008.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp002[1] = πTemp007
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 613: n += 1
							πF.SetLineno(613)
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IAdd(πF, µn, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µn = πTemp007
							continue
						Label21:
							if πE != nil || πR != nil {
								continue
							}
						Label22:
							continue
						Label15:
							if πE != nil || πR != nil {
								continue
							}
						Label16:
							continue
						Label12:
							if πE != nil || πR != nil {
								continue
							}
						Label13:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_ordinal_conversions.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 615: def test_extreme_ordinals(self):
					πF.SetLineno(615)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_extreme_ordinals", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µaord *πg.Object = πg.UnboundLocal; _ = µaord
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []πg.Param
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 616: a = self.theclass.min
							πF.SetLineno(616)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßmin, nil); πE != nil {
								continue
							}
							µa = πTemp002
							// line 617: a = self.theclass(a.year, a.month, a.day)  # get rid of time parts
							πF.SetLineno(617)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßyear, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßmonth, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßday, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µa = πTemp002
							// line 618: aord = a.toordinal()
							πF.SetLineno(618)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µaord = πTemp002
							// line 619: b = a.fromordinal(aord)
							πF.SetLineno(619)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
								continue
							}
							πTemp003[0] = µaord
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µb = πTemp002
							// line 620: self.assertEqual(a, b)
							πF.SetLineno(620)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp003[0] = µa
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							πTemp003[1] = µb
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 622: self.assertRaises(ValueError, lambda: a.fromordinal(aord - 1))
							πF.SetLineno(622)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 622: self.assertRaises(ValueError, lambda: a.fromordinal(aord - 1))
									πF.SetLineno(622)
									πTemp001 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Sub(πF, µaord, πg.NewInt(1).ToObject()); πE != nil {
										continue
									}
									πTemp001[0] = πTemp002
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µa, ßfromordinal, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									πR = πTemp003
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 624: b = a + timedelta(days=1)
							πF.SetLineno(624)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µa, πTemp006); πE != nil {
								continue
							}
							µb = πTemp001
							// line 625: self.assertEqual(b.toordinal(), aord + 1)
							πF.SetLineno(625)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µb, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µaord, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 626: self.assertEqual(b, self.theclass.fromordinal(aord + 1))
							πF.SetLineno(626)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							πTemp003[0] = µb
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µaord, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 628: a = self.theclass.max
							πF.SetLineno(628)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßmax, nil); πE != nil {
								continue
							}
							µa = πTemp002
							// line 629: a = self.theclass(a.year, a.month, a.day)  # get rid of time parts
							πF.SetLineno(629)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßyear, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßmonth, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßday, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µa = πTemp002
							// line 630: aord = a.toordinal()
							πF.SetLineno(630)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µaord = πTemp002
							// line 631: b = a.fromordinal(aord)
							πF.SetLineno(631)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
								continue
							}
							πTemp003[0] = µaord
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µa, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µb = πTemp002
							// line 632: self.assertEqual(a, b)
							πF.SetLineno(632)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp003[0] = µa
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							πTemp003[1] = µb
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 634: self.assertRaises(ValueError, lambda: a.fromordinal(aord + 1))
							πF.SetLineno(634)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 634: self.assertRaises(ValueError, lambda: a.fromordinal(aord + 1))
									πF.SetLineno(634)
									πTemp001 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.Add(πF, µaord, πg.NewInt(1).ToObject()); πE != nil {
										continue
									}
									πTemp001[0] = πTemp002
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µa, ßfromordinal, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									πR = πTemp003
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 636: b = a - timedelta(days=1)
							πF.SetLineno(636)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µa, πTemp006); πE != nil {
								continue
							}
							µb = πTemp001
							// line 637: self.assertEqual(b.toordinal(), aord - 1)
							πF.SetLineno(637)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µb, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µaord, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 638: self.assertEqual(b, self.theclass.fromordinal(aord - 1))
							πF.SetLineno(638)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							πTemp003[0] = µb
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µaord, "aord"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µaord, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßfromordinal, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_extreme_ordinals.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 640: def test_bad_constructor_arguments(self):
					πF.SetLineno(640)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_bad_constructor_arguments", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 642: self.theclass(MINYEAR, 1, 1)  # no exception
							πF.SetLineno(642)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMINYEAR); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 643: self.theclass(MAXYEAR, 1, 1)  # no exception
							πF.SetLineno(643)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 644: self.assertRaises(ValueError, self.theclass, MINYEAR-1, 1, 1)
							πF.SetLineno(644)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMINYEAR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 645: self.assertRaises(ValueError, self.theclass, MAXYEAR+1, 1, 1)
							πF.SetLineno(645)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 647: self.theclass(2000, 1, 1)    # no exception
							πF.SetLineno(647)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 648: self.theclass(2000, 12, 1)   # no exception
							πF.SetLineno(648)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 649: self.assertRaises(ValueError, self.theclass, 2000, 0, 1)
							πF.SetLineno(649)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(0).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 650: self.assertRaises(ValueError, self.theclass, 2000, 13, 1)
							πF.SetLineno(650)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(13).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 652: self.theclass(2000, 2, 29)   # no exception
							πF.SetLineno(652)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 653: self.theclass(2004, 2, 29)   # no exception
							πF.SetLineno(653)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2004).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 654: self.theclass(2400, 2, 29)   # no exception
							πF.SetLineno(654)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2400).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 655: self.assertRaises(ValueError, self.theclass, 2000, 2, 30)
							πF.SetLineno(655)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(30).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 656: self.assertRaises(ValueError, self.theclass, 2001, 2, 29)
							πF.SetLineno(656)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2001).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 657: self.assertRaises(ValueError, self.theclass, 2100, 2, 29)
							πF.SetLineno(657)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2100).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 658: self.assertRaises(ValueError, self.theclass, 1900, 2, 29)
							πF.SetLineno(658)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(1900).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 659: self.assertRaises(ValueError, self.theclass, 2000, 1, 0)
							πF.SetLineno(659)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 660: self.assertRaises(ValueError, self.theclass, 2000, 1, 32)
							πF.SetLineno(660)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(32).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bad_constructor_arguments.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 663: def test_hash_equality(self):
					πF.SetLineno(663)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_hash_equality", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µe *πg.Object = πg.UnboundLocal; _ = µe
						var µdic *πg.Object = πg.UnboundLocal; _ = µdic
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 664: d = self.theclass(2000, 12, 31)
							πF.SetLineno(664)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 666: e = self.theclass(2000, 12, 31)
							πF.SetLineno(666)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µe = πTemp003
							// line 667: self.assertEqual(d, e)
							πF.SetLineno(667)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp001[1] = µe
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 668: self.assertEqual(hash(d), hash(e))
							πF.SetLineno(668)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp004[0] = µd
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp004[0] = µe
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 670: dic = {d: 1}
							πF.SetLineno(670)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, µd, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µdic = πTemp002
							// line 671: dic[e] = 2
							πF.SetLineno(671)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp003 = µe
							if πE = πg.SetItem(πF, µdic, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 672: self.assertEqual(len(dic), 1)
							πF.SetLineno(672)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							πTemp004[0] = µdic
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 673: self.assertEqual(dic[d], 2)
							πF.SetLineno(673)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002 = µd
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 674: self.assertEqual(dic[e], 2)
							πF.SetLineno(674)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp002 = µe
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 676: d = self.theclass(2001,  1,  1)
							πF.SetLineno(676)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2001).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 678: e = self.theclass(2001,  1,  1)
							πF.SetLineno(678)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2001).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µe = πTemp003
							// line 679: self.assertEqual(d, e)
							πF.SetLineno(679)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp001[1] = µe
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 680: self.assertEqual(hash(d), hash(e))
							πF.SetLineno(680)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp004[0] = µd
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp004[0] = µe
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 682: dic = {d: 1}
							πF.SetLineno(682)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, µd, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µdic = πTemp002
							// line 683: dic[e] = 2
							πF.SetLineno(683)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp003 = µe
							if πE = πg.SetItem(πF, µdic, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 684: self.assertEqual(len(dic), 1)
							πF.SetLineno(684)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							πTemp004[0] = µdic
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 685: self.assertEqual(dic[d], 2)
							πF.SetLineno(685)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002 = µd
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 686: self.assertEqual(dic[e], 2)
							πF.SetLineno(686)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp002 = µe
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_hash_equality.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 662: @unittest.expectedFailure
					πF.SetLineno(662)
					πTemp004 = πF.MakeArgs(1)
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßtest_hash_equality); πE != nil {
						continue
					}
					πTemp004[0] = πTemp009
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp010.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_hash_equality.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 688: def test_computations(self):
					πF.SetLineno(688)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_computations", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var µdiff *πg.Object = πg.UnboundLocal; _ = µdiff
						var µday *πg.Object = πg.UnboundLocal; _ = µday
						var µweek *πg.Object = πg.UnboundLocal; _ = µweek
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 []πg.Param
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 689: a = self.theclass(2002, 1, 31)
							πF.SetLineno(689)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp003
							// line 690: b = self.theclass(1956, 1, 31)
							πF.SetLineno(690)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1956).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µb = πTemp003
							// line 692: diff = a-b
							πF.SetLineno(692)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µb); πE != nil {
								continue
							}
							µdiff = πTemp002
							// line 693: self.assertEqual(diff.days, 46*365 + len(range(1956, 2002, 4)))
							πF.SetLineno(693)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdiff, ßdays, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(46).ToObject(), πg.NewInt(365).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(3)
							πTemp005[0] = πg.NewInt(1956).ToObject()
							πTemp005[1] = πg.NewInt(2002).ToObject()
							πTemp005[2] = πg.NewInt(4).ToObject()
							if πTemp006, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp007
							if πTemp006, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.Add(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 694: self.assertEqual(diff.seconds, 0)
							πF.SetLineno(694)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdiff, ßseconds, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 695: self.assertEqual(diff.microseconds, 0)
							πF.SetLineno(695)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdiff, ßmicroseconds, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 697: day = timedelta(1)
							πF.SetLineno(697)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(1).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µday = πTemp003
							// line 698: week = timedelta(7)
							πF.SetLineno(698)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(7).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µweek = πTemp003
							// line 699: a = self.theclass(2002, 3, 2)
							πF.SetLineno(699)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp003
							// line 700: self.assertEqual(a + day, self.theclass(2002, 3, 3))
							πF.SetLineno(700)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, µday); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 701: self.assertEqual(day + a, self.theclass(2002, 3, 3))
							πF.SetLineno(701)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µday, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 702: self.assertEqual(a - day, self.theclass(2002, 3, 1))
							πF.SetLineno(702)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µday); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 703: self.assertEqual(-day + a, self.theclass(2002, 3, 1))
							πF.SetLineno(703)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 704: self.assertEqual(a + week, self.theclass(2002, 3, 9))
							πF.SetLineno(704)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, µweek); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(9).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 705: self.assertEqual(a - week, self.theclass(2002, 2, 23))
							πF.SetLineno(705)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µweek); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(2).ToObject()
							πTemp004[2] = πg.NewInt(23).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 706: self.assertEqual(a + 52*week, self.theclass(2003, 3, 1))
							πF.SetLineno(706)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(52).ToObject(), µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2003).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 707: self.assertEqual(a - 52*week, self.theclass(2001, 3, 3))
							πF.SetLineno(707)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(52).ToObject(), µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2001).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 708: self.assertEqual((a + week) - a, week)
							πF.SetLineno(708)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µweek); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							πTemp001[1] = µweek
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 709: self.assertEqual((a + day) - a, day)
							πF.SetLineno(709)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							πTemp001[1] = µday
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 710: self.assertEqual((a - week) - a, -week)
							πF.SetLineno(710)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µweek); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µweek); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 711: self.assertEqual((a - day) - a, -day)
							πF.SetLineno(711)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µday); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 712: self.assertEqual(a - (a + week), -week)
							πF.SetLineno(712)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µweek); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 713: self.assertEqual(a - (a + day), -day)
							πF.SetLineno(713)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µday); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µday); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 714: self.assertEqual(a - (a - week), week)
							πF.SetLineno(714)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							πTemp001[1] = µweek
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 715: self.assertEqual(a - (a - day), day)
							πF.SetLineno(715)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µday); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							πTemp001[1] = µday
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp003 = πg.NewTuple3(πg.NewInt(1).ToObject(), πg.NewLongFromBytes([]byte{0x1,}).ToObject(), πg.NewFloat(1.0).ToObject()).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp008 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 719: self.assertRaises(TypeError, lambda: a+i)
							πF.SetLineno(719)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 719: self.assertRaises(TypeError, lambda: a+i)
									πF.SetLineno(719)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µa, µi); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 720: self.assertRaises(TypeError, lambda: a-i)
							πF.SetLineno(720)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 720: self.assertRaises(TypeError, lambda: a-i)
									πF.SetLineno(720)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µa, µi); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 721: self.assertRaises(TypeError, lambda: i+a)
							πF.SetLineno(721)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 721: self.assertRaises(TypeError, lambda: i+a)
									πF.SetLineno(721)
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µi, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 722: self.assertRaises(TypeError, lambda: i-a)
							πF.SetLineno(722)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 722: self.assertRaises(TypeError, lambda: i-a)
									πF.SetLineno(722)
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µi, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 725: self.assertRaises(TypeError, lambda: day - a)
							πF.SetLineno(725)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 725: self.assertRaises(TypeError, lambda: day - a)
									πF.SetLineno(725)
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µday, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 727: self.assertRaises(TypeError, lambda: day * a)
							πF.SetLineno(727)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 727: self.assertRaises(TypeError, lambda: day * a)
									πF.SetLineno(727)
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µday, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 728: self.assertRaises(TypeError, lambda: a * day)
							πF.SetLineno(728)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 728: self.assertRaises(TypeError, lambda: a * day)
									πF.SetLineno(728)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µa, µday); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 729: self.assertRaises(TypeError, lambda: day // a)
							πF.SetLineno(729)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 729: self.assertRaises(TypeError, lambda: day // a)
									πF.SetLineno(729)
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µday, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 730: self.assertRaises(TypeError, lambda: a // day)
							πF.SetLineno(730)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 730: self.assertRaises(TypeError, lambda: a // day)
									πF.SetLineno(730)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µa, µday); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 731: self.assertRaises(TypeError, lambda: a * a)
							πF.SetLineno(731)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 731: self.assertRaises(TypeError, lambda: a * a)
									πF.SetLineno(731)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µa, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 732: self.assertRaises(TypeError, lambda: a // a)
							πF.SetLineno(732)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 732: self.assertRaises(TypeError, lambda: a // a)
									πF.SetLineno(732)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µa, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 734: self.assertRaises(TypeError, lambda: a + a)
							πF.SetLineno(734)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 734: self.assertRaises(TypeError, lambda: a + a)
									πF.SetLineno(734)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µa, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_computations.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 736: def test_overflow(self):
					πF.SetLineno(736)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_overflow", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtiny *πg.Object = πg.UnboundLocal; _ = µtiny
						var µdelta *πg.Object = πg.UnboundLocal; _ = µdelta
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 737: tiny = self.theclass.resolution
							πF.SetLineno(737)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßresolution, nil); πE != nil {
								continue
							}
							µtiny = πTemp002
							πTemp003 = make([]*πg.Object, 3)
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							πTemp003[0] = µtiny
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(1).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[1] = πTemp005
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewInt(2).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003[2] = πTemp005
							πTemp002 = πg.NewList(πTemp003...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µdelta = πTemp002
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 740: dt = self.theclass.min + delta
							πF.SetLineno(740)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp005, ßmin, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp008, µdelta); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 741: dt -= delta  # no problem
							πF.SetLineno(741)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, µdt, µdelta); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 742: self.assertRaises(OverflowError, dt.__sub__, delta)
							πF.SetLineno(742)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ß__sub__, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							πTemp003[2] = µdelta
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 743: self.assertRaises(OverflowError, dt.__add__, -delta)
							πF.SetLineno(743)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ß__add__, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µdelta); πE != nil {
								continue
							}
							πTemp003[2] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 745: dt = self.theclass.max - delta
							πF.SetLineno(745)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp005, ßmax, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp008, µdelta); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 746: dt += delta  # no problem
							πF.SetLineno(746)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, µdt, µdelta); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 747: self.assertRaises(OverflowError, dt.__add__, delta)
							πF.SetLineno(747)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ß__add__, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							πTemp003[2] = µdelta
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 748: self.assertRaises(OverflowError, dt.__sub__, -delta)
							πF.SetLineno(748)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßOverflowError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ß__sub__, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µdelta); πE != nil {
								continue
							}
							πTemp003[2] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_overflow.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 750: def test_fromtimestamp(self):
					πF.SetLineno(750)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_fromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µyear *πg.Object = πg.UnboundLocal; _ = µyear
						var µmonth *πg.Object = πg.UnboundLocal; _ = µmonth
						var µday *πg.Object = πg.UnboundLocal; _ = µday
						var µts *πg.Object = πg.UnboundLocal; _ = µts
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 751: import time
							πF.SetLineno(751)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							// line 754: year, month, day = 1999, 9, 19
							πF.SetLineno(754)
							πTemp001 = πg.NewTuple3(πg.NewInt(1999).ToObject(), πg.NewInt(9).ToObject(), πg.NewInt(19).ToObject()).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp003}, πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp005}}}, πTemp001); πE != nil {
								continue
							}
							µyear = πTemp003
							µmonth = πTemp004
							µday = πTemp005
							// line 755: ts = time.mktime((year, month, day, 0, 0, 0, 0, 0, -1))
							πF.SetLineno(755)
							πTemp002 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 9)
							if πE = πg.CheckLocal(πF, µyear, "year"); πE != nil {
								continue
							}
							πTemp006[0] = µyear
							if πE = πg.CheckLocal(πF, µmonth, "month"); πE != nil {
								continue
							}
							πTemp006[1] = µmonth
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							πTemp006[2] = µday
							πTemp006[3] = πg.NewInt(0).ToObject()
							πTemp006[4] = πg.NewInt(0).ToObject()
							πTemp006[5] = πg.NewInt(0).ToObject()
							πTemp006[6] = πg.NewInt(0).ToObject()
							πTemp006[7] = πg.NewInt(0).ToObject()
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp006[8] = πTemp003
							πTemp001 = πg.NewTuple(πTemp006...).ToObject()
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßmktime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µts = πTemp003
							// line 756: d = self.theclass.fromtimestamp(ts)
							πF.SetLineno(756)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp001
							// line 757: self.assertEqual(d.year, year)
							πF.SetLineno(757)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µd, ßyear, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µyear, "year"); πE != nil {
								continue
							}
							πTemp002[1] = µyear
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 758: self.assertEqual(d.month, month)
							πF.SetLineno(758)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µd, ßmonth, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmonth, "month"); πE != nil {
								continue
							}
							πTemp002[1] = µmonth
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 759: self.assertEqual(d.day, day)
							πF.SetLineno(759)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µd, ßday, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							πTemp002[1] = µday
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_fromtimestamp.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 761: def test_insane_fromtimestamp(self):
					πF.SetLineno(761)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_insane_fromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µinsane *πg.Object = πg.UnboundLocal; _ = µinsane
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewFloat(1e+200).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(πTemp003, πg.NewFloat(1e+200).ToObject()).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µinsane = πTemp002
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 767: self.assertRaises(ValueError, self.theclass.fromtimestamp,
							πF.SetLineno(767)
							πTemp006 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromtimestamp, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp003
							if πE = πg.CheckLocal(πF, µinsane, "insane"); πE != nil {
								continue
							}
							πTemp006[2] = µinsane
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_insane_fromtimestamp.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 770: def test_today(self):
					πF.SetLineno(770)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_today", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µdummy *πg.Object = πg.UnboundLocal; _ = µdummy
						var µtoday *πg.Object = πg.UnboundLocal; _ = µtoday
						var µts *πg.Object = πg.UnboundLocal; _ = µts
						var µtodayagain *πg.Object = πg.UnboundLocal; _ = µtodayagain
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 771: import time
							πF.SetLineno(771)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(3).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µdummy = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 776: today = self.theclass.today()
							πF.SetLineno(776)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßtoday, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtoday = πTemp003
							// line 777: ts = time.time()
							πF.SetLineno(777)
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µtime, ßtime, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µts = πTemp004
							// line 778: todayagain = self.theclass.fromtimestamp(ts)
							πF.SetLineno(778)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µtodayagain = πTemp003
							if πE = πg.CheckLocal(πF, µtoday, "today"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtodayagain, "todayagain"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µtoday, µtodayagain); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label4
							}
							goto Label5
							// line 779: if today == todayagain:
							πF.SetLineno(779)
						Label4:
							// line 780: break
							πF.SetLineno(780)
							πTemp005 = true
							continue
							goto Label5
						Label5:
							// line 791: time.sleep(0.1)
							πF.SetLineno(791)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewFloat(0.1).ToObject()
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µtime, ßsleep, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πE = πg.CheckLocal(πF, µtoday, "today"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtodayagain, "todayagain"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.NE(πF, µtoday, µtodayagain); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label6
							}
							goto Label7
							// line 795: if today != todayagain:
							πF.SetLineno(795)
						Label6:
							// line 796: self.assertAlmostEqual(todayagain, today,
							πF.SetLineno(796)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtodayagain, "todayagain"); πE != nil {
								continue
							}
							πTemp002[0] = µtodayagain
							if πE = πg.CheckLocal(πF, µtoday, "today"); πE != nil {
								continue
							}
							πTemp002[1] = µtoday
							πTemp007 = πg.KWArgs{
								{"seconds", πg.NewFloat(0.5).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"delta", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertAlmostEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label7
						Label7:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_today.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 799: def test_weekday(self):
					πF.SetLineno(799)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_weekday", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(7).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 802: self.assertEqual(self.theclass(2002, 3, 4+i).weekday(), i)
							πF.SetLineno(802)
							πTemp002 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(3)
							πTemp007[0] = πg.NewInt(2002).ToObject()
							πTemp007[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(4).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßweekday, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp002[1] = µi
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 803: self.assertEqual(self.theclass(2002, 3, 4+i).isoweekday(), i+1)
							πF.SetLineno(803)
							πTemp002 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(3)
							πTemp007[0] = πg.NewInt(2002).ToObject()
							πTemp007[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(4).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßisoweekday, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 805: self.assertEqual(self.theclass(1956, 1, 2+i).weekday(), i)
							πF.SetLineno(805)
							πTemp002 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(3)
							πTemp007[0] = πg.NewInt(1956).ToObject()
							πTemp007[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(2).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßweekday, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp002[1] = µi
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 806: self.assertEqual(self.theclass(1956, 1, 2+i).isoweekday(), i+1)
							πF.SetLineno(806)
							πTemp002 = πF.MakeArgs(2)
							πTemp007 = πF.MakeArgs(3)
							πTemp007[0] = πg.NewInt(1956).ToObject()
							πTemp007[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(2).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßisoweekday, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_weekday.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 808: def test_isocalendar(self):
					πF.SetLineno(808)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_isocalendar", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(7).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 812: d = self.theclass(2003, 12, 22+i)
							πF.SetLineno(812)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2003).ToObject()
							πTemp002[1] = πg.NewInt(12).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(22).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp004
							// line 813: self.assertEqual(d.isocalendar(), (2003, 52, i+1))
							πF.SetLineno(813)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple3(πg.NewInt(2003).ToObject(), πg.NewInt(52).ToObject(), πTemp004).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 814: d = self.theclass(2003, 12, 29) + timedelta(i)
							πF.SetLineno(814)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2003).ToObject()
							πTemp002[1] = πg.NewInt(12).ToObject()
							πTemp002[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp002[0] = µi
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp003, πE = πg.Add(πF, πTemp007, πTemp008); πE != nil {
								continue
							}
							µd = πTemp003
							// line 815: self.assertEqual(d.isocalendar(), (2004, 1, i+1))
							πF.SetLineno(815)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple3(πg.NewInt(2004).ToObject(), πg.NewInt(1).ToObject(), πTemp004).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 816: d = self.theclass(2004, 1, 5+i)
							πF.SetLineno(816)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2004).ToObject()
							πTemp002[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(5).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp004
							// line 817: self.assertEqual(d.isocalendar(), (2004, 2, i+1))
							πF.SetLineno(817)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple3(πg.NewInt(2004).ToObject(), πg.NewInt(2).ToObject(), πTemp004).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 818: d = self.theclass(2009, 12, 21+i)
							πF.SetLineno(818)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2009).ToObject()
							πTemp002[1] = πg.NewInt(12).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(21).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp004
							// line 819: self.assertEqual(d.isocalendar(), (2009, 52, i+1))
							πF.SetLineno(819)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple3(πg.NewInt(2009).ToObject(), πg.NewInt(52).ToObject(), πTemp004).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 820: d = self.theclass(2009, 12, 28) + timedelta(i)
							πF.SetLineno(820)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2009).ToObject()
							πTemp002[1] = πg.NewInt(12).ToObject()
							πTemp002[2] = πg.NewInt(28).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp002[0] = µi
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp003, πE = πg.Add(πF, πTemp007, πTemp008); πE != nil {
								continue
							}
							µd = πTemp003
							// line 821: self.assertEqual(d.isocalendar(), (2009, 53, i+1))
							πF.SetLineno(821)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple3(πg.NewInt(2009).ToObject(), πg.NewInt(53).ToObject(), πTemp004).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 822: d = self.theclass(2010, 1, 4+i)
							πF.SetLineno(822)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2010).ToObject()
							πTemp002[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(4).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp004
							// line 823: self.assertEqual(d.isocalendar(), (2010, 1, i+1))
							πF.SetLineno(823)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple3(πg.NewInt(2010).ToObject(), πg.NewInt(1).ToObject(), πTemp004).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_isocalendar.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 825: def test_iso_long_years(self):
					πF.SetLineno(825)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_iso_long_years", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µISO_LONG_YEARS_TABLE *πg.Object = πg.UnboundLocal; _ = µISO_LONG_YEARS_TABLE
						var µiso_long_years *πg.Object = πg.UnboundLocal; _ = µiso_long_years
						var µL *πg.Object = πg.UnboundLocal; _ = µL
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µd1 *πg.Object = πg.UnboundLocal; _ = µd1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 828: ISO_LONG_YEARS_TABLE = """
							πF.SetLineno(828)
							µISO_LONG_YEARS_TABLE = πg.NewStr("\n              4   32   60   88\n              9   37   65   93\n             15   43   71   99\n             20   48   76\n             26   54   82\n\n            105  133  161  189\n            111  139  167  195\n            116  144  172\n            122  150  178\n            128  156  184\n\n            201  229  257  285\n            207  235  263  291\n            212  240  268  296\n            218  246  274\n            224  252  280\n\n            303  331  359  387\n            308  336  364  392\n            314  342  370  398\n            320  348  376\n            325  353  381\n        ").ToObject()
							// line 853: iso_long_years = map(int, ISO_LONG_YEARS_TABLE.split())
							πF.SetLineno(853)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µISO_LONG_YEARS_TABLE, "ISO_LONG_YEARS_TABLE"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µISO_LONG_YEARS_TABLE, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßmap); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µiso_long_years = πTemp003
							// line 854: iso_long_years.sort()
							πF.SetLineno(854)
							if πE = πg.CheckLocal(πF, µiso_long_years, "iso_long_years"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µiso_long_years, ßsort, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 855: L = []
							πF.SetLineno(855)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µL = πTemp002
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(400).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 857: d = self.theclass(2000+i, 12, 31)
							πF.SetLineno(857)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(2000).ToObject(), µi); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp004
							// line 858: d1 = self.theclass(1600+i, 12, 31)
							πF.SetLineno(858)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(1600).ToObject(), µi); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd1 = πTemp004
							// line 859: self.assertEqual(d.isocalendar()[1:], d1.isocalendar()[1:])
							πF.SetLineno(859)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(1).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp008, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp004
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(1).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µd1, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp008, πTemp003); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp004 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µd, ßisocalendar, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp008.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, πTemp009, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp007, πg.NewInt(53).ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label4
							}
							goto Label5
							// line 860: if d.isocalendar()[1] == 53:
							πF.SetLineno(860)
						Label4:
							// line 861: L.append(i)
							πF.SetLineno(861)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp001[0] = µi
							if πE = πg.CheckLocal(πF, µL, "L"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µL, ßappend, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 862: self.assertEqual(L, iso_long_years)
							πF.SetLineno(862)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µL, "L"); πE != nil {
								continue
							}
							πTemp001[0] = µL
							if πE = πg.CheckLocal(πF, µiso_long_years, "iso_long_years"); πE != nil {
								continue
							}
							πTemp001[1] = µiso_long_years
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_iso_long_years.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 864: def test_isoformat(self):
					πF.SetLineno(864)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("test_isoformat", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 865: t = self.theclass(2, 3, 2)
							πF.SetLineno(865)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 866: self.assertEqual(t.isoformat(), "0002-03-02")
							πF.SetLineno(866)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_isoformat.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 868: def test_ctime(self):
					πF.SetLineno(868)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("test_ctime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 869: t = self.theclass(2002, 3, 2)
							πF.SetLineno(869)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 870: self.assertEqual(t.ctime(), "Sat Mar  2 00:00:00 2002")
							πF.SetLineno(870)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßctime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("Sat Mar  2 00:00:00 2002").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_ctime.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 873: def test_strftime(self):
					πF.SetLineno(873)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("test_strftime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µf *πg.Object = πg.UnboundLocal; _ = µf
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 874: t = self.theclass(2005, 3, 2)
							πF.SetLineno(874)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2005).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 875: self.assertEqual(t.strftime("m:%m d:%d y:%y"), "m:03 d:02 y:05")
							πF.SetLineno(875)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("m:%m d:%d y:%y").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("m:03 d:02 y:05").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 876: self.assertEqual(t.strftime(""), "") # SF bug #761337
							πF.SetLineno(876)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 877: self.assertEqual(t.strftime('x'*1000), 'x'*1000) # SF bug #1556784
							πF.SetLineno(877)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Mul(πF, ßx.ToObject(), πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.Mul(πF, ßx.ToObject(), πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 879: self.assertRaises(TypeError, t.strftime) # needs an arg
							πF.SetLineno(879)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 880: self.assertRaises(TypeError, t.strftime, "one", "two") # too many args
							πF.SetLineno(880)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = ßone.ToObject()
							πTemp001[3] = ßtwo.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 881: self.assertRaises(TypeError, t.strftime, 42) # arg wrong type
							πF.SetLineno(881)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 884: self.assertEqual(t.strftime(u"%m"), "03")
							πF.SetLineno(884)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewUnicode("%m").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = ß03.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 887: self.assertEqual(t.strftime("'%z' '%Z'"), "'' ''")
							πF.SetLineno(887)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("'%z' '%Z'").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("'' ''").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = make([]*πg.Object, 3)
							πTemp001[0] = πg.NewStr("%e").ToObject()
							πTemp001[1] = πg.NewStr("%").ToObject()
							πTemp001[2] = πg.NewStr("%#").ToObject()
							πTemp003 = πg.NewList(πTemp001...).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µf = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 898: try:
							πF.SetLineno(898)
							πF.PushCheckpoint(5)
							// line 899: t.strftime(f)
							πF.SetLineno(899)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							πTemp001[0] = µf
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πF.PopCheckpoint()
							goto Label4
						Label5:
							if πE == nil {
							  continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label6
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 900: except ValueError:
							πF.SetLineno(900)
						Label6:
							// line 901: pass
							πF.SetLineno(901)
							πF.RestoreExc(nil, nil)
							goto Label4
						Label4:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 904: t.strftime("%f")
							πF.SetLineno(904)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("%f").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_strftime.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 872: @unittest.expectedFailure
					πF.SetLineno(872)
					πTemp004 = πF.MakeArgs(1)
					if πTemp020, πE = πg.ResolveClass(πF, πClass, nil, ßtest_strftime); πE != nil {
						continue
					}
					πTemp004[0] = πTemp020
					if πTemp020, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp021, πE = πg.GetAttr(πF, πTemp020, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp020, πE = πTemp021.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_strftime.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 908: def test_format(self):
					πF.SetLineno(908)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp020 = πg.NewFunction(πg.NewCode("test_format", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var µA *πg.Object = πg.UnboundLocal; _ = µA
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µB *πg.Object = πg.UnboundLocal; _ = µB
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var µfmt *πg.Object = πg.UnboundLocal; _ = µfmt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 909: dt = self.theclass(2007, 9, 10)
							πF.SetLineno(909)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2007).ToObject()
							πTemp001[1] = πg.NewInt(9).ToObject()
							πTemp001[2] = πg.NewInt(10).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 910: self.assertEqual(dt.__format__(''), str(dt))
							πF.SetLineno(910)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp004[0] = µdt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 913: class A(self.theclass):
							πF.SetLineno(913)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("A", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 914: def __str__(self):
									πF.SetLineno(914)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__str__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 915: return 'A'
											πF.SetLineno(915)
											πR = ßA.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__str__.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("A").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µA = πTemp006
							// line 916: a = A(2007, 9, 10)
							πF.SetLineno(916)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2007).ToObject()
							πTemp001[1] = πg.NewInt(9).ToObject()
							πTemp001[2] = πg.NewInt(10).ToObject()
							if πE = πg.CheckLocal(πF, µA, "A"); πE != nil {
								continue
							}
							if πTemp002, πE = µA.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp002
							// line 917: self.assertEqual(a.__format__(''), 'A')
							πF.SetLineno(917)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = ßA.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 920: class B(self.theclass):
							πF.SetLineno(920)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("B", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 921: def strftime(self, format_spec):
									πF.SetLineno(921)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "format_spec", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("strftime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µformat_spec *πg.Object = πArgs[1]; _ = µformat_spec
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 922: return 'B'
											πF.SetLineno(922)
											πR = ßB.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßstrftime.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("B").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µB = πTemp006
							// line 923: b = B(2007, 9, 10)
							πF.SetLineno(923)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2007).ToObject()
							πTemp001[1] = πg.NewInt(9).ToObject()
							πTemp001[2] = πg.NewInt(10).ToObject()
							if πE = πg.CheckLocal(πF, µB, "B"); πE != nil {
								continue
							}
							if πTemp002, πE = µB.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µb = πTemp002
							// line 924: self.assertEqual(b.__format__(''), str(dt))
							πF.SetLineno(924)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µb, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp004[0] = µdt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = make([]*πg.Object, 3)
							πTemp001[0] = πg.NewStr("m:%m d:%d y:%y").ToObject()
							πTemp001[1] = πg.NewStr("m:%m d:%d y:%y H:%H M:%M S:%S").ToObject()
							πTemp001[2] = πg.NewStr("%z %Z").ToObject()
							πTemp003 = πg.NewList(πTemp001...).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µfmt = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 930: self.assertEqual(dt.__format__(fmt), dt.strftime(fmt))
							πF.SetLineno(930)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 931: self.assertEqual(a.__format__(fmt), dt.strftime(fmt))
							πF.SetLineno(931)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µa, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 932: self.assertEqual(b.__format__(fmt), 'B')
							πF.SetLineno(932)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µb, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp001[1] = ßB.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_format.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 907: @unittest.expectedFailure
					πF.SetLineno(907)
					πTemp004 = πF.MakeArgs(1)
					if πTemp021, πE = πg.ResolveClass(πF, πClass, nil, ßtest_format); πE != nil {
						continue
					}
					πTemp004[0] = πTemp021
					if πTemp021, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp022, πE = πg.GetAttr(πF, πTemp021, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp021, πE = πTemp022.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_format.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 934: def test_resolution_info(self):
					πF.SetLineno(934)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp021 = πg.NewFunction(πg.NewCode("test_resolution_info", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 935: self.assertIsInstance(self.theclass.min, self.theclass)
							πF.SetLineno(935)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 936: self.assertIsInstance(self.theclass.max, self.theclass)
							πF.SetLineno(936)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 937: self.assertIsInstance(self.theclass.resolution, timedelta)
							πF.SetLineno(937)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßresolution, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 938: self.assertTrue(self.theclass.max > self.theclass.min)
							πF.SetLineno(938)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßmax, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßmin, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, πTemp004, πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_resolution_info.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 940: def test_extreme_timedelta(self):
					πF.SetLineno(940)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp022 = πg.NewFunction(πg.NewCode("test_extreme_timedelta", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µbig *πg.Object = πg.UnboundLocal; _ = µbig
						var µn *πg.Object = πg.UnboundLocal; _ = µn
						var µjustasbig *πg.Object = πg.UnboundLocal; _ = µjustasbig
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 941: big = self.theclass.max - self.theclass.min
							πF.SetLineno(941)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							µbig = πTemp001
							// line 943: n = (big.days*24*3600 + big.seconds)*1000000 + big.microseconds
							πF.SetLineno(943)
							if πE = πg.CheckLocal(πF, µbig, "big"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µbig, ßdays, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Mul(πF, πTemp006, πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Mul(πF, πTemp005, πg.NewInt(3600).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbig, "big"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µbig, ßseconds, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp004, πTemp005); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mul(πF, πTemp003, πg.NewInt(1000000).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbig, "big"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µbig, ßmicroseconds, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							µn = πTemp001
							// line 945: justasbig = timedelta(0, 0, n)
							πF.SetLineno(945)
							πTemp007 = πF.MakeArgs(3)
							πTemp007[0] = πg.NewInt(0).ToObject()
							πTemp007[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
								continue
							}
							πTemp007[2] = µn
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µjustasbig = πTemp002
							// line 946: self.assertEqual(big, justasbig)
							πF.SetLineno(946)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbig, "big"); πE != nil {
								continue
							}
							πTemp007[0] = µbig
							if πE = πg.CheckLocal(πF, µjustasbig, "justasbig"); πE != nil {
								continue
							}
							πTemp007[1] = µjustasbig
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 947: self.assertEqual(self.theclass.min + big, self.theclass.max)
							πF.SetLineno(947)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbig, "big"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, µbig); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßmax, nil); πE != nil {
								continue
							}
							πTemp007[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 948: self.assertEqual(self.theclass.max - big, self.theclass.min)
							πF.SetLineno(948)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbig, "big"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, µbig); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßmin, nil); πE != nil {
								continue
							}
							πTemp007[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_extreme_timedelta.ToObject(), πTemp022); πE != nil {
						continue
					}
					// line 950: def test_timetuple(self):
					πF.SetLineno(950)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp023 = πg.NewFunction(πg.NewCode("test_timetuple", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(7).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 953: d = self.theclass(1956, 1, 2+i)
							πF.SetLineno(953)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(1956).ToObject()
							πTemp002[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(2).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp004
							// line 954: t = d.timetuple()
							πF.SetLineno(954)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp004
							// line 955: self.assertEqual(t, (1956, 1, 2+i, 0, 0, 0, i, 2+i, -1))
							πF.SetLineno(955)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							πTemp007 = make([]*πg.Object, 9)
							πTemp007[0] = πg.NewInt(1956).ToObject()
							πTemp007[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewInt(2).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[2] = πTemp004
							πTemp007[3] = πg.NewInt(0).ToObject()
							πTemp007[4] = πg.NewInt(0).ToObject()
							πTemp007[5] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp007[6] = µi
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewInt(2).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[7] = πTemp004
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp007[8] = πTemp004
							πTemp003 = πg.NewTuple(πTemp007...).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 957: d = self.theclass(1956, 2, 1+i)
							πF.SetLineno(957)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(1956).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(1).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp004
							// line 958: t = d.timetuple()
							πF.SetLineno(958)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp004
							// line 959: self.assertEqual(t, (1956, 2, 1+i, 0, 0, 0, (2+i)%7, 32+i, -1))
							πF.SetLineno(959)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							πTemp007 = make([]*πg.Object, 9)
							πTemp007[0] = πg.NewInt(1956).ToObject()
							πTemp007[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewInt(1).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[2] = πTemp004
							πTemp007[3] = πg.NewInt(0).ToObject()
							πTemp007[4] = πg.NewInt(0).ToObject()
							πTemp007[5] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.Add(πF, πg.NewInt(2).ToObject(), µi); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Mod(πF, πTemp008, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp007[6] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewInt(32).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[7] = πTemp004
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp007[8] = πTemp004
							πTemp003 = πg.NewTuple(πTemp007...).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 962: d = self.theclass(1956, 3, 1+i)
							πF.SetLineno(962)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(1956).ToObject()
							πTemp002[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(1).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[2] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µd = πTemp004
							// line 963: t = d.timetuple()
							πF.SetLineno(963)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µd, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp004
							// line 964: self.assertEqual(t, (1956, 3, 1+i, 0, 0, 0, (3+i)%7, 61+i, -1))
							πF.SetLineno(964)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							πTemp007 = make([]*πg.Object, 9)
							πTemp007[0] = πg.NewInt(1956).ToObject()
							πTemp007[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewInt(1).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[2] = πTemp004
							πTemp007[3] = πg.NewInt(0).ToObject()
							πTemp007[4] = πg.NewInt(0).ToObject()
							πTemp007[5] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.Add(πF, πg.NewInt(3).ToObject(), µi); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Mod(πF, πTemp008, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp007[6] = πTemp004
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewInt(61).ToObject(), µi); πE != nil {
								continue
							}
							πTemp007[7] = πTemp004
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp007[8] = πTemp004
							πTemp003 = πg.NewTuple(πTemp007...).ToObject()
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 965: self.assertEqual(t.tm_year, 1956)
							πF.SetLineno(965)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_year, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(1956).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 966: self.assertEqual(t.tm_mon, 3)
							πF.SetLineno(966)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_mon, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 967: self.assertEqual(t.tm_mday, 1+i)
							πF.SetLineno(967)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_mday, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(1).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 968: self.assertEqual(t.tm_hour, 0)
							πF.SetLineno(968)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_hour, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 969: self.assertEqual(t.tm_min, 0)
							πF.SetLineno(969)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_min, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 970: self.assertEqual(t.tm_sec, 0)
							πF.SetLineno(970)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_sec, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 971: self.assertEqual(t.tm_wday, (3+i)%7)
							πF.SetLineno(971)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_wday, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewInt(3).ToObject(), µi); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πTemp004, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 972: self.assertEqual(t.tm_yday, 61+i)
							πF.SetLineno(972)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_yday, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πg.NewInt(61).ToObject(), µi); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 973: self.assertEqual(t.tm_isdst, -1)
							πF.SetLineno(973)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_timetuple.ToObject(), πTemp023); πE != nil {
						continue
					}
					// line 983: def test_compare(self):
					πF.SetLineno(983)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp024 = πg.NewFunction(πg.NewCode("test_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µbadarg *πg.Object = πg.UnboundLocal; _ = µbadarg
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 []πg.Param
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 984: t1 = self.theclass(2, 3, 4)
							πF.SetLineno(984)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp003
							// line 985: t2 = self.theclass(2, 3, 4)
							πF.SetLineno(985)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 986: self.assertTrue(t1 == t2)
							πF.SetLineno(986)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 987: self.assertTrue(t1 <= t2)
							πF.SetLineno(987)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 988: self.assertTrue(t1 >= t2)
							πF.SetLineno(988)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 989: self.assertFalse(t1 != t2)
							πF.SetLineno(989)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 990: self.assertFalse(t1 < t2)
							πF.SetLineno(990)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 991: self.assertFalse(t1 > t2)
							πF.SetLineno(991)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 992: self.assertEqual(cmp(t1, t2), 0)
							πF.SetLineno(992)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 993: self.assertEqual(cmp(t2, t1), 0)
							πF.SetLineno(993)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp005 = πg.NewTuple3(πg.NewInt(3).ToObject(), πg.NewInt(3).ToObject(), πg.NewInt(3).ToObject()).ToObject()
							πTemp006 = πg.NewTuple3(πg.NewInt(2).ToObject(), πg.NewInt(4).ToObject(), πg.NewInt(4).ToObject()).ToObject()
							πTemp007 = πg.NewTuple3(πg.NewInt(2).ToObject(), πg.NewInt(3).ToObject(), πg.NewInt(5).ToObject()).ToObject()
							πTemp003 = πg.NewTuple3(πTemp005, πTemp006, πTemp007).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp008 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µargs = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 996: t2 = self.theclass(*args)   # this is larger than t1
							πF.SetLineno(996)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Invoke(πF, πTemp003, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µt2 = πTemp005
							// line 997: self.assertTrue(t1 < t2)
							πF.SetLineno(997)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 998: self.assertTrue(t2 > t1)
							πF.SetLineno(998)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 999: self.assertTrue(t1 <= t2)
							πF.SetLineno(999)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1000: self.assertTrue(t2 >= t1)
							πF.SetLineno(1000)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1001: self.assertTrue(t1 != t2)
							πF.SetLineno(1001)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1002: self.assertTrue(t2 != t1)
							πF.SetLineno(1002)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1003: self.assertFalse(t1 == t2)
							πF.SetLineno(1003)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1004: self.assertFalse(t2 == t1)
							πF.SetLineno(1004)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1005: self.assertFalse(t1 > t2)
							πF.SetLineno(1005)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1006: self.assertFalse(t2 < t1)
							πF.SetLineno(1006)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1007: self.assertFalse(t1 >= t2)
							πF.SetLineno(1007)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1008: self.assertFalse(t2 <= t1)
							πF.SetLineno(1008)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1009: self.assertEqual(cmp(t1, t2), -1)
							πF.SetLineno(1009)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1010: self.assertEqual(cmp(t2, t1), 1)
							πF.SetLineno(1010)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πTemp003, πE = πg.ResolveGlobal(πF, ßOTHERSTUFF); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp008 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µbadarg = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 1013: self.assertEqual(t1 == badarg, False)
							πF.SetLineno(1013)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µbadarg); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1014: self.assertEqual(t1 != badarg, True)
							πF.SetLineno(1014)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µbadarg); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1015: self.assertEqual(badarg == t1, False)
							πF.SetLineno(1015)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µbadarg, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1016: self.assertEqual(badarg != t1, True)
							πF.SetLineno(1016)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µbadarg, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1018: self.assertRaises(TypeError, lambda: t1 < badarg)
							πF.SetLineno(1018)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1018: self.assertRaises(TypeError, lambda: t1 < badarg)
									πF.SetLineno(1018)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1019: self.assertRaises(TypeError, lambda: t1 > badarg)
							πF.SetLineno(1019)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1019: self.assertRaises(TypeError, lambda: t1 > badarg)
									πF.SetLineno(1019)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1020: self.assertRaises(TypeError, lambda: t1 >= badarg)
							πF.SetLineno(1020)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1020: self.assertRaises(TypeError, lambda: t1 >= badarg)
									πF.SetLineno(1020)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1021: self.assertRaises(TypeError, lambda: badarg <= t1)
							πF.SetLineno(1021)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1021: self.assertRaises(TypeError, lambda: badarg <= t1)
									πF.SetLineno(1021)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1022: self.assertRaises(TypeError, lambda: badarg < t1)
							πF.SetLineno(1022)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1022: self.assertRaises(TypeError, lambda: badarg < t1)
									πF.SetLineno(1022)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1023: self.assertRaises(TypeError, lambda: badarg > t1)
							πF.SetLineno(1023)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1023: self.assertRaises(TypeError, lambda: badarg > t1)
									πF.SetLineno(1023)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1024: self.assertRaises(TypeError, lambda: badarg >= t1)
							πF.SetLineno(1024)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1024: self.assertRaises(TypeError, lambda: badarg >= t1)
									πF.SetLineno(1024)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_compare.ToObject(), πTemp024); πE != nil {
						continue
					}
					// line 1026: def test_mixed_compare(self):
					πF.SetLineno(1026)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp025 = πg.NewFunction(πg.NewCode("test_mixed_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µour *πg.Object = πg.UnboundLocal; _ = µour
						var µAnotherDateTimeClass *πg.Object = πg.UnboundLocal; _ = µAnotherDateTimeClass
						var µtheir *πg.Object = πg.UnboundLocal; _ = µtheir
						var µComparable *πg.Object = πg.UnboundLocal; _ = µComparable
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1027: our = self.theclass(2000, 4, 5)
							πF.SetLineno(1027)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(4).ToObject()
							πTemp001[2] = πg.NewInt(5).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µour = πTemp003
							// line 1028: self.assertRaises(TypeError, cmp, our, 1)
							πF.SetLineno(1028)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µour, "our"); πE != nil {
								continue
							}
							πTemp001[2] = µour
							πTemp001[3] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1029: self.assertRaises(TypeError, cmp, 1, our)
							πF.SetLineno(1029)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µour, "our"); πE != nil {
								continue
							}
							πTemp001[3] = µour
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1031: class AnotherDateTimeClass(object):
							πF.SetLineno(1031)
							πTemp001 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
								continue
							}
							πTemp001[0] = πTemp005
							πTemp004 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("AnotherDateTimeClass", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp004
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1032: def __cmp__(self, other):
									πF.SetLineno(1032)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "other", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__cmp__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µother *πg.Object = πArgs[1]; _ = µother
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1036: return 0
											πF.SetLineno(1036)
											πR = πg.NewInt(0).ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__cmp__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 1037: __hash__ = None # Silence Py3k warning
									πF.SetLineno(1037)
									if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
										continue
									}
									if πE = πClass.SetItem(πF, ß__hash__.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("AnotherDateTimeClass").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
								continue
							}
							µAnotherDateTimeClass = πTemp005
							// line 1043: their = AnotherDateTimeClass()
							πF.SetLineno(1043)
							if πE = πg.CheckLocal(πF, µAnotherDateTimeClass, "AnotherDateTimeClass"); πE != nil {
								continue
							}
							if πTemp002, πE = µAnotherDateTimeClass.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtheir = πTemp002
							// line 1044: self.assertRaises(TypeError, cmp, our, their)
							πF.SetLineno(1044)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µour, "our"); πE != nil {
								continue
							}
							πTemp001[2] = µour
							if πE = πg.CheckLocal(πF, µtheir, "their"); πE != nil {
								continue
							}
							πTemp001[3] = µtheir
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1055: class Comparable(AnotherDateTimeClass):
							πF.SetLineno(1055)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µAnotherDateTimeClass, "AnotherDateTimeClass"); πE != nil {
								continue
							}
							πTemp001[0] = µAnotherDateTimeClass
							πTemp004 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Comparable", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp004
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1056: def timetuple(self):
									πF.SetLineno(1056)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("timetuple", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1057: return ()
											πF.SetLineno(1057)
											πTemp001 = πg.NewTuple0().ToObject()
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtimetuple.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("Comparable").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp004.ToObject()}, nil); πE != nil {
								continue
							}
							µComparable = πTemp005
							// line 1059: their = Comparable()
							πF.SetLineno(1059)
							if πE = πg.CheckLocal(πF, µComparable, "Comparable"); πE != nil {
								continue
							}
							if πTemp002, πE = µComparable.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtheir = πTemp002
							// line 1060: self.assertEqual(cmp(our, their), 0)
							πF.SetLineno(1060)
							πTemp001 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µour, "our"); πE != nil {
								continue
							}
							πTemp006[0] = µour
							if πE = πg.CheckLocal(πF, µtheir, "their"); πE != nil {
								continue
							}
							πTemp006[1] = µtheir
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1061: self.assertEqual(cmp(their, our), 0)
							πF.SetLineno(1061)
							πTemp001 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtheir, "their"); πE != nil {
								continue
							}
							πTemp006[0] = µtheir
							if πE = πg.CheckLocal(πF, µour, "our"); πE != nil {
								continue
							}
							πTemp006[1] = µour
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1062: self.assertTrue(our == their)
							πF.SetLineno(1062)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µour, "our"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtheir, "their"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µour, µtheir); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1063: self.assertTrue(their == our)
							πF.SetLineno(1063)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtheir, "their"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µour, "our"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µtheir, µour); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_mixed_compare.ToObject(), πTemp025); πE != nil {
						continue
					}
					// line 1065: def test_bool(self):
					πF.SetLineno(1065)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp026 = πg.NewFunction(πg.NewCode("test_bool", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1067: self.assertTrue(self.theclass.min)
							πF.SetLineno(1067)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1068: self.assertTrue(self.theclass.max)
							πF.SetLineno(1068)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bool.ToObject(), πTemp026); πE != nil {
						continue
					}
					// line 1071: def test_strftime_out_of_range(self):
					πF.SetLineno(1071)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp027 = πg.NewFunction(πg.NewCode("test_strftime_out_of_range", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µy *πg.Object = πg.UnboundLocal; _ = µy
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1073: cls = self.theclass
							πF.SetLineno(1073)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 1074: self.assertEqual(cls(1900, 1, 1).strftime("%Y"), "1900")
							πF.SetLineno(1074)
							πTemp002 = πF.MakeArgs(2)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("%Y").ToObject()
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(1900).ToObject()
							πTemp004[1] = πg.NewInt(1).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp005, πE = πg.GetAttr(πF, πTemp001, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp001
							πTemp002[1] = ß1900.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp002 = make([]*πg.Object, 7)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(49).ToObject()
							πTemp002[2] = πg.NewInt(51).ToObject()
							πTemp002[3] = πg.NewInt(99).ToObject()
							πTemp002[4] = πg.NewInt(100).ToObject()
							πTemp002[5] = πg.NewInt(1000).ToObject()
							πTemp002[6] = πg.NewInt(1899).ToObject()
							πTemp005 = πg.NewTuple(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp005, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µy = πTemp005
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1076: self.assertRaises(ValueError, cls(y, 1, 1).strftime, "%Y")
							πF.SetLineno(1076)
							πTemp002 = πF.MakeArgs(3)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp005
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							πTemp003[0] = µy
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp005, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp008, πE = πg.GetAttr(πF, πTemp005, ßstrftime, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp008
							πTemp002[2] = πg.NewStr("%Y").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_strftime_out_of_range.ToObject(), πTemp027); πE != nil {
						continue
					}
					// line 1070: @unittest.expectedFailure
					πF.SetLineno(1070)
					πTemp004 = πF.MakeArgs(1)
					if πTemp028, πE = πg.ResolveClass(πF, πClass, nil, ßtest_strftime_out_of_range); πE != nil {
						continue
					}
					πTemp004[0] = πTemp028
					if πTemp028, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp029, πE = πg.GetAttr(πF, πTemp028, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp028, πE = πTemp029.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_strftime_out_of_range.ToObject(), πTemp028); πE != nil {
						continue
					}
					// line 1079: def test_replace(self):
					πF.SetLineno(1079)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp028 = πg.NewFunction(πg.NewCode("test_replace", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µname *πg.Object = πg.UnboundLocal; _ = µname
						var µnewval *πg.Object = πg.UnboundLocal; _ = µnewval
						var µnewargs *πg.Object = πg.UnboundLocal; _ = µnewargs
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.Dict
						_ = πTemp009
						var πTemp010 πg.KWArgs
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1080: cls = self.theclass
							πF.SetLineno(1080)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 1081: args = [1, 2, 3]
							πF.SetLineno(1081)
							πTemp002 = make([]*πg.Object, 3)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(3).ToObject()
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µargs = πTemp001
							// line 1082: base = cls(*args)
							πF.SetLineno(1082)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Invoke(πF, µcls, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µbase = πTemp001
							// line 1083: self.assertEqual(base, base.replace())
							πF.SetLineno(1083)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							πTemp002[0] = µbase
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1085: i = 0
							πF.SetLineno(1085)
							µi = πg.NewInt(0).ToObject()
							πTemp004 = πg.NewTuple2(ßyear.ToObject(), πg.NewInt(2).ToObject()).ToObject()
							πTemp005 = πg.NewTuple2(ßmonth.ToObject(), πg.NewInt(3).ToObject()).ToObject()
							πTemp006 = πg.NewTuple2(ßday.ToObject(), πg.NewInt(4).ToObject()).ToObject()
							πTemp003 = πg.NewTuple3(πTemp004, πTemp005, πTemp006).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp005}}}, πTemp003); πE != nil {
									continue
								}
								µname = πTemp004
								µnewval = πTemp005
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1089: newargs = args[:]
							πF.SetLineno(1089)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µargs, πTemp003); πE != nil {
								continue
							}
							µnewargs = πTemp004
							// line 1090: newargs[i] = newval
							πF.SetLineno(1090)
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µnewval); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp004 = µi
							if πE = πg.SetItem(πF, µnewargs, πTemp004, πTemp003); πE != nil {
								continue
							}
							// line 1091: expected = cls(*newargs)
							πF.SetLineno(1091)
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, µcls, nil, µnewargs, nil, nil); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 1092: got = base.replace(**{name: newval})
							πF.SetLineno(1092)
							πTemp009 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πTemp009.SetItem(πF, µname, µnewval); πE != nil {
								continue
							}
							πTemp003 = πTemp009.ToObject()
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Invoke(πF, πTemp004, nil, nil, nil, πTemp003); πE != nil {
								continue
							}
							µgot = πTemp005
							// line 1093: self.assertEqual(expected, got)
							πF.SetLineno(1093)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1094: i += 1
							πF.SetLineno(1094)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µi = πTemp003
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 1097: base = cls(2000, 2, 29)
							πF.SetLineno(1097)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2000).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µbase = πTemp001
							// line 1098: self.assertRaises(ValueError, base.replace, year=2001)
							πF.SetLineno(1098)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp010 = πg.KWArgs{
								{"year", πg.NewInt(2001).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp028); πE != nil {
						continue
					}
					// line 1078: @unittest.expectedFailure
					πF.SetLineno(1078)
					πTemp004 = πF.MakeArgs(1)
					if πTemp029, πE = πg.ResolveClass(πF, πClass, nil, ßtest_replace); πE != nil {
						continue
					}
					πTemp004[0] = πTemp029
					if πTemp029, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp030, πE = πg.GetAttr(πF, πTemp029, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp029, πE = πTemp030.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp029); πE != nil {
						continue
					}
					// line 1101: def test_subclass_date(self):
					πF.SetLineno(1101)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp029 = πg.NewFunction(πg.NewCode("test_subclass_date", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µC *πg.Object = πg.UnboundLocal; _ = µC
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µdt1 *πg.Object = πg.UnboundLocal; _ = µdt1
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1103: class C(self.theclass):
							πF.SetLineno(1103)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1104: theAnswer = 42
									πF.SetLineno(1104)
									if πE = πClass.SetItem(πF, ßtheAnswer.ToObject(), πg.NewInt(42).ToObject()); πE != nil {
										continue
									}
									// line 1106: def __new__(cls, *args, **kws):
									πF.SetLineno(1106)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "cls", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__new__", "build/src/__python__/test/test_datetime.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µcls *πg.Object = πArgs[0]; _ = µcls
										var µargs *πg.Object = πArgs[1]; _ = µargs
										var µkws *πg.Object = πArgs[2]; _ = µkws
										var µtemp *πg.Object = πg.UnboundLocal; _ = µtemp
										var µextra *πg.Object = πg.UnboundLocal; _ = µextra
										var µresult *πg.Object = πg.UnboundLocal; _ = µresult
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1107: temp = kws.copy()
											πF.SetLineno(1107)
											if πE = πg.CheckLocal(πF, µkws, "kws"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µkws, ßcopy, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
												continue
											}
											µtemp = πTemp002
											// line 1108: extra = temp.pop('extra')
											πF.SetLineno(1108)
											πTemp003 = πF.MakeArgs(1)
											πTemp003[0] = ßextra.ToObject()
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtemp, ßpop, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µextra = πTemp002
											// line 1109: result = self.theclass.__new__(cls, *args, **temp)
											πF.SetLineno(1109)
											πTemp003 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
												continue
											}
											πTemp003[0] = µcls
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ß__new__, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Invoke(πF, πTemp002, πTemp003, µargs, nil, µtemp); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µresult = πTemp001
											// line 1110: result.extra = extra
											πF.SetLineno(1110)
											if πE = πg.CheckLocal(πF, µextra, "extra"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µextra); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µresult, ßextra, πTemp001); πE != nil {
												continue
											}
											// line 1111: return result
											πF.SetLineno(1111)
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											πR = µresult
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__new__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 1113: def newmeth(self, start):
									πF.SetLineno(1113)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "start", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("newmeth", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µstart *πg.Object = πArgs[1]; _ = µstart
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1114: return start + self.year + self.month
											πF.SetLineno(1114)
											if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßyear, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Add(πF, µstart, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßmonth, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Add(πF, πTemp002, πTemp003); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßnewmeth.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µC = πTemp005
							// line 1116: args = 2003, 4, 14
							πF.SetLineno(1116)
							πTemp002 = πg.NewTuple3(πg.NewInt(2003).ToObject(), πg.NewInt(4).ToObject(), πg.NewInt(14).ToObject()).ToObject()
							µargs = πTemp002
							// line 1118: dt1 = self.theclass(*args)
							πF.SetLineno(1118)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µdt1 = πTemp004
							// line 1119: dt2 = C(*args, **{'extra': 7})
							πF.SetLineno(1119)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ßextra.ToObject(), πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, µC, nil, µargs, nil, πTemp002); πE != nil {
								continue
							}
							µdt2 = πTemp004
							// line 1121: self.assertEqual(dt2.__class__, C)
							πF.SetLineno(1121)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ß__class__, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							πTemp003[1] = µC
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1122: self.assertEqual(dt2.theAnswer, 42)
							πF.SetLineno(1122)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßtheAnswer, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1123: self.assertEqual(dt2.extra, 7)
							πF.SetLineno(1123)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßextra, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1124: self.assertEqual(dt1.toordinal(), dt2.toordinal())
							πF.SetLineno(1124)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt1, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1125: self.assertEqual(dt2.newmeth(-7), dt1.year + dt1.month - 7)
							πF.SetLineno(1125)
							πTemp003 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßnewmeth, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µdt1, ßyear, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µdt1, ßmonth, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp004, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subclass_date.ToObject(), πTemp029); πE != nil {
						continue
					}
					// line 1100: @unittest.expectedFailure
					πF.SetLineno(1100)
					πTemp004 = πF.MakeArgs(1)
					if πTemp030, πE = πg.ResolveClass(πF, πClass, nil, ßtest_subclass_date); πE != nil {
						continue
					}
					πTemp004[0] = πTemp030
					if πTemp030, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp031, πE = πg.GetAttr(πF, πTemp030, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp030, πE = πTemp031.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_subclass_date.ToObject(), πTemp030); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestDate").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestDate.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 1160: class SubclassDatetime(datetime):
			πF.SetLineno(1160)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("SubclassDatetime", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1161: sub_var = 1
					πF.SetLineno(1161)
					if πE = πClass.SetItem(πF, ßsub_var.ToObject(), πg.NewInt(1).ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("SubclassDatetime").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßSubclassDatetime.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 1163: class TestDateTime(TestDate):
			πF.SetLineno(1163)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßTestDate); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestDateTime", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				var πTemp021 *πg.Object
				_ = πTemp021
				var πTemp022 *πg.Object
				_ = πTemp022
				var πTemp023 *πg.Object
				_ = πTemp023
				var πTemp024 *πg.Object
				_ = πTemp024
				var πTemp025 *πg.Object
				_ = πTemp025
				var πTemp026 *πg.Object
				_ = πTemp026
				var πTemp027 *πg.Object
				_ = πTemp027
				var πTemp028 *πg.Object
				_ = πTemp028
				var πTemp029 *πg.Object
				_ = πTemp029
				var πTemp030 *πg.Object
				_ = πTemp030
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1165: theclass = datetime
					πF.SetLineno(1165)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßdatetime); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßtheclass.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1167: def test_basic_attributes(self):
					πF.SetLineno(1167)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_basic_attributes", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1168: dt = self.theclass(2002, 3, 1, 12, 0)
							πF.SetLineno(1168)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(12).ToObject()
							πTemp001[4] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 1169: self.assertEqual(dt.year, 2002)
							πF.SetLineno(1169)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(2002).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1170: self.assertEqual(dt.month, 3)
							πF.SetLineno(1170)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1171: self.assertEqual(dt.day, 1)
							πF.SetLineno(1171)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1172: self.assertEqual(dt.hour, 12)
							πF.SetLineno(1172)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(12).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1173: self.assertEqual(dt.minute, 0)
							πF.SetLineno(1173)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1174: self.assertEqual(dt.second, 0)
							πF.SetLineno(1174)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1175: self.assertEqual(dt.microsecond, 0)
							πF.SetLineno(1175)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_basic_attributes.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1177: def test_basic_attributes_nonzero(self):
					πF.SetLineno(1177)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_basic_attributes_nonzero", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1180: dt = self.theclass(2002, 3, 1, 12, 59, 59, 8000)
							πF.SetLineno(1180)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(12).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							πTemp001[6] = πg.NewInt(8000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 1181: self.assertEqual(dt.year, 2002)
							πF.SetLineno(1181)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(2002).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1182: self.assertEqual(dt.month, 3)
							πF.SetLineno(1182)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1183: self.assertEqual(dt.day, 1)
							πF.SetLineno(1183)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1184: self.assertEqual(dt.hour, 12)
							πF.SetLineno(1184)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(12).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1185: self.assertEqual(dt.minute, 59)
							πF.SetLineno(1185)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1186: self.assertEqual(dt.second, 59)
							πF.SetLineno(1186)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1187: self.assertEqual(dt.microsecond, 8000)
							πF.SetLineno(1187)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(8000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_basic_attributes_nonzero.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1190: def test_roundtrip(self):
					πF.SetLineno(1190)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_roundtrip", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var µs *πg.Object = πg.UnboundLocal; _ = µs
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							πTemp003 = πF.MakeArgs(7)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							πTemp003[3] = πg.NewInt(4).ToObject()
							πTemp003[4] = πg.NewInt(5).ToObject()
							πTemp003[5] = πg.NewInt(6).ToObject()
							πTemp003[6] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp004, ßnow, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(πTemp005, πTemp004).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µdt = πTemp002
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1194: s = repr(dt)
							πF.SetLineno(1194)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[0] = µdt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µs = πTemp004
							// line 1195: self.assertTrue(s.startswith('datetime.'))
							πF.SetLineno(1195)
							πTemp003 = πF.MakeArgs(1)
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = πg.NewStr("datetime.").ToObject()
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µs, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1196: s = s[9:]
							πF.SetLineno(1196)
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(9).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µs, πTemp002); πE != nil {
								continue
							}
							µs = πTemp004
							// line 1197: dt2 = eval(s)
							πF.SetLineno(1197)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							πTemp003[0] = µs
							if πTemp002, πE = πg.ResolveGlobal(πF, ßeval); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µdt2 = πTemp004
							// line 1198: self.assertEqual(dt, dt2)
							πF.SetLineno(1198)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[0] = µdt
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp003[1] = µdt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1201: dt2 = self.theclass(dt.year, dt.month, dt.day,
							πF.SetLineno(1201)
							πTemp003 = πF.MakeArgs(7)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßday, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßhour, nil); πE != nil {
								continue
							}
							πTemp003[3] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßminute, nil); πE != nil {
								continue
							}
							πTemp003[4] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp003[5] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp003[6] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µdt2 = πTemp004
							// line 1204: self.assertEqual(dt, dt2)
							πF.SetLineno(1204)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[0] = µdt
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							πTemp003[1] = µdt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1189: @unittest.expectedFailure
					πF.SetLineno(1189)
					πTemp005 = πF.MakeArgs(1)
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßtest_roundtrip); πE != nil {
						continue
					}
					πTemp005[0] = πTemp006
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp007.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 1207: def test_isoformat(self):
					πF.SetLineno(1207)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_isoformat", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1208: t = self.theclass(2, 3, 2, 4, 5, 1, 123)
							πF.SetLineno(1208)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(1).ToObject()
							πTemp001[6] = πg.NewInt(123).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1209: self.assertEqual(t.isoformat(),    "0002-03-02T04:05:01.000123")
							πF.SetLineno(1209)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02T04:05:01.000123").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1210: self.assertEqual(t.isoformat('T'), "0002-03-02T04:05:01.000123")
							πF.SetLineno(1210)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßT.ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02T04:05:01.000123").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1211: self.assertEqual(t.isoformat(' '), "0002-03-02 04:05:01.000123")
							πF.SetLineno(1211)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr(" ").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02 04:05:01.000123").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1212: self.assertEqual(t.isoformat('\x00'), "0002-03-02\x0004:05:01.000123")
							πF.SetLineno(1212)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\x00").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02\x0004:05:01.000123").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1214: self.assertEqual(str(t), "0002-03-02 04:05:01.000123")
							πF.SetLineno(1214)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02 04:05:01.000123").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1216: t = self.theclass(2, 3, 2)
							πF.SetLineno(1216)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1217: self.assertEqual(t.isoformat(),    "0002-03-02T00:00:00")
							πF.SetLineno(1217)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02T00:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1218: self.assertEqual(t.isoformat('T'), "0002-03-02T00:00:00")
							πF.SetLineno(1218)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßT.ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02T00:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1219: self.assertEqual(t.isoformat(' '), "0002-03-02 00:00:00")
							πF.SetLineno(1219)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr(" ").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02 00:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1221: self.assertEqual(str(t), "0002-03-02 00:00:00")
							πF.SetLineno(1221)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("0002-03-02 00:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_isoformat.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 1206: @unittest.expectedFailure
					πF.SetLineno(1206)
					πTemp005 = πF.MakeArgs(1)
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßtest_isoformat); πE != nil {
						continue
					}
					πTemp005[0] = πTemp007
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp008.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_isoformat.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 1224: def test_format(self):
					πF.SetLineno(1224)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_format", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var µA *πg.Object = πg.UnboundLocal; _ = µA
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µB *πg.Object = πg.UnboundLocal; _ = µB
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var µfmt *πg.Object = πg.UnboundLocal; _ = µfmt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1225: dt = self.theclass(2007, 9, 10, 4, 5, 1, 123)
							πF.SetLineno(1225)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2007).ToObject()
							πTemp001[1] = πg.NewInt(9).ToObject()
							πTemp001[2] = πg.NewInt(10).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(1).ToObject()
							πTemp001[6] = πg.NewInt(123).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 1226: self.assertEqual(dt.__format__(''), str(dt))
							πF.SetLineno(1226)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp004[0] = µdt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1229: class A(self.theclass):
							πF.SetLineno(1229)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("A", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1230: def __str__(self):
									πF.SetLineno(1230)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__str__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1231: return 'A'
											πF.SetLineno(1231)
											πR = ßA.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__str__.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("A").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µA = πTemp006
							// line 1232: a = A(2007, 9, 10, 4, 5, 1, 123)
							πF.SetLineno(1232)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2007).ToObject()
							πTemp001[1] = πg.NewInt(9).ToObject()
							πTemp001[2] = πg.NewInt(10).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(1).ToObject()
							πTemp001[6] = πg.NewInt(123).ToObject()
							if πE = πg.CheckLocal(πF, µA, "A"); πE != nil {
								continue
							}
							if πTemp002, πE = µA.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp002
							// line 1233: self.assertEqual(a.__format__(''), 'A')
							πF.SetLineno(1233)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = ßA.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1236: class B(self.theclass):
							πF.SetLineno(1236)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("B", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1237: def strftime(self, format_spec):
									πF.SetLineno(1237)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "format_spec", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("strftime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µformat_spec *πg.Object = πArgs[1]; _ = µformat_spec
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1238: return 'B'
											πF.SetLineno(1238)
											πR = ßB.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßstrftime.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("B").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µB = πTemp006
							// line 1239: b = B(2007, 9, 10, 4, 5, 1, 123)
							πF.SetLineno(1239)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2007).ToObject()
							πTemp001[1] = πg.NewInt(9).ToObject()
							πTemp001[2] = πg.NewInt(10).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(1).ToObject()
							πTemp001[6] = πg.NewInt(123).ToObject()
							if πE = πg.CheckLocal(πF, µB, "B"); πE != nil {
								continue
							}
							if πTemp002, πE = µB.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µb = πTemp002
							// line 1240: self.assertEqual(b.__format__(''), str(dt))
							πF.SetLineno(1240)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µb, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp004[0] = µdt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = make([]*πg.Object, 3)
							πTemp001[0] = πg.NewStr("m:%m d:%d y:%y").ToObject()
							πTemp001[1] = πg.NewStr("m:%m d:%d y:%y H:%H M:%M S:%S").ToObject()
							πTemp001[2] = πg.NewStr("%z %Z").ToObject()
							πTemp003 = πg.NewList(πTemp001...).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µfmt = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1246: self.assertEqual(dt.__format__(fmt), dt.strftime(fmt))
							πF.SetLineno(1246)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1247: self.assertEqual(a.__format__(fmt), dt.strftime(fmt))
							πF.SetLineno(1247)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µa, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1248: self.assertEqual(b.__format__(fmt), 'B')
							πF.SetLineno(1248)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µb, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp001[1] = ßB.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_format.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 1223: @unittest.expectedFailure
					πF.SetLineno(1223)
					πTemp005 = πF.MakeArgs(1)
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßtest_format); πE != nil {
						continue
					}
					πTemp005[0] = πTemp008
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp009, πE = πg.GetAttr(πF, πTemp008, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp009.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_format.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 1251: def test_more_ctime(self):
					πF.SetLineno(1251)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_more_ctime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1253: import time
							πF.SetLineno(1253)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							// line 1255: t = self.theclass(2002, 3, 2, 18, 3, 5, 123)
							πF.SetLineno(1255)
							πTemp002 = πF.MakeArgs(7)
							πTemp002[0] = πg.NewInt(2002).ToObject()
							πTemp002[1] = πg.NewInt(3).ToObject()
							πTemp002[2] = πg.NewInt(2).ToObject()
							πTemp002[3] = πg.NewInt(18).ToObject()
							πTemp002[4] = πg.NewInt(3).ToObject()
							πTemp002[5] = πg.NewInt(5).ToObject()
							πTemp002[6] = πg.NewInt(123).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp003
							// line 1256: self.assertEqual(t.ctime(), "Sat Mar  2 18:03:05 2002")
							πF.SetLineno(1256)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßctime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewStr("Sat Mar  2 18:03:05 2002").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1264: t = self.theclass(2002, 3, 22, 18, 3, 5, 123)
							πF.SetLineno(1264)
							πTemp002 = πF.MakeArgs(7)
							πTemp002[0] = πg.NewInt(2002).ToObject()
							πTemp002[1] = πg.NewInt(3).ToObject()
							πTemp002[2] = πg.NewInt(22).ToObject()
							πTemp002[3] = πg.NewInt(18).ToObject()
							πTemp002[4] = πg.NewInt(3).ToObject()
							πTemp002[5] = πg.NewInt(5).ToObject()
							πTemp002[6] = πg.NewInt(123).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp003
							// line 1265: self.assertEqual(t.ctime(), time.ctime(time.mktime(t.timetuple())))
							πF.SetLineno(1265)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßctime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßmktime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßctime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_more_ctime.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 1250: @unittest.expectedFailure
					πF.SetLineno(1250)
					πTemp005 = πF.MakeArgs(1)
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßtest_more_ctime); πE != nil {
						continue
					}
					πTemp005[0] = πTemp009
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp010.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_more_ctime.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 1267: def test_tz_independent_comparing(self):
					πF.SetLineno(1267)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_tz_independent_comparing", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt1 *πg.Object = πg.UnboundLocal; _ = µdt1
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var µdt3 *πg.Object = πg.UnboundLocal; _ = µdt3
						var µus *πg.Object = πg.UnboundLocal; _ = µus
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1268: dt1 = self.theclass(2002, 3, 1, 9, 0, 0)
							πF.SetLineno(1268)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(9).ToObject()
							πTemp001[4] = πg.NewInt(0).ToObject()
							πTemp001[5] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt1 = πTemp003
							// line 1269: dt2 = self.theclass(2002, 3, 1, 10, 0, 0)
							πF.SetLineno(1269)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(10).ToObject()
							πTemp001[4] = πg.NewInt(0).ToObject()
							πTemp001[5] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt2 = πTemp003
							// line 1270: dt3 = self.theclass(2002, 3, 1, 9, 0, 0)
							πF.SetLineno(1270)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(9).ToObject()
							πTemp001[4] = πg.NewInt(0).ToObject()
							πTemp001[5] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt3 = πTemp003
							// line 1271: self.assertEqual(dt1, dt3)
							πF.SetLineno(1271)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							πTemp001[0] = µdt1
							if πE = πg.CheckLocal(πF, µdt3, "dt3"); πE != nil {
								continue
							}
							πTemp001[1] = µdt3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1272: self.assertTrue(dt2 > dt3)
							πF.SetLineno(1272)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt3, "dt3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, µdt2, µdt3); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1279: dt1 = self.theclass(MAXYEAR, 12, 31, 23, 59, 59, 999998)
							πF.SetLineno(1279)
							πTemp001 = πF.MakeArgs(7)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							πTemp001[6] = πg.NewInt(999998).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt1 = πTemp003
							// line 1280: us = timedelta(microseconds=1)
							πF.SetLineno(1280)
							πTemp004 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µus = πTemp003
							// line 1281: dt2 = dt1 + us
							πF.SetLineno(1281)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µus, "us"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µdt1, µus); πE != nil {
								continue
							}
							µdt2 = πTemp002
							// line 1282: self.assertEqual(dt2 - dt1, us)
							πF.SetLineno(1282)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µdt2, µdt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µus, "us"); πE != nil {
								continue
							}
							πTemp001[1] = µus
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1283: self.assertTrue(dt1 < dt2)
							πF.SetLineno(1283)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, µdt1, µdt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tz_independent_comparing.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 1286: def test_strftime_with_bad_tzname_replace(self):
					πF.SetLineno(1286)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_strftime_with_bad_tzname_replace", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µMyTzInfo *πg.Object = πg.UnboundLocal; _ = µMyTzInfo
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1288: class MyTzInfo(FixedOffset):
							πF.SetLineno(1288)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("MyTzInfo", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1289: def tzname(self, dt):
									πF.SetLineno(1289)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var µMyStr *πg.Object = πg.UnboundLocal; _ = µMyStr
										var πTemp001 *πg.Dict
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πTemp004 *πg.Object
										_ = πTemp004
										var πTemp005 *πg.Object
										_ = πTemp005
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1290: class MyStr(str):
											πF.SetLineno(1290)
											πTemp003 = make([]*πg.Object, 1)
											if πTemp005, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
												continue
											}
											πTemp003[0] = πTemp005
											πTemp001 = πg.NewDict()
											if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
												continue
											}
											if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
												continue
											}
											_, πE = πg.NewCode("MyStr", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
												πClass := πTemp001
												_ = πClass
												var πTemp001 *πg.Object
												_ = πTemp001
												var πTemp002 []πg.Param
												_ = πTemp002
												for ; πF.State() >= 0; πF.PopCheckpoint() {
													switch πF.State() {
													case 0:
													default: panic("unexpected function state")
													}
													// line 1291: def replace(self, *args):
													πF.SetLineno(1291)
													πTemp002 = make([]πg.Param, 1)
													πTemp002[0] = πg.Param{Name: "self", Def: nil}
													πTemp001 = πg.NewFunction(πg.NewCode("replace", "build/src/__python__/test/test_datetime.py", πTemp002, πg.CodeFlagVarArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
														var µself *πg.Object = πArgs[0]; _ = µself
														var µargs *πg.Object = πArgs[1]; _ = µargs
														var πTemp001 *πg.Object
														_ = πTemp001
														var πR *πg.Object; _ = πR
														var πE *πg.BaseException; _ = πE
														for ; πF.State() >= 0; πF.PopCheckpoint() {
															switch πF.State() {
															case 0:
															default: panic("unexpected function state")
															}
															// line 1292: return None
															πF.SetLineno(1292)
															if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
																continue
															}
															πR = πTemp001
															continue
														}
														if πE != nil {
															πR = nil
														} else if πR == nil {
															πR = πg.None
														}
														return πR, πE
													}), πF.Globals()).ToObject()
													if πE = πClass.SetItem(πF, ßreplace.ToObject(), πTemp001); πE != nil {
														continue
													}
												}
												return nil, nil
											}).Eval(πF, πF.Globals(), nil, nil)
											if πE != nil {
												continue
											}
											if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
												continue
											}
											if πTemp004 == nil {
												πTemp004 = πg.TypeType.ToObject()
											}
											if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("MyStr").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
												continue
											}
											µMyStr = πTemp005
											// line 1293: return MyStr('name')
											πF.SetLineno(1293)
											πTemp003 = πF.MakeArgs(1)
											πTemp003[0] = ßname.ToObject()
											if πE = πg.CheckLocal(πF, µMyStr, "MyStr"); πE != nil {
												continue
											}
											if πTemp002, πE = µMyStr.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											πR = πTemp002
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("MyTzInfo").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µMyTzInfo = πTemp005
							// line 1294: t = self.theclass(2005, 3, 2, 0, 0, 0, 0, MyTzInfo(3, 'name'))
							πF.SetLineno(1294)
							πTemp003 = πF.MakeArgs(8)
							πTemp003[0] = πg.NewInt(2005).ToObject()
							πTemp003[1] = πg.NewInt(3).ToObject()
							πTemp003[2] = πg.NewInt(2).ToObject()
							πTemp003[3] = πg.NewInt(0).ToObject()
							πTemp003[4] = πg.NewInt(0).ToObject()
							πTemp003[5] = πg.NewInt(0).ToObject()
							πTemp003[6] = πg.NewInt(0).ToObject()
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewInt(3).ToObject()
							πTemp006[1] = ßname.ToObject()
							if πE = πg.CheckLocal(πF, µMyTzInfo, "MyTzInfo"); πE != nil {
								continue
							}
							if πTemp002, πE = µMyTzInfo.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[7] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt = πTemp004
							// line 1295: self.assertRaises(TypeError, t.strftime, '%Z')
							πF.SetLineno(1295)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							πTemp003[2] = πg.NewStr("%Z").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_strftime_with_bad_tzname_replace.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 1285: @unittest.expectedFailure
					πF.SetLineno(1285)
					πTemp005 = πF.MakeArgs(1)
					if πTemp011, πE = πg.ResolveClass(πF, πClass, nil, ßtest_strftime_with_bad_tzname_replace); πE != nil {
						continue
					}
					πTemp005[0] = πTemp011
					if πTemp011, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp012, πE = πg.GetAttr(πF, πTemp011, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp011, πE = πTemp012.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_strftime_with_bad_tzname_replace.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 1297: def test_bad_constructor_arguments(self):
					πF.SetLineno(1297)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_bad_constructor_arguments", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1299: self.theclass(MINYEAR, 1, 1)  # no exception
							πF.SetLineno(1299)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMINYEAR); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1300: self.theclass(MAXYEAR, 1, 1)  # no exception
							πF.SetLineno(1300)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1301: self.assertRaises(ValueError, self.theclass, MINYEAR-1, 1, 1)
							πF.SetLineno(1301)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMINYEAR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1302: self.assertRaises(ValueError, self.theclass, MAXYEAR+1, 1, 1)
							πF.SetLineno(1302)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1304: self.theclass(2000, 1, 1)    # no exception
							πF.SetLineno(1304)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1305: self.theclass(2000, 12, 1)   # no exception
							πF.SetLineno(1305)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1306: self.assertRaises(ValueError, self.theclass, 2000, 0, 1)
							πF.SetLineno(1306)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(0).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1307: self.assertRaises(ValueError, self.theclass, 2000, 13, 1)
							πF.SetLineno(1307)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(13).ToObject()
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1309: self.theclass(2000, 2, 29)   # no exception
							πF.SetLineno(1309)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1310: self.theclass(2004, 2, 29)   # no exception
							πF.SetLineno(1310)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2004).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1311: self.theclass(2400, 2, 29)   # no exception
							πF.SetLineno(1311)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2400).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1312: self.assertRaises(ValueError, self.theclass, 2000, 2, 30)
							πF.SetLineno(1312)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(30).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1313: self.assertRaises(ValueError, self.theclass, 2001, 2, 29)
							πF.SetLineno(1313)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2001).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1314: self.assertRaises(ValueError, self.theclass, 2100, 2, 29)
							πF.SetLineno(1314)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2100).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1315: self.assertRaises(ValueError, self.theclass, 1900, 2, 29)
							πF.SetLineno(1315)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(1900).ToObject()
							πTemp001[3] = πg.NewInt(2).ToObject()
							πTemp001[4] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1316: self.assertRaises(ValueError, self.theclass, 2000, 1, 0)
							πF.SetLineno(1316)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1317: self.assertRaises(ValueError, self.theclass, 2000, 1, 32)
							πF.SetLineno(1317)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(32).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1319: self.theclass(2000, 1, 31, 0)    # no exception
							πF.SetLineno(1319)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1320: self.theclass(2000, 1, 31, 23)   # no exception
							πF.SetLineno(1320)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1321: self.assertRaises(ValueError, self.theclass, 2000, 1, 31, -1)
							πF.SetLineno(1321)
							πTemp001 = πF.MakeArgs(6)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[5] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1322: self.assertRaises(ValueError, self.theclass, 2000, 1, 31, 24)
							πF.SetLineno(1322)
							πTemp001 = πF.MakeArgs(6)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							πTemp001[5] = πg.NewInt(24).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1324: self.theclass(2000, 1, 31, 23, 0)    # no exception
							πF.SetLineno(1324)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1325: self.theclass(2000, 1, 31, 23, 59)   # no exception
							πF.SetLineno(1325)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1326: self.assertRaises(ValueError, self.theclass, 2000, 1, 31, 23, -1)
							πF.SetLineno(1326)
							πTemp001 = πF.MakeArgs(7)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							πTemp001[5] = πg.NewInt(23).ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[6] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1327: self.assertRaises(ValueError, self.theclass, 2000, 1, 31, 23, 60)
							πF.SetLineno(1327)
							πTemp001 = πF.MakeArgs(7)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							πTemp001[5] = πg.NewInt(23).ToObject()
							πTemp001[6] = πg.NewInt(60).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1329: self.theclass(2000, 1, 31, 23, 59, 0)    # no exception
							πF.SetLineno(1329)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1330: self.theclass(2000, 1, 31, 23, 59, 59)   # no exception
							πF.SetLineno(1330)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1331: self.assertRaises(ValueError, self.theclass, 2000, 1, 31, 23, 59, -1)
							πF.SetLineno(1331)
							πTemp001 = πF.MakeArgs(8)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							πTemp001[5] = πg.NewInt(23).ToObject()
							πTemp001[6] = πg.NewInt(59).ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[7] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1332: self.assertRaises(ValueError, self.theclass, 2000, 1, 31, 23, 59, 60)
							πF.SetLineno(1332)
							πTemp001 = πF.MakeArgs(8)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							πTemp001[5] = πg.NewInt(23).ToObject()
							πTemp001[6] = πg.NewInt(59).ToObject()
							πTemp001[7] = πg.NewInt(60).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1334: self.theclass(2000, 1, 31, 23, 59, 59, 0)    # no exception
							πF.SetLineno(1334)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							πTemp001[6] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1335: self.theclass(2000, 1, 31, 23, 59, 59, 999999)   # no exception
							πF.SetLineno(1335)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							πTemp001[6] = πg.NewInt(999999).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1336: self.assertRaises(ValueError, self.theclass,
							πF.SetLineno(1336)
							πTemp001 = πF.MakeArgs(9)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							πTemp001[5] = πg.NewInt(23).ToObject()
							πTemp001[6] = πg.NewInt(59).ToObject()
							πTemp001[7] = πg.NewInt(59).ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[8] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1338: self.assertRaises(ValueError, self.theclass,
							πF.SetLineno(1338)
							πTemp001 = πF.MakeArgs(9)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(2000).ToObject()
							πTemp001[3] = πg.NewInt(1).ToObject()
							πTemp001[4] = πg.NewInt(31).ToObject()
							πTemp001[5] = πg.NewInt(23).ToObject()
							πTemp001[6] = πg.NewInt(59).ToObject()
							πTemp001[7] = πg.NewInt(59).ToObject()
							πTemp001[8] = πg.NewInt(1000000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bad_constructor_arguments.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 1342: def test_hash_equality(self):
					πF.SetLineno(1342)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_hash_equality", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µe *πg.Object = πg.UnboundLocal; _ = µe
						var µdic *πg.Object = πg.UnboundLocal; _ = µdic
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1343: d = self.theclass(2000, 12, 31, 23, 30, 17)
							πF.SetLineno(1343)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(30).ToObject()
							πTemp001[5] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 1344: e = self.theclass(2000, 12, 31, 23, 30, 17)
							πF.SetLineno(1344)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(30).ToObject()
							πTemp001[5] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µe = πTemp003
							// line 1345: self.assertEqual(d, e)
							πF.SetLineno(1345)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp001[1] = µe
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1346: self.assertEqual(hash(d), hash(e))
							πF.SetLineno(1346)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp004[0] = µd
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp004[0] = µe
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1348: dic = {d: 1}
							πF.SetLineno(1348)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, µd, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µdic = πTemp002
							// line 1349: dic[e] = 2
							πF.SetLineno(1349)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp003 = µe
							if πE = πg.SetItem(πF, µdic, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 1350: self.assertEqual(len(dic), 1)
							πF.SetLineno(1350)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							πTemp004[0] = µdic
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1351: self.assertEqual(dic[d], 2)
							πF.SetLineno(1351)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002 = µd
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1352: self.assertEqual(dic[e], 2)
							πF.SetLineno(1352)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp002 = µe
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1354: d = self.theclass(2001,  1,  1,  0,  5, 17)
							πF.SetLineno(1354)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2001).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(0).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 1355: e = self.theclass(2001,  1,  1,  0,  5, 17)
							πF.SetLineno(1355)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2001).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(0).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µe = πTemp003
							// line 1356: self.assertEqual(d, e)
							πF.SetLineno(1356)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp001[1] = µe
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1357: self.assertEqual(hash(d), hash(e))
							πF.SetLineno(1357)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp004[0] = µd
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp004[0] = µe
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1359: dic = {d: 1}
							πF.SetLineno(1359)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, µd, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µdic = πTemp002
							// line 1360: dic[e] = 2
							πF.SetLineno(1360)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp003 = µe
							if πE = πg.SetItem(πF, µdic, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 1361: self.assertEqual(len(dic), 1)
							πF.SetLineno(1361)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							πTemp004[0] = µdic
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1362: self.assertEqual(dic[d], 2)
							πF.SetLineno(1362)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002 = µd
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1363: self.assertEqual(dic[e], 2)
							πF.SetLineno(1363)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp002 = µe
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_hash_equality.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 1365: def test_computations(self):
					πF.SetLineno(1365)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_computations", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var µdiff *πg.Object = πg.UnboundLocal; _ = µdiff
						var µmillisec *πg.Object = πg.UnboundLocal; _ = µmillisec
						var µhour *πg.Object = πg.UnboundLocal; _ = µhour
						var µday *πg.Object = πg.UnboundLocal; _ = µday
						var µweek *πg.Object = πg.UnboundLocal; _ = µweek
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 []πg.Param
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1366: a = self.theclass(2002, 1, 31)
							πF.SetLineno(1366)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp003
							// line 1367: b = self.theclass(1956, 1, 31)
							πF.SetLineno(1367)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1956).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µb = πTemp003
							// line 1368: diff = a-b
							πF.SetLineno(1368)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µb); πE != nil {
								continue
							}
							µdiff = πTemp002
							// line 1369: self.assertEqual(diff.days, 46*365 + len(range(1956, 2002, 4)))
							πF.SetLineno(1369)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdiff, ßdays, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(46).ToObject(), πg.NewInt(365).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(3)
							πTemp005[0] = πg.NewInt(1956).ToObject()
							πTemp005[1] = πg.NewInt(2002).ToObject()
							πTemp005[2] = πg.NewInt(4).ToObject()
							if πTemp006, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp007
							if πTemp006, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.Add(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1370: self.assertEqual(diff.seconds, 0)
							πF.SetLineno(1370)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdiff, ßseconds, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1371: self.assertEqual(diff.microseconds, 0)
							πF.SetLineno(1371)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdiff, ßmicroseconds, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1372: a = self.theclass(2002, 3, 2, 17, 6)
							πF.SetLineno(1372)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							πTemp001[3] = πg.NewInt(17).ToObject()
							πTemp001[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp003
							// line 1373: millisec = timedelta(0, 0, 1000)
							πF.SetLineno(1373)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewInt(0).ToObject()
							πTemp001[2] = πg.NewInt(1000).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmillisec = πTemp003
							// line 1374: hour = timedelta(0, 3600)
							πF.SetLineno(1374)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewInt(3600).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µhour = πTemp003
							// line 1375: day = timedelta(1)
							πF.SetLineno(1375)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(1).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µday = πTemp003
							// line 1376: week = timedelta(7)
							πF.SetLineno(1376)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(7).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µweek = πTemp003
							// line 1377: self.assertEqual(a + hour, self.theclass(2002, 3, 2, 18, 6))
							πF.SetLineno(1377)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, µhour); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(2).ToObject()
							πTemp004[3] = πg.NewInt(18).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1378: self.assertEqual(hour + a, self.theclass(2002, 3, 2, 18, 6))
							πF.SetLineno(1378)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µhour, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(2).ToObject()
							πTemp004[3] = πg.NewInt(18).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1379: self.assertEqual(a + 10*hour, self.theclass(2002, 3, 3, 3, 6))
							πF.SetLineno(1379)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(10).ToObject(), µhour); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(3).ToObject()
							πTemp004[3] = πg.NewInt(3).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1380: self.assertEqual(a - hour, self.theclass(2002, 3, 2, 16, 6))
							πF.SetLineno(1380)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µhour); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(2).ToObject()
							πTemp004[3] = πg.NewInt(16).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1381: self.assertEqual(-hour + a, self.theclass(2002, 3, 2, 16, 6))
							πF.SetLineno(1381)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(2).ToObject()
							πTemp004[3] = πg.NewInt(16).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1382: self.assertEqual(a - hour, a + -hour)
							πF.SetLineno(1382)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µhour); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, µhour); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1383: self.assertEqual(a - 20*hour, self.theclass(2002, 3, 1, 21, 6))
							πF.SetLineno(1383)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(20).ToObject(), µhour); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							πTemp004[3] = πg.NewInt(21).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1384: self.assertEqual(a + day, self.theclass(2002, 3, 3, 17, 6))
							πF.SetLineno(1384)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, µday); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(3).ToObject()
							πTemp004[3] = πg.NewInt(17).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1385: self.assertEqual(a - day, self.theclass(2002, 3, 1, 17, 6))
							πF.SetLineno(1385)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µday); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							πTemp004[3] = πg.NewInt(17).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1386: self.assertEqual(a + week, self.theclass(2002, 3, 9, 17, 6))
							πF.SetLineno(1386)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, µweek); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(9).ToObject()
							πTemp004[3] = πg.NewInt(17).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1387: self.assertEqual(a - week, self.theclass(2002, 2, 23, 17, 6))
							πF.SetLineno(1387)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, µweek); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(2).ToObject()
							πTemp004[2] = πg.NewInt(23).ToObject()
							πTemp004[3] = πg.NewInt(17).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1388: self.assertEqual(a + 52*week, self.theclass(2003, 3, 1, 17, 6))
							πF.SetLineno(1388)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(52).ToObject(), µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2003).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							πTemp004[3] = πg.NewInt(17).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1389: self.assertEqual(a - 52*week, self.theclass(2001, 3, 3, 17, 6))
							πF.SetLineno(1389)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, πg.NewInt(52).ToObject(), µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(5)
							πTemp004[0] = πg.NewInt(2001).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(3).ToObject()
							πTemp004[3] = πg.NewInt(17).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1390: self.assertEqual((a + week) - a, week)
							πF.SetLineno(1390)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µweek); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							πTemp001[1] = µweek
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1391: self.assertEqual((a + day) - a, day)
							πF.SetLineno(1391)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							πTemp001[1] = µday
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1392: self.assertEqual((a + hour) - a, hour)
							πF.SetLineno(1392)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							πTemp001[1] = µhour
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1393: self.assertEqual((a + millisec) - a, millisec)
							πF.SetLineno(1393)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µmillisec); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							πTemp001[1] = µmillisec
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1394: self.assertEqual((a - week) - a, -week)
							πF.SetLineno(1394)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µweek); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µweek); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1395: self.assertEqual((a - day) - a, -day)
							πF.SetLineno(1395)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µday); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1396: self.assertEqual((a - hour) - a, -hour)
							πF.SetLineno(1396)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µhour); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1397: self.assertEqual((a - millisec) - a, -millisec)
							πF.SetLineno(1397)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µmillisec); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µa); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µmillisec); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1398: self.assertEqual(a - (a + week), -week)
							πF.SetLineno(1398)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µweek); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1399: self.assertEqual(a - (a + day), -day)
							πF.SetLineno(1399)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µday); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µday); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1400: self.assertEqual(a - (a + hour), -hour)
							πF.SetLineno(1400)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µhour); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µhour); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1401: self.assertEqual(a - (a + millisec), -millisec)
							πF.SetLineno(1401)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µa, µmillisec); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, µmillisec); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1402: self.assertEqual(a - (a - week), week)
							πF.SetLineno(1402)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µweek); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							πTemp001[1] = µweek
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1403: self.assertEqual(a - (a - day), day)
							πF.SetLineno(1403)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µday); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							πTemp001[1] = µday
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1404: self.assertEqual(a - (a - hour), hour)
							πF.SetLineno(1404)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µhour); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							πTemp001[1] = µhour
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1405: self.assertEqual(a - (a - millisec), millisec)
							πF.SetLineno(1405)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µa, µmillisec); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							πTemp001[1] = µmillisec
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1406: self.assertEqual(a + (week + day + hour + millisec),
							πF.SetLineno(1406)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µweek, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, πTemp007, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp006, µmillisec); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(7)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(10).ToObject()
							πTemp004[3] = πg.NewInt(18).ToObject()
							πTemp004[4] = πg.NewInt(6).ToObject()
							πTemp004[5] = πg.NewInt(0).ToObject()
							πTemp004[6] = πg.NewInt(1000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1408: self.assertEqual(a + (week + day + hour + millisec),
							πF.SetLineno(1408)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µweek, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, πTemp007, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp006, µmillisec); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µa, µweek); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, πTemp007, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp006, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, µmillisec); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1410: self.assertEqual(a - (week + day + hour + millisec),
							πF.SetLineno(1410)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µweek, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, πTemp007, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp006, µmillisec); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp004 = πF.MakeArgs(7)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(2).ToObject()
							πTemp004[2] = πg.NewInt(22).ToObject()
							πTemp004[3] = πg.NewInt(16).ToObject()
							πTemp004[4] = πg.NewInt(5).ToObject()
							πTemp004[5] = πg.NewInt(59).ToObject()
							πTemp004[6] = πg.NewInt(999000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1412: self.assertEqual(a - (week + day + hour + millisec),
							πF.SetLineno(1412)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Add(πF, µweek, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, πTemp007, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp006, µmillisec); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µa, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µweek, "week"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Sub(πF, µa, µweek); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, πTemp007, µday); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhour, "hour"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, πTemp006, µhour); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmillisec, "millisec"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp003, µmillisec); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp003 = πg.NewTuple3(πg.NewInt(1).ToObject(), πg.NewLongFromBytes([]byte{0x1,}).ToObject(), πg.NewFloat(1.0).ToObject()).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp008 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1416: self.assertRaises(TypeError, lambda: a+i)
							πF.SetLineno(1416)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1416: self.assertRaises(TypeError, lambda: a+i)
									πF.SetLineno(1416)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µa, µi); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1417: self.assertRaises(TypeError, lambda: a-i)
							πF.SetLineno(1417)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1417: self.assertRaises(TypeError, lambda: a-i)
									πF.SetLineno(1417)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µa, µi); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1418: self.assertRaises(TypeError, lambda: i+a)
							πF.SetLineno(1418)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1418: self.assertRaises(TypeError, lambda: i+a)
									πF.SetLineno(1418)
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µi, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1419: self.assertRaises(TypeError, lambda: i-a)
							πF.SetLineno(1419)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1419: self.assertRaises(TypeError, lambda: i-a)
									πF.SetLineno(1419)
									if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µi, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 1422: self.assertRaises(TypeError, lambda: day - a)
							πF.SetLineno(1422)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1422: self.assertRaises(TypeError, lambda: day - a)
									πF.SetLineno(1422)
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µday, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1424: self.assertRaises(TypeError, lambda: day * a)
							πF.SetLineno(1424)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1424: self.assertRaises(TypeError, lambda: day * a)
									πF.SetLineno(1424)
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µday, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1425: self.assertRaises(TypeError, lambda: a * day)
							πF.SetLineno(1425)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1425: self.assertRaises(TypeError, lambda: a * day)
									πF.SetLineno(1425)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µa, µday); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1426: self.assertRaises(TypeError, lambda: day // a)
							πF.SetLineno(1426)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1426: self.assertRaises(TypeError, lambda: day // a)
									πF.SetLineno(1426)
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µday, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1427: self.assertRaises(TypeError, lambda: a // day)
							πF.SetLineno(1427)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1427: self.assertRaises(TypeError, lambda: a // day)
									πF.SetLineno(1427)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µday, "day"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µa, µday); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1428: self.assertRaises(TypeError, lambda: a * a)
							πF.SetLineno(1428)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1428: self.assertRaises(TypeError, lambda: a * a)
									πF.SetLineno(1428)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mul(πF, µa, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1429: self.assertRaises(TypeError, lambda: a // a)
							πF.SetLineno(1429)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1429: self.assertRaises(TypeError, lambda: a // a)
									πF.SetLineno(1429)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.FloorDiv(πF, µa, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1431: self.assertRaises(TypeError, lambda: a + a)
							πF.SetLineno(1431)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp010 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1431: self.assertRaises(TypeError, lambda: a + a)
									πF.SetLineno(1431)
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µa, µa); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_computations.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 1458: def test_more_compare(self):
					πF.SetLineno(1458)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_more_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µnewargs *πg.Object = πg.UnboundLocal; _ = µnewargs
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1462: args = [2000, 11, 29, 20, 58, 16, 999998]
							πF.SetLineno(1462)
							πTemp001 = make([]*πg.Object, 7)
							πTemp001[0] = πg.NewInt(2000).ToObject()
							πTemp001[1] = πg.NewInt(11).ToObject()
							πTemp001[2] = πg.NewInt(29).ToObject()
							πTemp001[3] = πg.NewInt(20).ToObject()
							πTemp001[4] = πg.NewInt(58).ToObject()
							πTemp001[5] = πg.NewInt(16).ToObject()
							πTemp001[6] = πg.NewInt(999998).ToObject()
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µargs = πTemp002
							// line 1463: t1 = self.theclass(*args)
							πF.SetLineno(1463)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µt1 = πTemp003
							// line 1464: t2 = self.theclass(*args)
							πF.SetLineno(1464)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 1465: self.assertTrue(t1 == t2)
							πF.SetLineno(1465)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1466: self.assertTrue(t1 <= t2)
							πF.SetLineno(1466)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1467: self.assertTrue(t1 >= t2)
							πF.SetLineno(1467)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1468: self.assertFalse(t1 != t2)
							πF.SetLineno(1468)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1469: self.assertFalse(t1 < t2)
							πF.SetLineno(1469)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1470: self.assertFalse(t1 > t2)
							πF.SetLineno(1470)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1471: self.assertEqual(cmp(t1, t2), 0)
							πF.SetLineno(1471)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1472: self.assertEqual(cmp(t2, t1), 0)
							πF.SetLineno(1472)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp004[0] = µargs
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1475: newargs = args[:]
							πF.SetLineno(1475)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µargs, πTemp003); πE != nil {
								continue
							}
							µnewargs = πTemp005
							// line 1476: newargs[i] = args[i] + 1
							πF.SetLineno(1476)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp005 = µi
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, µargs, πTemp005); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp008, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp008 = µi
							if πE = πg.SetItem(πF, µnewargs, πTemp008, πTemp005); πE != nil {
								continue
							}
							// line 1477: t2 = self.theclass(*newargs)   # this is larger than t1
							πF.SetLineno(1477)
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Invoke(πF, πTemp003, nil, µnewargs, nil, nil); πE != nil {
								continue
							}
							µt2 = πTemp005
							// line 1478: self.assertTrue(t1 < t2)
							πF.SetLineno(1478)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1479: self.assertTrue(t2 > t1)
							πF.SetLineno(1479)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1480: self.assertTrue(t1 <= t2)
							πF.SetLineno(1480)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1481: self.assertTrue(t2 >= t1)
							πF.SetLineno(1481)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1482: self.assertTrue(t1 != t2)
							πF.SetLineno(1482)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1483: self.assertTrue(t2 != t1)
							πF.SetLineno(1483)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1484: self.assertFalse(t1 == t2)
							πF.SetLineno(1484)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1485: self.assertFalse(t2 == t1)
							πF.SetLineno(1485)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1486: self.assertFalse(t1 > t2)
							πF.SetLineno(1486)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1487: self.assertFalse(t2 < t1)
							πF.SetLineno(1487)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1488: self.assertFalse(t1 >= t2)
							πF.SetLineno(1488)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1489: self.assertFalse(t2 <= t1)
							πF.SetLineno(1489)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1490: self.assertEqual(cmp(t1, t2), -1)
							πF.SetLineno(1490)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1491: self.assertEqual(cmp(t2, t1), 1)
							πF.SetLineno(1491)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_more_compare.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 1495: def verify_field_equality(self, expected, got):
					πF.SetLineno(1495)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "expected", Def: nil}
					πTemp002[2] = πg.Param{Name: "got", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("verify_field_equality", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µexpected *πg.Object = πArgs[1]; _ = µexpected
						var µgot *πg.Object = πArgs[2]; _ = µgot
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1496: self.assertEqual(expected.tm_year, got.year)
							πF.SetLineno(1496)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtm_year, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßyear, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1497: self.assertEqual(expected.tm_mon, got.month)
							πF.SetLineno(1497)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtm_mon, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßmonth, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1498: self.assertEqual(expected.tm_mday, got.day)
							πF.SetLineno(1498)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtm_mday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßday, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1499: self.assertEqual(expected.tm_hour, got.hour)
							πF.SetLineno(1499)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtm_hour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1500: self.assertEqual(expected.tm_min, got.minute)
							πF.SetLineno(1500)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtm_min, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1501: self.assertEqual(expected.tm_sec, got.second)
							πF.SetLineno(1501)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtm_sec, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßverify_field_equality.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 1503: def test_fromtimestamp(self):
					πF.SetLineno(1503)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_fromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µts *πg.Object = πg.UnboundLocal; _ = µts
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1504: import time
							πF.SetLineno(1504)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							// line 1506: ts = time.time()
							πF.SetLineno(1506)
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µts = πTemp003
							// line 1507: expected = time.localtime(ts)
							πF.SetLineno(1507)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßlocaltime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µexpected = πTemp003
							// line 1508: got = self.theclass.fromtimestamp(ts)
							πF.SetLineno(1508)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µgot = πTemp001
							// line 1509: self.verify_field_equality(expected, got)
							πF.SetLineno(1509)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßverify_field_equality, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_fromtimestamp.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 1511: def test_utcfromtimestamp(self):
					πF.SetLineno(1511)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("test_utcfromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µts *πg.Object = πg.UnboundLocal; _ = µts
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1512: import time
							πF.SetLineno(1512)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							// line 1514: ts = time.time()
							πF.SetLineno(1514)
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µts = πTemp003
							// line 1515: expected = time.gmtime(ts)
							πF.SetLineno(1515)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßgmtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µexpected = πTemp003
							// line 1516: got = self.theclass.utcfromtimestamp(ts)
							πF.SetLineno(1516)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßutcfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µgot = πTemp001
							// line 1517: self.verify_field_equality(expected, got)
							πF.SetLineno(1517)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßverify_field_equality, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_utcfromtimestamp.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 1519: def test_microsecond_rounding(self):
					πF.SetLineno(1519)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("test_microsecond_rounding", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1522: self.assertEqual(self.theclass.fromtimestamp(0.9999999),
							πF.SetLineno(1522)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewFloat(0.9999999).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp003
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_microsecond_rounding.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 1526: def test_insane_fromtimestamp(self):
					πF.SetLineno(1526)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("test_insane_fromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µinsane *πg.Object = πg.UnboundLocal; _ = µinsane
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewFloat(1e+200).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(πTemp003, πg.NewFloat(1e+200).ToObject()).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µinsane = πTemp002
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1532: self.assertRaises(ValueError, self.theclass.fromtimestamp,
							πF.SetLineno(1532)
							πTemp006 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromtimestamp, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp003
							if πE = πg.CheckLocal(πF, µinsane, "insane"); πE != nil {
								continue
							}
							πTemp006[2] = µinsane
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_insane_fromtimestamp.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 1525: @unittest.expectedFailure
					πF.SetLineno(1525)
					πTemp005 = πF.MakeArgs(1)
					if πTemp020, πE = πg.ResolveClass(πF, πClass, nil, ßtest_insane_fromtimestamp); πE != nil {
						continue
					}
					πTemp005[0] = πTemp020
					if πTemp020, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp021, πE = πg.GetAttr(πF, πTemp020, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp020, πE = πTemp021.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_insane_fromtimestamp.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 1536: def test_insane_utcfromtimestamp(self):
					πF.SetLineno(1536)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp020 = πg.NewFunction(πg.NewCode("test_insane_utcfromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µinsane *πg.Object = πg.UnboundLocal; _ = µinsane
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewFloat(1e+200).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(πTemp003, πg.NewFloat(1e+200).ToObject()).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µinsane = πTemp002
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1542: self.assertRaises(ValueError, self.theclass.utcfromtimestamp,
							πF.SetLineno(1542)
							πTemp006 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßutcfromtimestamp, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp003
							if πE = πg.CheckLocal(πF, µinsane, "insane"); πE != nil {
								continue
							}
							πTemp006[2] = µinsane
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_insane_utcfromtimestamp.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 1535: @unittest.expectedFailure
					πF.SetLineno(1535)
					πTemp005 = πF.MakeArgs(1)
					if πTemp021, πE = πg.ResolveClass(πF, πClass, nil, ßtest_insane_utcfromtimestamp); πE != nil {
						continue
					}
					πTemp005[0] = πTemp021
					if πTemp021, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp022, πE = πg.GetAttr(πF, πTemp021, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp021, πE = πTemp022.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_insane_utcfromtimestamp.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 1556: def test_utcnow(self):
					πF.SetLineno(1556)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp021 = πg.NewFunction(πg.NewCode("test_utcnow", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µtolerance *πg.Object = πg.UnboundLocal; _ = µtolerance
						var µdummy *πg.Object = πg.UnboundLocal; _ = µdummy
						var µfrom_now *πg.Object = πg.UnboundLocal; _ = µfrom_now
						var µfrom_timestamp *πg.Object = πg.UnboundLocal; _ = µfrom_timestamp
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1557: import time
							πF.SetLineno(1557)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							// line 1561: tolerance = timedelta(seconds=1)
							πF.SetLineno(1561)
							πTemp003 = πg.KWArgs{
								{"seconds", πg.NewInt(1).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µtolerance = πTemp004
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(3).ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µdummy = πTemp004
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1563: from_now = self.theclass.utcnow()
							πF.SetLineno(1563)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßutcnow, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							µfrom_now = πTemp004
							// line 1564: from_timestamp = self.theclass.utcfromtimestamp(time.time())
							πF.SetLineno(1564)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µtime, ßtime, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßutcfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µfrom_timestamp = πTemp004
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfrom_timestamp, "from_timestamp"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µfrom_now, "from_now"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, µfrom_timestamp, µfrom_now); πE != nil {
								continue
							}
							πTemp002[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßabs); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πg.CheckLocal(πF, µtolerance, "tolerance"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.LE(πF, πTemp008, µtolerance); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label4
							}
							goto Label5
							// line 1565: if abs(from_timestamp - from_now) <= tolerance:
							πF.SetLineno(1565)
						Label4:
							// line 1566: break
							πF.SetLineno(1566)
							πTemp006 = true
							continue
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 1568: self.assertLessEqual(abs(from_timestamp - from_now), tolerance)
							πF.SetLineno(1568)
							πTemp002 = πF.MakeArgs(2)
							πTemp009 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfrom_timestamp, "from_timestamp"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µfrom_now, "from_now"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µfrom_timestamp, µfrom_now); πE != nil {
								continue
							}
							πTemp009[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßabs); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µtolerance, "tolerance"); πE != nil {
								continue
							}
							πTemp002[1] = µtolerance
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertLessEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_utcnow.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 1580: def test_more_timetuple(self):
					πF.SetLineno(1580)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp022 = πg.NewFunction(πg.NewCode("test_more_timetuple", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µtt *πg.Object = πg.UnboundLocal; _ = µtt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1582: t = self.theclass(2004, 12, 31, 6, 22, 33)
							πF.SetLineno(1582)
							πTemp001 = πF.MakeArgs(6)
							πTemp001[0] = πg.NewInt(2004).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(6).ToObject()
							πTemp001[4] = πg.NewInt(22).ToObject()
							πTemp001[5] = πg.NewInt(33).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1583: self.assertEqual(t.timetuple(), (2004, 12, 31, 6, 22, 33, 4, 366, -1))
							πF.SetLineno(1583)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = make([]*πg.Object, 9)
							πTemp004[0] = πg.NewInt(2004).ToObject()
							πTemp004[1] = πg.NewInt(12).ToObject()
							πTemp004[2] = πg.NewInt(31).ToObject()
							πTemp004[3] = πg.NewInt(6).ToObject()
							πTemp004[4] = πg.NewInt(22).ToObject()
							πTemp004[5] = πg.NewInt(33).ToObject()
							πTemp004[6] = πg.NewInt(4).ToObject()
							πTemp004[7] = πg.NewInt(366).ToObject()
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[8] = πTemp003
							πTemp002 = πg.NewTuple(πTemp004...).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1584: self.assertEqual(t.timetuple(),
							πF.SetLineno(1584)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = make([]*πg.Object, 9)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßyear, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßday, nil); πE != nil {
								continue
							}
							πTemp004[2] = πTemp003
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßhour, nil); πE != nil {
								continue
							}
							πTemp004[3] = πTemp003
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
								continue
							}
							πTemp004[4] = πTemp003
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp004[5] = πTemp003
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßweekday, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[6] = πTemp005
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µt, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µt, ßyear, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp006
							πTemp008[1] = πg.NewInt(1).ToObject()
							πTemp008[2] = πg.NewInt(1).ToObject()
							if πTemp006, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp006.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp006, πE = πg.GetAttr(πF, πTemp009, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, πTemp007, πTemp009); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp005, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[7] = πTemp003
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004[8] = πTemp003
							πTemp002 = πg.NewTuple(πTemp004...).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1590: tt = t.timetuple()
							πF.SetLineno(1590)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtt = πTemp003
							// line 1591: self.assertEqual(tt.tm_year, t.year)
							πF.SetLineno(1591)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_year, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßyear, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1592: self.assertEqual(tt.tm_mon, t.month)
							πF.SetLineno(1592)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_mon, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1593: self.assertEqual(tt.tm_mday, t.day)
							πF.SetLineno(1593)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_mday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßday, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1594: self.assertEqual(tt.tm_hour, t.hour)
							πF.SetLineno(1594)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_hour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1595: self.assertEqual(tt.tm_min, t.minute)
							πF.SetLineno(1595)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_min, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1596: self.assertEqual(tt.tm_sec, t.second)
							πF.SetLineno(1596)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_sec, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1597: self.assertEqual(tt.tm_wday, t.weekday())
							πF.SetLineno(1597)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_wday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßweekday, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1598: self.assertEqual(tt.tm_yday, t.toordinal() -
							πF.SetLineno(1598)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_yday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µt, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µt, ßyear, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp005
							πTemp004[1] = πg.NewInt(1).ToObject()
							πTemp004[2] = πg.NewInt(1).ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp005, πE = πg.GetAttr(πF, πTemp007, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, πTemp006, πTemp007); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1600: self.assertEqual(tt.tm_isdst, -1)
							πF.SetLineno(1600)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtt, "tt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtt, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_more_timetuple.ToObject(), πTemp022); πE != nil {
						continue
					}
					// line 1603: def test_more_strftime(self):
					πF.SetLineno(1603)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp023 = πg.NewFunction(πg.NewCode("test_more_strftime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1605: t = self.theclass(2004, 12, 31, 6, 22, 33, 47)
							πF.SetLineno(1605)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2004).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(6).ToObject()
							πTemp001[4] = πg.NewInt(22).ToObject()
							πTemp001[5] = πg.NewInt(33).ToObject()
							πTemp001[6] = πg.NewInt(47).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1606: self.assertEqual(t.strftime("%m %d %y %f %S %M %H %j"),
							πF.SetLineno(1606)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("%m %d %y %f %S %M %H %j").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("12 31 04 000047 33 22 06 366").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_more_strftime.ToObject(), πTemp023); πE != nil {
						continue
					}
					// line 1602: @unittest.expectedFailure
					πF.SetLineno(1602)
					πTemp005 = πF.MakeArgs(1)
					if πTemp024, πE = πg.ResolveClass(πF, πClass, nil, ßtest_more_strftime); πE != nil {
						continue
					}
					πTemp005[0] = πTemp024
					if πTemp024, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp025, πE = πg.GetAttr(πF, πTemp024, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp024, πE = πTemp025.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_more_strftime.ToObject(), πTemp024); πE != nil {
						continue
					}
					// line 1609: def test_extract(self):
					πF.SetLineno(1609)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp024 = πg.NewFunction(πg.NewCode("test_extract", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1610: dt = self.theclass(2002, 3, 4, 18, 45, 3, 1234)
							πF.SetLineno(1610)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							πTemp001[3] = πg.NewInt(18).ToObject()
							πTemp001[4] = πg.NewInt(45).ToObject()
							πTemp001[5] = πg.NewInt(3).ToObject()
							πTemp001[6] = πg.NewInt(1234).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 1611: self.assertEqual(dt.date(), date(2002, 3, 4))
							πF.SetLineno(1611)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(3)
							πTemp004[0] = πg.NewInt(2002).ToObject()
							πTemp004[1] = πg.NewInt(3).ToObject()
							πTemp004[2] = πg.NewInt(4).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1612: self.assertEqual(dt.time(), time(18, 45, 3, 1234))
							πF.SetLineno(1612)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(4)
							πTemp004[0] = πg.NewInt(18).ToObject()
							πTemp004[1] = πg.NewInt(45).ToObject()
							πTemp004[2] = πg.NewInt(3).ToObject()
							πTemp004[3] = πg.NewInt(1234).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_extract.ToObject(), πTemp024); πE != nil {
						continue
					}
					// line 1614: def test_combine(self):
					πF.SetLineno(1614)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp025 = πg.NewFunction(πg.NewCode("test_combine", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µcombine *πg.Object = πg.UnboundLocal; _ = µcombine
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1615: d = date(2002, 3, 4)
							πF.SetLineno(1615)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 1616: t = time(18, 45, 3, 1234)
							πF.SetLineno(1616)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(18).ToObject()
							πTemp001[1] = πg.NewInt(45).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(1234).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1617: expected = self.theclass(2002, 3, 4, 18, 45, 3, 1234)
							πF.SetLineno(1617)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							πTemp001[3] = πg.NewInt(18).ToObject()
							πTemp001[4] = πg.NewInt(45).ToObject()
							πTemp001[5] = πg.NewInt(3).ToObject()
							πTemp001[6] = πg.NewInt(1234).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µexpected = πTemp003
							// line 1618: combine = self.theclass.combine
							πF.SetLineno(1618)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcombine, nil); πE != nil {
								continue
							}
							µcombine = πTemp003
							// line 1619: dt = combine(d, t)
							πF.SetLineno(1619)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[1] = µt
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							if πTemp002, πE = µcombine.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp002
							// line 1620: self.assertEqual(dt, expected)
							πF.SetLineno(1620)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1622: dt = combine(time=t, date=d)
							πF.SetLineno(1622)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"time", µt},
								{"date", µd},
							}
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							if πTemp002, πE = µcombine.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 1623: self.assertEqual(dt, expected)
							πF.SetLineno(1623)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1625: self.assertEqual(d, dt.date())
							πF.SetLineno(1625)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1626: self.assertEqual(t, dt.time())
							πF.SetLineno(1626)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[0] = µt
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1627: self.assertEqual(dt, combine(dt.date(), dt.time()))
							πF.SetLineno(1627)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp003
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							if πTemp002, πE = µcombine.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1629: self.assertRaises(TypeError, combine) # need an arg
							πF.SetLineno(1629)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							πTemp001[1] = µcombine
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1630: self.assertRaises(TypeError, combine, d) # need two args
							πF.SetLineno(1630)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							πTemp001[1] = µcombine
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[2] = µd
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1631: self.assertRaises(TypeError, combine, t, d) # args reversed
							πF.SetLineno(1631)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							πTemp001[1] = µcombine
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[2] = µt
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[3] = µd
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1632: self.assertRaises(TypeError, combine, d, t, 1) # too many args
							πF.SetLineno(1632)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							πTemp001[1] = µcombine
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[2] = µd
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[3] = µt
							πTemp001[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1633: self.assertRaises(TypeError, combine, "date", "time") # wrong types
							πF.SetLineno(1633)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µcombine, "combine"); πE != nil {
								continue
							}
							πTemp001[1] = µcombine
							πTemp001[2] = ßdate.ToObject()
							πTemp001[3] = ßtime.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_combine.ToObject(), πTemp025); πE != nil {
						continue
					}
					// line 1636: def test_replace(self):
					πF.SetLineno(1636)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp026 = πg.NewFunction(πg.NewCode("test_replace", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µname *πg.Object = πg.UnboundLocal; _ = µname
						var µnewval *πg.Object = πg.UnboundLocal; _ = µnewval
						var µnewargs *πg.Object = πg.UnboundLocal; _ = µnewargs
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Dict
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1637: cls = self.theclass
							πF.SetLineno(1637)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 1638: args = [1, 2, 3, 4, 5, 6, 7]
							πF.SetLineno(1638)
							πTemp002 = make([]*πg.Object, 7)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(3).ToObject()
							πTemp002[3] = πg.NewInt(4).ToObject()
							πTemp002[4] = πg.NewInt(5).ToObject()
							πTemp002[5] = πg.NewInt(6).ToObject()
							πTemp002[6] = πg.NewInt(7).ToObject()
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µargs = πTemp001
							// line 1639: base = cls(*args)
							πF.SetLineno(1639)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Invoke(πF, µcls, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µbase = πTemp001
							// line 1640: self.assertEqual(base, base.replace())
							πF.SetLineno(1640)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							πTemp002[0] = µbase
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1642: i = 0
							πF.SetLineno(1642)
							µi = πg.NewInt(0).ToObject()
							πTemp002 = make([]*πg.Object, 7)
							πTemp004 = πg.NewTuple2(ßyear.ToObject(), πg.NewInt(2).ToObject()).ToObject()
							πTemp002[0] = πTemp004
							πTemp004 = πg.NewTuple2(ßmonth.ToObject(), πg.NewInt(3).ToObject()).ToObject()
							πTemp002[1] = πTemp004
							πTemp004 = πg.NewTuple2(ßday.ToObject(), πg.NewInt(4).ToObject()).ToObject()
							πTemp002[2] = πTemp004
							πTemp004 = πg.NewTuple2(ßhour.ToObject(), πg.NewInt(5).ToObject()).ToObject()
							πTemp002[3] = πTemp004
							πTemp004 = πg.NewTuple2(ßminute.ToObject(), πg.NewInt(6).ToObject()).ToObject()
							πTemp002[4] = πTemp004
							πTemp004 = πg.NewTuple2(ßsecond.ToObject(), πg.NewInt(7).ToObject()).ToObject()
							πTemp002[5] = πTemp004
							πTemp004 = πg.NewTuple2(ßmicrosecond.ToObject(), πg.NewInt(8).ToObject()).ToObject()
							πTemp002[6] = πTemp004
							πTemp003 = πg.NewTuple(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
									continue
								}
								µname = πTemp004
								µnewval = πTemp007
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1650: newargs = args[:]
							πF.SetLineno(1650)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µargs, πTemp003); πE != nil {
								continue
							}
							µnewargs = πTemp004
							// line 1651: newargs[i] = newval
							πF.SetLineno(1651)
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µnewval); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp004 = µi
							if πE = πg.SetItem(πF, µnewargs, πTemp004, πTemp003); πE != nil {
								continue
							}
							// line 1652: expected = cls(*newargs)
							πF.SetLineno(1652)
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, µcls, nil, µnewargs, nil, nil); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 1653: got = base.replace(**{name: newval})
							πF.SetLineno(1653)
							πTemp008 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, µname, µnewval); πE != nil {
								continue
							}
							πTemp003 = πTemp008.ToObject()
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Invoke(πF, πTemp004, nil, nil, nil, πTemp003); πE != nil {
								continue
							}
							µgot = πTemp007
							// line 1654: self.assertEqual(expected, got)
							πF.SetLineno(1654)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1655: i += 1
							πF.SetLineno(1655)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µi = πTemp003
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 1658: base = cls(2000, 2, 29)
							πF.SetLineno(1658)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2000).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µbase = πTemp001
							// line 1659: self.assertRaises(ValueError, base.replace, year=2001)
							πF.SetLineno(1659)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp009 = πg.KWArgs{
								{"year", πg.NewInt(2001).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp026); πE != nil {
						continue
					}
					// line 1635: @unittest.expectedFailure
					πF.SetLineno(1635)
					πTemp005 = πF.MakeArgs(1)
					if πTemp027, πE = πg.ResolveClass(πF, πClass, nil, ßtest_replace); πE != nil {
						continue
					}
					πTemp005[0] = πTemp027
					if πTemp027, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp028, πE = πg.GetAttr(πF, πTemp027, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp027, πE = πTemp028.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp027); πE != nil {
						continue
					}
					// line 1661: def test_astimezone(self):
					πF.SetLineno(1661)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp027 = πg.NewFunction(πg.NewCode("test_astimezone", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var µf *πg.Object = πg.UnboundLocal; _ = µf
						var µBogus *πg.Object = πg.UnboundLocal; _ = µBogus
						var µbog *πg.Object = πg.UnboundLocal; _ = µbog
						var µAlsoBogus *πg.Object = πg.UnboundLocal; _ = µAlsoBogus
						var µalsobog *πg.Object = πg.UnboundLocal; _ = µalsobog
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1664: dt = self.theclass.now()
							πF.SetLineno(1664)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnow, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µdt = πTemp001
							// line 1665: f = FixedOffset(44, "")
							πF.SetLineno(1665)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(44).ToObject()
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µf = πTemp002
							// line 1666: self.assertRaises(TypeError, dt.astimezone) # not enough args
							πF.SetLineno(1666)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1667: self.assertRaises(TypeError, dt.astimezone, f, f) # too many args
							πF.SetLineno(1667)
							πTemp003 = πF.MakeArgs(4)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							πTemp003[2] = µf
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							πTemp003[3] = µf
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1668: self.assertRaises(TypeError, dt.astimezone, dt) # arg wrong type
							πF.SetLineno(1668)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[2] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1669: self.assertRaises(ValueError, dt.astimezone, f) # naive
							πF.SetLineno(1669)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							πTemp003[2] = µf
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1670: self.assertRaises(ValueError, dt.astimezone, tz=f)  # naive
							πF.SetLineno(1670)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tz", µf},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1672: class Bogus(tzinfo):
							πF.SetLineno(1672)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Bogus", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1673: def utcoffset(self, dt): return None
									πF.SetLineno(1673)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1673: def utcoffset(self, dt): return None
											πF.SetLineno(1673)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 1674: def dst(self, dt): return timedelta(0)
									πF.SetLineno(1674)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1674: def dst(self, dt): return timedelta(0)
											πF.SetLineno(1674)
											πTemp001 = πF.MakeArgs(1)
											πTemp001[0] = πg.NewInt(0).ToObject()
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp002 == nil {
								πTemp002 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp002.Call(πF, []*πg.Object{πg.NewStr("Bogus").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µBogus = πTemp006
							// line 1675: bog = Bogus()
							πF.SetLineno(1675)
							if πE = πg.CheckLocal(πF, µBogus, "Bogus"); πE != nil {
								continue
							}
							if πTemp001, πE = µBogus.Call(πF, nil, nil); πE != nil {
								continue
							}
							µbog = πTemp001
							// line 1676: self.assertRaises(ValueError, dt.astimezone, bog)   # naive
							πF.SetLineno(1676)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µbog, "bog"); πE != nil {
								continue
							}
							πTemp003[2] = µbog
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1678: class AlsoBogus(tzinfo):
							πF.SetLineno(1678)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("AlsoBogus", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1679: def utcoffset(self, dt): return timedelta(0)
									πF.SetLineno(1679)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1679: def utcoffset(self, dt): return timedelta(0)
											πF.SetLineno(1679)
											πTemp001 = πF.MakeArgs(1)
											πTemp001[0] = πg.NewInt(0).ToObject()
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 1680: def dst(self, dt): return None
									πF.SetLineno(1680)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1680: def dst(self, dt): return None
											πF.SetLineno(1680)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp002 == nil {
								πTemp002 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp002.Call(πF, []*πg.Object{πg.NewStr("AlsoBogus").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µAlsoBogus = πTemp006
							// line 1681: alsobog = AlsoBogus()
							πF.SetLineno(1681)
							if πE = πg.CheckLocal(πF, µAlsoBogus, "AlsoBogus"); πE != nil {
								continue
							}
							if πTemp001, πE = µAlsoBogus.Call(πF, nil, nil); πE != nil {
								continue
							}
							µalsobog = πTemp001
							// line 1682: self.assertRaises(ValueError, dt.astimezone, alsobog) # also naive
							πF.SetLineno(1682)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µalsobog, "alsobog"); πE != nil {
								continue
							}
							πTemp003[2] = µalsobog
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_astimezone.ToObject(), πTemp027); πE != nil {
						continue
					}
					// line 1685: def test_subclass_datetime(self):
					πF.SetLineno(1685)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp028 = πg.NewFunction(πg.NewCode("test_subclass_datetime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µC *πg.Object = πg.UnboundLocal; _ = µC
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µdt1 *πg.Object = πg.UnboundLocal; _ = µdt1
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1687: class C(self.theclass):
							πF.SetLineno(1687)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1688: theAnswer = 42
									πF.SetLineno(1688)
									if πE = πClass.SetItem(πF, ßtheAnswer.ToObject(), πg.NewInt(42).ToObject()); πE != nil {
										continue
									}
									// line 1690: def __new__(cls, *args, **kws):
									πF.SetLineno(1690)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "cls", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__new__", "build/src/__python__/test/test_datetime.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µcls *πg.Object = πArgs[0]; _ = µcls
										var µargs *πg.Object = πArgs[1]; _ = µargs
										var µkws *πg.Object = πArgs[2]; _ = µkws
										var µtemp *πg.Object = πg.UnboundLocal; _ = µtemp
										var µextra *πg.Object = πg.UnboundLocal; _ = µextra
										var µresult *πg.Object = πg.UnboundLocal; _ = µresult
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1691: temp = kws.copy()
											πF.SetLineno(1691)
											if πE = πg.CheckLocal(πF, µkws, "kws"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µkws, ßcopy, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
												continue
											}
											µtemp = πTemp002
											// line 1692: extra = temp.pop('extra')
											πF.SetLineno(1692)
											πTemp003 = πF.MakeArgs(1)
											πTemp003[0] = ßextra.ToObject()
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtemp, ßpop, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µextra = πTemp002
											// line 1693: result = self.theclass.__new__(cls, *args, **temp)
											πF.SetLineno(1693)
											πTemp003 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
												continue
											}
											πTemp003[0] = µcls
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ß__new__, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Invoke(πF, πTemp002, πTemp003, µargs, nil, µtemp); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µresult = πTemp001
											// line 1694: result.extra = extra
											πF.SetLineno(1694)
											if πE = πg.CheckLocal(πF, µextra, "extra"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µextra); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µresult, ßextra, πTemp001); πE != nil {
												continue
											}
											// line 1695: return result
											πF.SetLineno(1695)
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											πR = µresult
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__new__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 1697: def newmeth(self, start):
									πF.SetLineno(1697)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "start", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("newmeth", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µstart *πg.Object = πArgs[1]; _ = µstart
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 *πg.Object
										_ = πTemp004
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1698: return start + self.year + self.month + self.second
											πF.SetLineno(1698)
											if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µself, ßyear, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πg.Add(πF, µstart, πTemp004); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp004, πE = πg.GetAttr(πF, µself, ßmonth, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Add(πF, πTemp003, πTemp004); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßsecond, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Add(πF, πTemp002, πTemp003); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßnewmeth.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µC = πTemp005
							// line 1700: args = 2003, 4, 14, 12, 13, 41
							πF.SetLineno(1700)
							πTemp002 = πg.NewTuple6(πg.NewInt(2003).ToObject(), πg.NewInt(4).ToObject(), πg.NewInt(14).ToObject(), πg.NewInt(12).ToObject(), πg.NewInt(13).ToObject(), πg.NewInt(41).ToObject()).ToObject()
							µargs = πTemp002
							// line 1702: dt1 = self.theclass(*args)
							πF.SetLineno(1702)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µdt1 = πTemp004
							// line 1703: dt2 = C(*args, **{'extra': 7})
							πF.SetLineno(1703)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ßextra.ToObject(), πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, µC, nil, µargs, nil, πTemp002); πE != nil {
								continue
							}
							µdt2 = πTemp004
							// line 1705: self.assertEqual(dt2.__class__, C)
							πF.SetLineno(1705)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ß__class__, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							πTemp003[1] = µC
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1706: self.assertEqual(dt2.theAnswer, 42)
							πF.SetLineno(1706)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßtheAnswer, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1707: self.assertEqual(dt2.extra, 7)
							πF.SetLineno(1707)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßextra, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1708: self.assertEqual(dt1.toordinal(), dt2.toordinal())
							πF.SetLineno(1708)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt1, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1709: self.assertEqual(dt2.newmeth(-7), dt1.year + dt1.month +
							πF.SetLineno(1709)
							πTemp003 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßnewmeth, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µdt1, ßyear, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µdt1, ßmonth, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Add(πF, πTemp007, πTemp008); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µdt1, ßsecond, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp004, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subclass_datetime.ToObject(), πTemp028); πE != nil {
						continue
					}
					// line 1684: @unittest.expectedFailure
					πF.SetLineno(1684)
					πTemp005 = πF.MakeArgs(1)
					if πTemp029, πE = πg.ResolveClass(πF, πClass, nil, ßtest_subclass_datetime); πE != nil {
						continue
					}
					πTemp005[0] = πTemp029
					if πTemp029, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp030, πE = πg.GetAttr(πF, πTemp029, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp029, πE = πTemp030.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_subclass_datetime.ToObject(), πTemp029); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestDateTime").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestDateTime.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 1712: class SubclassTime(time):
			πF.SetLineno(1712)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("SubclassTime", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1713: sub_var = 1
					πF.SetLineno(1713)
					if πE = πClass.SetItem(πF, ßsub_var.ToObject(), πg.NewInt(1).ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("SubclassTime").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßSubclassTime.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 1715: class TestTime(HarmlessMixedComparison, unittest.TestCase):
			πF.SetLineno(1715)
			πTemp002 = make([]*πg.Object, 2)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßHarmlessMixedComparison); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[1] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTime", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 1717: theclass = time
					πF.SetLineno(1717)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßtime); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßtheclass.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1719: def test_basic_attributes(self):
					πF.SetLineno(1719)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_basic_attributes", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1720: t = self.theclass(12, 0)
							πF.SetLineno(1720)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(12).ToObject()
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1721: self.assertEqual(t.hour, 12)
							πF.SetLineno(1721)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(12).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1722: self.assertEqual(t.minute, 0)
							πF.SetLineno(1722)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1723: self.assertEqual(t.second, 0)
							πF.SetLineno(1723)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1724: self.assertEqual(t.microsecond, 0)
							πF.SetLineno(1724)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_basic_attributes.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1726: def test_basic_attributes_nonzero(self):
					πF.SetLineno(1726)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_basic_attributes_nonzero", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1729: t = self.theclass(12, 59, 59, 8000)
							πF.SetLineno(1729)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(12).ToObject()
							πTemp001[1] = πg.NewInt(59).ToObject()
							πTemp001[2] = πg.NewInt(59).ToObject()
							πTemp001[3] = πg.NewInt(8000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1730: self.assertEqual(t.hour, 12)
							πF.SetLineno(1730)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(12).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1731: self.assertEqual(t.minute, 59)
							πF.SetLineno(1731)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1732: self.assertEqual(t.second, 59)
							πF.SetLineno(1732)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1733: self.assertEqual(t.microsecond, 8000)
							πF.SetLineno(1733)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(8000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_basic_attributes_nonzero.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1736: def test_roundtrip(self):
					πF.SetLineno(1736)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_roundtrip", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µs *πg.Object = πg.UnboundLocal; _ = µs
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1737: t = self.theclass(1, 2, 3, 4)
							πF.SetLineno(1737)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1740: s = repr(t)
							πF.SetLineno(1740)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs = πTemp003
							// line 1741: self.assertTrue(s.startswith('datetime.'))
							πF.SetLineno(1741)
							πTemp001 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("datetime.").ToObject()
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µs, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1742: s = s[9:]
							πF.SetLineno(1742)
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(9).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µs, πTemp002); πE != nil {
								continue
							}
							µs = πTemp003
							// line 1743: t2 = eval(s)
							πF.SetLineno(1743)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
								continue
							}
							πTemp001[0] = µs
							if πTemp002, πE = πg.ResolveGlobal(πF, ßeval); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 1744: self.assertEqual(t, t2)
							πF.SetLineno(1744)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[0] = µt
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1747: t2 = self.theclass(t.hour, t.minute, t.second,
							πF.SetLineno(1747)
							πTemp001 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp001[3] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 1749: self.assertEqual(t, t2)
							πF.SetLineno(1749)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[0] = µt
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1735: @unittest.expectedFailure
					πF.SetLineno(1735)
					πTemp005 = πF.MakeArgs(1)
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßtest_roundtrip); πE != nil {
						continue
					}
					πTemp005[0] = πTemp006
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp007.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_roundtrip.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 1751: def test_comparing(self):
					πF.SetLineno(1751)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_comparing", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µnewargs *πg.Object = πg.UnboundLocal; _ = µnewargs
						var µbadarg *πg.Object = πg.UnboundLocal; _ = µbadarg
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 []πg.Param
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 1752: args = [1, 2, 3, 4]
							πF.SetLineno(1752)
							πTemp001 = make([]*πg.Object, 4)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µargs = πTemp002
							// line 1753: t1 = self.theclass(*args)
							πF.SetLineno(1753)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µt1 = πTemp003
							// line 1754: t2 = self.theclass(*args)
							πF.SetLineno(1754)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 1755: self.assertTrue(t1 == t2)
							πF.SetLineno(1755)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1756: self.assertTrue(t1 <= t2)
							πF.SetLineno(1756)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1757: self.assertTrue(t1 >= t2)
							πF.SetLineno(1757)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1758: self.assertFalse(t1 != t2)
							πF.SetLineno(1758)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1759: self.assertFalse(t1 < t2)
							πF.SetLineno(1759)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1760: self.assertFalse(t1 > t2)
							πF.SetLineno(1760)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1761: self.assertEqual(cmp(t1, t2), 0)
							πF.SetLineno(1761)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1762: self.assertEqual(cmp(t2, t1), 0)
							πF.SetLineno(1762)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp004[0] = µargs
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1765: newargs = args[:]
							πF.SetLineno(1765)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µargs, πTemp003); πE != nil {
								continue
							}
							µnewargs = πTemp005
							// line 1766: newargs[i] = args[i] + 1
							πF.SetLineno(1766)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp005 = µi
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, µargs, πTemp005); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp008, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp008 = µi
							if πE = πg.SetItem(πF, µnewargs, πTemp008, πTemp005); πE != nil {
								continue
							}
							// line 1767: t2 = self.theclass(*newargs)   # this is larger than t1
							πF.SetLineno(1767)
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Invoke(πF, πTemp003, nil, µnewargs, nil, nil); πE != nil {
								continue
							}
							µt2 = πTemp005
							// line 1768: self.assertTrue(t1 < t2)
							πF.SetLineno(1768)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1769: self.assertTrue(t2 > t1)
							πF.SetLineno(1769)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1770: self.assertTrue(t1 <= t2)
							πF.SetLineno(1770)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1771: self.assertTrue(t2 >= t1)
							πF.SetLineno(1771)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1772: self.assertTrue(t1 != t2)
							πF.SetLineno(1772)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1773: self.assertTrue(t2 != t1)
							πF.SetLineno(1773)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1774: self.assertFalse(t1 == t2)
							πF.SetLineno(1774)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1775: self.assertFalse(t2 == t1)
							πF.SetLineno(1775)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1776: self.assertFalse(t1 > t2)
							πF.SetLineno(1776)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1777: self.assertFalse(t2 < t1)
							πF.SetLineno(1777)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1778: self.assertFalse(t1 >= t2)
							πF.SetLineno(1778)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1779: self.assertFalse(t2 <= t1)
							πF.SetLineno(1779)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1780: self.assertEqual(cmp(t1, t2), -1)
							πF.SetLineno(1780)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[1] = µt2
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1781: self.assertEqual(cmp(t2, t1), 1)
							πF.SetLineno(1781)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp004[0] = µt2
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp004[1] = µt1
							if πTemp003, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πTemp003, πE = πg.ResolveGlobal(πF, ßOTHERSTUFF); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp006 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µbadarg = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 1784: self.assertEqual(t1 == badarg, False)
							πF.SetLineno(1784)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µbadarg); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1785: self.assertEqual(t1 != badarg, True)
							πF.SetLineno(1785)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µbadarg); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1786: self.assertEqual(badarg == t1, False)
							πF.SetLineno(1786)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µbadarg, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1787: self.assertEqual(badarg != t1, True)
							πF.SetLineno(1787)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µbadarg, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1789: self.assertRaises(TypeError, lambda: t1 <= badarg)
							πF.SetLineno(1789)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1789: self.assertRaises(TypeError, lambda: t1 <= badarg)
									πF.SetLineno(1789)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1790: self.assertRaises(TypeError, lambda: t1 < badarg)
							πF.SetLineno(1790)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1790: self.assertRaises(TypeError, lambda: t1 < badarg)
									πF.SetLineno(1790)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1791: self.assertRaises(TypeError, lambda: t1 > badarg)
							πF.SetLineno(1791)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1791: self.assertRaises(TypeError, lambda: t1 > badarg)
									πF.SetLineno(1791)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1792: self.assertRaises(TypeError, lambda: t1 >= badarg)
							πF.SetLineno(1792)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1792: self.assertRaises(TypeError, lambda: t1 >= badarg)
									πF.SetLineno(1792)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µt1, µbadarg); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1793: self.assertRaises(TypeError, lambda: badarg <= t1)
							πF.SetLineno(1793)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1793: self.assertRaises(TypeError, lambda: badarg <= t1)
									πF.SetLineno(1793)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1794: self.assertRaises(TypeError, lambda: badarg < t1)
							πF.SetLineno(1794)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1794: self.assertRaises(TypeError, lambda: badarg < t1)
									πF.SetLineno(1794)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1795: self.assertRaises(TypeError, lambda: badarg > t1)
							πF.SetLineno(1795)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1795: self.assertRaises(TypeError, lambda: badarg > t1)
									πF.SetLineno(1795)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1796: self.assertRaises(TypeError, lambda: badarg >= t1)
							πF.SetLineno(1796)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp009 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp009, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1796: self.assertRaises(TypeError, lambda: badarg >= t1)
									πF.SetLineno(1796)
									if πE = πg.CheckLocal(πF, µbadarg, "badarg"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µbadarg, µt1); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_comparing.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 1798: def test_bad_constructor_arguments(self):
					πF.SetLineno(1798)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_bad_constructor_arguments", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1800: self.theclass(0, 0)    # no exception
							πF.SetLineno(1800)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1801: self.theclass(23, 0)   # no exception
							πF.SetLineno(1801)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1802: self.assertRaises(ValueError, self.theclass, -1, 0)
							πF.SetLineno(1802)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							πTemp001[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1803: self.assertRaises(ValueError, self.theclass, 24, 0)
							πF.SetLineno(1803)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(24).ToObject()
							πTemp001[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1805: self.theclass(23, 0)    # no exception
							πF.SetLineno(1805)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1806: self.theclass(23, 59)   # no exception
							πF.SetLineno(1806)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1807: self.assertRaises(ValueError, self.theclass, 23, -1)
							πF.SetLineno(1807)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(23).ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[3] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1808: self.assertRaises(ValueError, self.theclass, 23, 60)
							πF.SetLineno(1808)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(23).ToObject()
							πTemp001[3] = πg.NewInt(60).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1810: self.theclass(23, 59, 0)    # no exception
							πF.SetLineno(1810)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(59).ToObject()
							πTemp001[2] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1811: self.theclass(23, 59, 59)   # no exception
							πF.SetLineno(1811)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(59).ToObject()
							πTemp001[2] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1812: self.assertRaises(ValueError, self.theclass, 23, 59, -1)
							πF.SetLineno(1812)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(23).ToObject()
							πTemp001[3] = πg.NewInt(59).ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[4] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1813: self.assertRaises(ValueError, self.theclass, 23, 59, 60)
							πF.SetLineno(1813)
							πTemp001 = πF.MakeArgs(5)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(23).ToObject()
							πTemp001[3] = πg.NewInt(59).ToObject()
							πTemp001[4] = πg.NewInt(60).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1815: self.theclass(23, 59, 59, 0)        # no exception
							πF.SetLineno(1815)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(59).ToObject()
							πTemp001[2] = πg.NewInt(59).ToObject()
							πTemp001[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1816: self.theclass(23, 59, 59, 999999)   # no exception
							πF.SetLineno(1816)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(59).ToObject()
							πTemp001[2] = πg.NewInt(59).ToObject()
							πTemp001[3] = πg.NewInt(999999).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1817: self.assertRaises(ValueError, self.theclass, 23, 59, 59, -1)
							πF.SetLineno(1817)
							πTemp001 = πF.MakeArgs(6)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(23).ToObject()
							πTemp001[3] = πg.NewInt(59).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001[5] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1818: self.assertRaises(ValueError, self.theclass, 23, 59, 59, 1000000)
							πF.SetLineno(1818)
							πTemp001 = πF.MakeArgs(6)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewInt(23).ToObject()
							πTemp001[3] = πg.NewInt(59).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(1000000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bad_constructor_arguments.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 1820: def test_hash_equality(self):
					πF.SetLineno(1820)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_hash_equality", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µe *πg.Object = πg.UnboundLocal; _ = µe
						var µdic *πg.Object = πg.UnboundLocal; _ = µdic
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1821: d = self.theclass(23, 30, 17)
							πF.SetLineno(1821)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(30).ToObject()
							πTemp001[2] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 1822: e = self.theclass(23, 30, 17)
							πF.SetLineno(1822)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(30).ToObject()
							πTemp001[2] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µe = πTemp003
							// line 1823: self.assertEqual(d, e)
							πF.SetLineno(1823)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp001[1] = µe
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1824: self.assertEqual(hash(d), hash(e))
							πF.SetLineno(1824)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp004[0] = µd
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp004[0] = µe
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1826: dic = {d: 1}
							πF.SetLineno(1826)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, µd, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µdic = πTemp002
							// line 1827: dic[e] = 2
							πF.SetLineno(1827)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp003 = µe
							if πE = πg.SetItem(πF, µdic, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 1828: self.assertEqual(len(dic), 1)
							πF.SetLineno(1828)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							πTemp004[0] = µdic
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1829: self.assertEqual(dic[d], 2)
							πF.SetLineno(1829)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002 = µd
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1830: self.assertEqual(dic[e], 2)
							πF.SetLineno(1830)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp002 = µe
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1832: d = self.theclass(0,  5, 17)
							πF.SetLineno(1832)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewInt(5).ToObject()
							πTemp001[2] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 1833: e = self.theclass(0,  5, 17)
							πF.SetLineno(1833)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewInt(5).ToObject()
							πTemp001[2] = πg.NewInt(17).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µe = πTemp003
							// line 1834: self.assertEqual(d, e)
							πF.SetLineno(1834)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp001[1] = µe
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1835: self.assertEqual(hash(d), hash(e))
							πF.SetLineno(1835)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp004[0] = µd
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp004[0] = µe
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1837: dic = {d: 1}
							πF.SetLineno(1837)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, µd, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µdic = πTemp002
							// line 1838: dic[e] = 2
							πF.SetLineno(1838)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp003 = µe
							if πE = πg.SetItem(πF, µdic, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 1839: self.assertEqual(len(dic), 1)
							πF.SetLineno(1839)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							πTemp004[0] = µdic
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1840: self.assertEqual(dic[d], 2)
							πF.SetLineno(1840)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp002 = µd
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1841: self.assertEqual(dic[e], 2)
							πF.SetLineno(1841)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µe, "e"); πE != nil {
								continue
							}
							πTemp002 = µe
							if πE = πg.CheckLocal(πF, µdic, "dic"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µdic, πTemp002); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_hash_equality.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 1843: def test_isoformat(self):
					πF.SetLineno(1843)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_isoformat", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1844: t = self.theclass(4, 5, 1, 123)
							πF.SetLineno(1844)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(4).ToObject()
							πTemp001[1] = πg.NewInt(5).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(123).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1845: self.assertEqual(t.isoformat(), "04:05:01.000123")
							πF.SetLineno(1845)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("04:05:01.000123").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1846: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1846)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1848: t = self.theclass()
							πF.SetLineno(1848)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1849: self.assertEqual(t.isoformat(), "00:00:00")
							πF.SetLineno(1849)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1850: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1850)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1852: t = self.theclass(microsecond=1)
							πF.SetLineno(1852)
							πTemp005 = πg.KWArgs{
								{"microsecond", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1853: self.assertEqual(t.isoformat(), "00:00:00.000001")
							πF.SetLineno(1853)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.000001").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1854: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1854)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1856: t = self.theclass(microsecond=10)
							πF.SetLineno(1856)
							πTemp005 = πg.KWArgs{
								{"microsecond", πg.NewInt(10).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1857: self.assertEqual(t.isoformat(), "00:00:00.000010")
							πF.SetLineno(1857)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.000010").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1858: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1858)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1860: t = self.theclass(microsecond=100)
							πF.SetLineno(1860)
							πTemp005 = πg.KWArgs{
								{"microsecond", πg.NewInt(100).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1861: self.assertEqual(t.isoformat(), "00:00:00.000100")
							πF.SetLineno(1861)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.000100").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1862: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1862)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1864: t = self.theclass(microsecond=1000)
							πF.SetLineno(1864)
							πTemp005 = πg.KWArgs{
								{"microsecond", πg.NewInt(1000).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1865: self.assertEqual(t.isoformat(), "00:00:00.001000")
							πF.SetLineno(1865)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.001000").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1866: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1866)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1868: t = self.theclass(microsecond=10000)
							πF.SetLineno(1868)
							πTemp005 = πg.KWArgs{
								{"microsecond", πg.NewInt(10000).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1869: self.assertEqual(t.isoformat(), "00:00:00.010000")
							πF.SetLineno(1869)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.010000").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1870: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1870)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1872: t = self.theclass(microsecond=100000)
							πF.SetLineno(1872)
							πTemp005 = πg.KWArgs{
								{"microsecond", πg.NewInt(100000).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1873: self.assertEqual(t.isoformat(), "00:00:00.100000")
							πF.SetLineno(1873)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.100000").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1874: self.assertEqual(t.isoformat(), str(t))
							πF.SetLineno(1874)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_isoformat.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 1876: def test_1653736(self):
					πF.SetLineno(1876)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_1653736", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1878: t = self.theclass(second=1)
							πF.SetLineno(1878)
							πTemp001 = πg.KWArgs{
								{"second", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µt = πTemp003
							// line 1879: self.assertRaises(TypeError, t.isoformat, foo=3)
							πF.SetLineno(1879)
							πTemp004 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßisoformat, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp002
							πTemp001 = πg.KWArgs{
								{"foo", πg.NewInt(3).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_1653736.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 1882: def test_strftime(self):
					πF.SetLineno(1882)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_strftime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1883: t = self.theclass(1, 2, 3, 4)
							πF.SetLineno(1883)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1884: self.assertEqual(t.strftime('%H %M %S %f'), "01 02 03 000004")
							πF.SetLineno(1884)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("%H %M %S %f").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("01 02 03 000004").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1886: self.assertEqual(t.strftime("'%z' '%Z'"), "'' ''")
							πF.SetLineno(1886)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("'%z' '%Z'").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("'' ''").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_strftime.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 1881: @unittest.expectedFailure
					πF.SetLineno(1881)
					πTemp005 = πF.MakeArgs(1)
					if πTemp012, πE = πg.ResolveClass(πF, πClass, nil, ßtest_strftime); πE != nil {
						continue
					}
					πTemp005[0] = πTemp012
					if πTemp012, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp013, πE = πg.GetAttr(πF, πTemp012, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp012, πE = πTemp013.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_strftime.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 1889: def test_format(self):
					πF.SetLineno(1889)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_format", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µA *πg.Object = πg.UnboundLocal; _ = µA
						var µa *πg.Object = πg.UnboundLocal; _ = µa
						var µB *πg.Object = πg.UnboundLocal; _ = µB
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var µfmt *πg.Object = πg.UnboundLocal; _ = µfmt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1890: t = self.theclass(1, 2, 3, 4)
							πF.SetLineno(1890)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 1891: self.assertEqual(t.__format__(''), str(t))
							πF.SetLineno(1891)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1894: class A(self.theclass):
							πF.SetLineno(1894)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("A", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1895: def __str__(self):
									πF.SetLineno(1895)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__str__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1896: return 'A'
											πF.SetLineno(1896)
											πR = ßA.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__str__.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("A").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µA = πTemp006
							// line 1897: a = A(1, 2, 3, 4)
							πF.SetLineno(1897)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µA, "A"); πE != nil {
								continue
							}
							if πTemp002, πE = µA.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µa = πTemp002
							// line 1898: self.assertEqual(a.__format__(''), 'A')
							πF.SetLineno(1898)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp001[1] = ßA.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1901: class B(self.theclass):
							πF.SetLineno(1901)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("B", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1902: def strftime(self, format_spec):
									πF.SetLineno(1902)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "format_spec", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("strftime", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µformat_spec *πg.Object = πArgs[1]; _ = µformat_spec
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1903: return 'B'
											πF.SetLineno(1903)
											πR = ßB.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßstrftime.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("B").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µB = πTemp006
							// line 1904: b = B(1, 2, 3, 4)
							πF.SetLineno(1904)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µB, "B"); πE != nil {
								continue
							}
							if πTemp002, πE = µB.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µb = πTemp002
							// line 1905: self.assertEqual(b.__format__(''), str(t))
							πF.SetLineno(1905)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µb, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp004[0] = µt
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = make([]*πg.Object, 1)
							πTemp001[0] = πg.NewStr("%H %M %S").ToObject()
							πTemp003 = πg.NewList(πTemp001...).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µfmt = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1909: self.assertEqual(t.__format__(fmt), t.strftime(fmt))
							πF.SetLineno(1909)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1910: self.assertEqual(a.__format__(fmt), t.strftime(fmt))
							πF.SetLineno(1910)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µa, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1911: self.assertEqual(b.__format__(fmt), 'B')
							πF.SetLineno(1911)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfmt, "fmt"); πE != nil {
								continue
							}
							πTemp004[0] = µfmt
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µb, ß__format__, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp006
							πTemp001[1] = ßB.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_format.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 1888: @unittest.expectedFailure
					πF.SetLineno(1888)
					πTemp005 = πF.MakeArgs(1)
					if πTemp013, πE = πg.ResolveClass(πF, πClass, nil, ßtest_format); πE != nil {
						continue
					}
					πTemp005[0] = πTemp013
					if πTemp013, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp014, πE = πg.GetAttr(πF, πTemp013, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp013, πE = πTemp014.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_format.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 1913: def test_str(self):
					πF.SetLineno(1913)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_str", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1914: self.assertEqual(str(self.theclass(1, 2, 3, 4)), "01:02:03.000004")
							πF.SetLineno(1914)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(4)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							πTemp003[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewStr("01:02:03.000004").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1915: self.assertEqual(str(self.theclass(10, 2, 3, 4000)), "10:02:03.004000")
							πF.SetLineno(1915)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(4)
							πTemp003[0] = πg.NewInt(10).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							πTemp003[3] = πg.NewInt(4000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewStr("10:02:03.004000").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1916: self.assertEqual(str(self.theclass(0, 2, 3, 400000)), "00:02:03.400000")
							πF.SetLineno(1916)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(4)
							πTemp003[0] = πg.NewInt(0).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							πTemp003[3] = πg.NewInt(400000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewStr("00:02:03.400000").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1917: self.assertEqual(str(self.theclass(12, 2, 3, 0)), "12:02:03")
							πF.SetLineno(1917)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(4)
							πTemp003[0] = πg.NewInt(12).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							πTemp003[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewStr("12:02:03").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1918: self.assertEqual(str(self.theclass(23, 15, 0, 0)), "23:15:00")
							πF.SetLineno(1918)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(4)
							πTemp003[0] = πg.NewInt(23).ToObject()
							πTemp003[1] = πg.NewInt(15).ToObject()
							πTemp003[2] = πg.NewInt(0).ToObject()
							πTemp003[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp005
							πTemp001[1] = πg.NewStr("23:15:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_str.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 1920: def test_repr(self):
					πF.SetLineno(1920)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_repr", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µname *πg.Object = πg.UnboundLocal; _ = µname
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1921: name = 'datetime.' + self.theclass.__name__
							πF.SetLineno(1921)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ß__name__, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πg.NewStr("datetime.").ToObject(), πTemp003); πE != nil {
								continue
							}
							µname = πTemp001
							// line 1922: self.assertEqual(repr(self.theclass(1, 2, 3, 4)),
							πF.SetLineno(1922)
							πTemp004 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(4)
							πTemp006[0] = πg.NewInt(1).ToObject()
							πTemp006[1] = πg.NewInt(2).ToObject()
							πTemp006[2] = πg.NewInt(3).ToObject()
							πTemp006[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp005[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s(1, 2, 3, 4)").ToObject(), µname); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1924: self.assertEqual(repr(self.theclass(10, 2, 3, 4000)),
							πF.SetLineno(1924)
							πTemp004 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(4)
							πTemp006[0] = πg.NewInt(10).ToObject()
							πTemp006[1] = πg.NewInt(2).ToObject()
							πTemp006[2] = πg.NewInt(3).ToObject()
							πTemp006[3] = πg.NewInt(4000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp005[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s(10, 2, 3, 4000)").ToObject(), µname); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1926: self.assertEqual(repr(self.theclass(0, 2, 3, 400000)),
							πF.SetLineno(1926)
							πTemp004 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(4)
							πTemp006[0] = πg.NewInt(0).ToObject()
							πTemp006[1] = πg.NewInt(2).ToObject()
							πTemp006[2] = πg.NewInt(3).ToObject()
							πTemp006[3] = πg.NewInt(400000).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp005[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s(0, 2, 3, 400000)").ToObject(), µname); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1928: self.assertEqual(repr(self.theclass(12, 2, 3, 0)),
							πF.SetLineno(1928)
							πTemp004 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(4)
							πTemp006[0] = πg.NewInt(12).ToObject()
							πTemp006[1] = πg.NewInt(2).ToObject()
							πTemp006[2] = πg.NewInt(3).ToObject()
							πTemp006[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp005[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s(12, 2, 3)").ToObject(), µname); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1930: self.assertEqual(repr(self.theclass(23, 15, 0, 0)),
							πF.SetLineno(1930)
							πTemp004 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(4)
							πTemp006[0] = πg.NewInt(23).ToObject()
							πTemp006[1] = πg.NewInt(15).ToObject()
							πTemp006[2] = πg.NewInt(0).ToObject()
							πTemp006[3] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp005[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s(23, 15)").ToObject(), µname); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_repr.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 1933: def test_resolution_info(self):
					πF.SetLineno(1933)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_resolution_info", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1934: self.assertIsInstance(self.theclass.min, self.theclass)
							πF.SetLineno(1934)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmin, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1935: self.assertIsInstance(self.theclass.max, self.theclass)
							πF.SetLineno(1935)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmax, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1936: self.assertIsInstance(self.theclass.resolution, timedelta)
							πF.SetLineno(1936)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßresolution, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsInstance, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1937: self.assertTrue(self.theclass.max > self.theclass.min)
							πF.SetLineno(1937)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßmax, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßmin, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, πTemp004, πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_resolution_info.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 1955: def test_bool(self):
					πF.SetLineno(1955)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_bool", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1956: cls = self.theclass
							πF.SetLineno(1956)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 1957: self.assertTrue(cls(1))
							πF.SetLineno(1957)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1958: self.assertTrue(cls(0, 1))
							πF.SetLineno(1958)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(0).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1959: self.assertTrue(cls(0, 0, 1))
							πF.SetLineno(1959)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(0).ToObject()
							πTemp003[1] = πg.NewInt(0).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1960: self.assertTrue(cls(0, 0, 0, 1))
							πF.SetLineno(1960)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(4)
							πTemp003[0] = πg.NewInt(0).ToObject()
							πTemp003[1] = πg.NewInt(0).ToObject()
							πTemp003[2] = πg.NewInt(0).ToObject()
							πTemp003[3] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1961: self.assertFalse(cls(0))
							πF.SetLineno(1961)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1962: self.assertFalse(cls())
							πF.SetLineno(1962)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bool.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 1965: def test_replace(self):
					πF.SetLineno(1965)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("test_replace", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µname *πg.Object = πg.UnboundLocal; _ = µname
						var µnewval *πg.Object = πg.UnboundLocal; _ = µnewval
						var µnewargs *πg.Object = πg.UnboundLocal; _ = µnewargs
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 *πg.Dict
						_ = πTemp010
						var πTemp011 πg.KWArgs
						_ = πTemp011
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 1966: cls = self.theclass
							πF.SetLineno(1966)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 1967: args = [1, 2, 3, 4]
							πF.SetLineno(1967)
							πTemp002 = make([]*πg.Object, 4)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(3).ToObject()
							πTemp002[3] = πg.NewInt(4).ToObject()
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µargs = πTemp001
							// line 1968: base = cls(*args)
							πF.SetLineno(1968)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Invoke(πF, µcls, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µbase = πTemp001
							// line 1969: self.assertEqual(base, base.replace())
							πF.SetLineno(1969)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							πTemp002[0] = µbase
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1971: i = 0
							πF.SetLineno(1971)
							µi = πg.NewInt(0).ToObject()
							πTemp004 = πg.NewTuple2(ßhour.ToObject(), πg.NewInt(5).ToObject()).ToObject()
							πTemp005 = πg.NewTuple2(ßminute.ToObject(), πg.NewInt(6).ToObject()).ToObject()
							πTemp006 = πg.NewTuple2(ßsecond.ToObject(), πg.NewInt(7).ToObject()).ToObject()
							πTemp007 = πg.NewTuple2(ßmicrosecond.ToObject(), πg.NewInt(8).ToObject()).ToObject()
							πTemp003 = πg.NewTuple4(πTemp004, πTemp005, πTemp006, πTemp007).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp008 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp005}}}, πTemp003); πE != nil {
									continue
								}
								µname = πTemp004
								µnewval = πTemp005
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 1976: newargs = args[:]
							πF.SetLineno(1976)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µargs, πTemp003); πE != nil {
								continue
							}
							µnewargs = πTemp004
							// line 1977: newargs[i] = newval
							πF.SetLineno(1977)
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µnewval); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp004 = µi
							if πE = πg.SetItem(πF, µnewargs, πTemp004, πTemp003); πE != nil {
								continue
							}
							// line 1978: expected = cls(*newargs)
							πF.SetLineno(1978)
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, µcls, nil, µnewargs, nil, nil); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 1979: got = base.replace(**{name: newval})
							πF.SetLineno(1979)
							πTemp010 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πTemp010.SetItem(πF, µname, µnewval); πE != nil {
								continue
							}
							πTemp003 = πTemp010.ToObject()
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Invoke(πF, πTemp004, nil, nil, nil, πTemp003); πE != nil {
								continue
							}
							µgot = πTemp005
							// line 1980: self.assertEqual(expected, got)
							πF.SetLineno(1980)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1981: i += 1
							πF.SetLineno(1981)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µi = πTemp003
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 1984: base = cls(1)
							πF.SetLineno(1984)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µbase = πTemp001
							// line 1985: self.assertRaises(ValueError, base.replace, hour=24)
							πF.SetLineno(1985)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp011 = πg.KWArgs{
								{"hour", πg.NewInt(24).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1986: self.assertRaises(ValueError, base.replace, minute=-1)
							πF.SetLineno(1986)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp011 = πg.KWArgs{
								{"minute", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1987: self.assertRaises(ValueError, base.replace, second=100)
							πF.SetLineno(1987)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp011 = πg.KWArgs{
								{"second", πg.NewInt(100).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 1988: self.assertRaises(ValueError, base.replace, microsecond=1000000)
							πF.SetLineno(1988)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp011 = πg.KWArgs{
								{"microsecond", πg.NewInt(1000000).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 1964: @unittest.expectedFailure
					πF.SetLineno(1964)
					πTemp005 = πF.MakeArgs(1)
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßtest_replace); πE != nil {
						continue
					}
					πTemp005[0] = πTemp018
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp019, πE = πg.GetAttr(πF, πTemp018, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp018, πE = πTemp019.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 1991: def test_subclass_time(self):
					πF.SetLineno(1991)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("test_subclass_time", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µC *πg.Object = πg.UnboundLocal; _ = µC
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µdt1 *πg.Object = πg.UnboundLocal; _ = µdt1
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 1993: class C(self.theclass):
							πF.SetLineno(1993)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 1994: theAnswer = 42
									πF.SetLineno(1994)
									if πE = πClass.SetItem(πF, ßtheAnswer.ToObject(), πg.NewInt(42).ToObject()); πE != nil {
										continue
									}
									// line 1996: def __new__(cls, *args, **kws):
									πF.SetLineno(1996)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "cls", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__new__", "build/src/__python__/test/test_datetime.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µcls *πg.Object = πArgs[0]; _ = µcls
										var µargs *πg.Object = πArgs[1]; _ = µargs
										var µkws *πg.Object = πArgs[2]; _ = µkws
										var µtemp *πg.Object = πg.UnboundLocal; _ = µtemp
										var µextra *πg.Object = πg.UnboundLocal; _ = µextra
										var µresult *πg.Object = πg.UnboundLocal; _ = µresult
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 1997: temp = kws.copy()
											πF.SetLineno(1997)
											if πE = πg.CheckLocal(πF, µkws, "kws"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µkws, ßcopy, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
												continue
											}
											µtemp = πTemp002
											// line 1998: extra = temp.pop('extra')
											πF.SetLineno(1998)
											πTemp003 = πF.MakeArgs(1)
											πTemp003[0] = ßextra.ToObject()
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtemp, ßpop, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µextra = πTemp002
											// line 1999: result = self.theclass.__new__(cls, *args, **temp)
											πF.SetLineno(1999)
											πTemp003 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
												continue
											}
											πTemp003[0] = µcls
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ß__new__, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Invoke(πF, πTemp002, πTemp003, µargs, nil, µtemp); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µresult = πTemp001
											// line 2000: result.extra = extra
											πF.SetLineno(2000)
											if πE = πg.CheckLocal(πF, µextra, "extra"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µextra); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µresult, ßextra, πTemp001); πE != nil {
												continue
											}
											// line 2001: return result
											πF.SetLineno(2001)
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											πR = µresult
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__new__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2003: def newmeth(self, start):
									πF.SetLineno(2003)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "start", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("newmeth", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µstart *πg.Object = πArgs[1]; _ = µstart
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2004: return start + self.hour + self.second
											πF.SetLineno(2004)
											if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßhour, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Add(πF, µstart, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßsecond, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Add(πF, πTemp002, πTemp003); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßnewmeth.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µC = πTemp005
							// line 2006: args = 4, 5, 6
							πF.SetLineno(2006)
							πTemp002 = πg.NewTuple3(πg.NewInt(4).ToObject(), πg.NewInt(5).ToObject(), πg.NewInt(6).ToObject()).ToObject()
							µargs = πTemp002
							// line 2008: dt1 = self.theclass(*args)
							πF.SetLineno(2008)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µdt1 = πTemp004
							// line 2009: dt2 = C(*args, **{'extra': 7})
							πF.SetLineno(2009)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ßextra.ToObject(), πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, µC, nil, µargs, nil, πTemp002); πE != nil {
								continue
							}
							µdt2 = πTemp004
							// line 2011: self.assertEqual(dt2.__class__, C)
							πF.SetLineno(2011)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ß__class__, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							πTemp003[1] = µC
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2012: self.assertEqual(dt2.theAnswer, 42)
							πF.SetLineno(2012)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßtheAnswer, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2013: self.assertEqual(dt2.extra, 7)
							πF.SetLineno(2013)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßextra, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2014: self.assertEqual(dt1.isoformat(), dt2.isoformat())
							πF.SetLineno(2014)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt1, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2015: self.assertEqual(dt2.newmeth(-7), dt1.hour + dt1.second - 7)
							πF.SetLineno(2015)
							πTemp003 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßnewmeth, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µdt1, ßhour, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µdt1, ßsecond, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp004, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subclass_time.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 1990: @unittest.expectedFailure
					πF.SetLineno(1990)
					πTemp005 = πF.MakeArgs(1)
					if πTemp019, πE = πg.ResolveClass(πF, πClass, nil, ßtest_subclass_time); πE != nil {
						continue
					}
					πTemp005[0] = πTemp019
					if πTemp019, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp020, πE = πg.GetAttr(πF, πTemp019, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp019, πE = πTemp020.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_subclass_time.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 2017: def test_backdoor_resistance(self):
					πF.SetLineno(2017)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("test_backdoor_resistance", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µhour_byte *πg.Object = πg.UnboundLocal; _ = µhour_byte
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2019: base = '2:59.0'
							πF.SetLineno(2019)
							µbase = πg.NewStr("2:59.0").ToObject()
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewInt(24).ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßchr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002 = πg.NewTuple4(πg.NewStr(" ").ToObject(), ß9.ToObject(), πTemp005, πg.NewStr("\xff").ToObject()).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µhour_byte = πTemp002
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2021: self.assertRaises(TypeError, self.theclass,
							πF.SetLineno(2021)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µhour_byte, "hour_byte"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(1).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µbase, πTemp004); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µhour_byte, πTemp005); πE != nil {
								continue
							}
							πTemp003[2] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_backdoor_resistance.ToObject(), πTemp019); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestTime").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTime.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 2027: class TZInfoBase(object):
			πF.SetLineno(2027)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TZInfoBase", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 []*πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2029: def test_argument_passing(self):
					πF.SetLineno(2029)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_argument_passing", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µintrospective *πg.Object = πg.UnboundLocal; _ = µintrospective
						var µobj *πg.Object = πg.UnboundLocal; _ = µobj
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2030: cls = self.theclass
							πF.SetLineno(2030)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2032: class introspective(tzinfo):
							πF.SetLineno(2032)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("introspective", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2033: def tzname(self, dt):    return dt and "real" or "none"
									πF.SetLineno(2033)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 bool
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2033: def tzname(self, dt):    return dt and "real" or "none"
											πF.SetLineno(2033)
											if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
												continue
											}
											πTemp003 = µdt
											if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
												continue
											}
											if !πTemp004 {
												goto Label2
											}
											πTemp003 = ßreal.ToObject()
										Label2:
											πTemp001 = πTemp003
											if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
												continue
											}
											if πTemp002 {
												goto Label1
											}
											πTemp001 = ßnone.ToObject()
										Label1:
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2034: def utcoffset(self, dt):
									πF.SetLineno(2034)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 bool
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 πg.KWArgs
										_ = πTemp005
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2035: return timedelta(minutes = dt and 42 or -42)
											πF.SetLineno(2035)
											if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
												continue
											}
											πTemp003 = µdt
											if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
												continue
											}
											if !πTemp004 {
												goto Label2
											}
											πTemp003 = πg.NewInt(42).ToObject()
										Label2:
											πTemp001 = πTemp003
											if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
												continue
											}
											if πTemp002 {
												goto Label1
											}
											if πTemp003, πE = πg.Neg(πF, πg.NewInt(42).ToObject()); πE != nil {
												continue
											}
											πTemp001 = πTemp003
										Label1:
											πTemp005 = πg.KWArgs{
												{"minutes", πTemp001},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp001.Call(πF, nil, πTemp005); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp003); πE != nil {
										continue
									}
									// line 2036: dst = utcoffset
									πF.SetLineno(2036)
									if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßutcoffset); πE != nil {
										continue
									}
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp004); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("introspective").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µintrospective = πTemp005
							// line 2038: obj = cls(1, 2, 3, tzinfo=introspective())
							πF.SetLineno(2038)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µintrospective, "introspective"); πE != nil {
								continue
							}
							if πTemp001, πE = µintrospective.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µobj = πTemp001
							// line 2040: expected = cls is time and "none" or "real"
							πF.SetLineno(2040)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µcls == πTemp009).ToObject()
							πTemp004 = πTemp005
							if πTemp008, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if !πTemp008 {
								goto Label2
							}
							πTemp004 = ßnone.ToObject()
						Label2:
							πTemp001 = πTemp004
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label1
							}
							πTemp001 = ßreal.ToObject()
						Label1:
							µexpected = πTemp001
							// line 2041: self.assertEqual(obj.tzname(), expected)
							πF.SetLineno(2041)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µobj, "obj"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µobj, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2043: expected = timedelta(minutes=(cls is time and -42 or 42))
							πF.SetLineno(2043)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µcls == πTemp009).ToObject()
							πTemp004 = πTemp005
							if πTemp008, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if !πTemp008 {
								goto Label4
							}
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(42).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πTemp005
						Label4:
							πTemp001 = πTemp004
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							πTemp001 = πg.NewInt(42).ToObject()
						Label3:
							πTemp006 = πg.KWArgs{
								{"minutes", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µexpected = πTemp004
							// line 2044: self.assertEqual(obj.utcoffset(), expected)
							πF.SetLineno(2044)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µobj, "obj"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µobj, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2045: self.assertEqual(obj.dst(), expected)
							πF.SetLineno(2045)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µobj, "obj"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µobj, ßdst, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_argument_passing.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2047: def test_bad_tzinfo_classes(self):
					πF.SetLineno(2047)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_bad_tzinfo_classes", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µNiceTry *πg.Object = πg.UnboundLocal; _ = µNiceTry
						var µBetterTry *πg.Object = πg.UnboundLocal; _ = µBetterTry
						var µb *πg.Object = πg.UnboundLocal; _ = µb
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2048: cls = self.theclass
							πF.SetLineno(2048)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2049: self.assertRaises(TypeError, cls, 1, 1, 1, tzinfo=12)
							πF.SetLineno(2049)
							πTemp002 = πF.MakeArgs(5)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							πTemp002[1] = µcls
							πTemp002[2] = πg.NewInt(1).ToObject()
							πTemp002[3] = πg.NewInt(1).ToObject()
							πTemp002[4] = πg.NewInt(1).ToObject()
							πTemp003 = πg.KWArgs{
								{"tzinfo", πg.NewInt(12).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2051: class NiceTry(object):
							πF.SetLineno(2051)
							πTemp002 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
								continue
							}
							πTemp002[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("NiceTry", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2052: def __init__(self): pass
									πF.SetLineno(2052)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2052: def __init__(self): pass
											πF.SetLineno(2052)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2053: def utcoffset(self, dt): pass
									πF.SetLineno(2053)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2053: def utcoffset(self, dt): pass
											πF.SetLineno(2053)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("NiceTry").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µNiceTry = πTemp006
							// line 2054: self.assertRaises(TypeError, cls, 1, 1, 1, tzinfo=NiceTry)
							πF.SetLineno(2054)
							πTemp002 = πF.MakeArgs(5)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							πTemp002[1] = µcls
							πTemp002[2] = πg.NewInt(1).ToObject()
							πTemp002[3] = πg.NewInt(1).ToObject()
							πTemp002[4] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µNiceTry, "NiceTry"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"tzinfo", µNiceTry},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2056: class BetterTry(tzinfo):
							πF.SetLineno(2056)
							πTemp002 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp002[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("BetterTry", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2057: def __init__(self): pass
									πF.SetLineno(2057)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2057: def __init__(self): pass
											πF.SetLineno(2057)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2058: def utcoffset(self, dt): pass
									πF.SetLineno(2058)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2058: def utcoffset(self, dt): pass
											πF.SetLineno(2058)
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("BetterTry").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µBetterTry = πTemp006
							// line 2059: b = BetterTry()
							πF.SetLineno(2059)
							if πE = πg.CheckLocal(πF, µBetterTry, "BetterTry"); πE != nil {
								continue
							}
							if πTemp001, πE = µBetterTry.Call(πF, nil, nil); πE != nil {
								continue
							}
							µb = πTemp001
							// line 2060: t = cls(1, 1, 1, tzinfo=b)
							πF.SetLineno(2060)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(1).ToObject()
							πTemp002[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"tzinfo", µb},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2061: self.assertIs(t.tzinfo, b)
							πF.SetLineno(2061)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µb, "b"); πE != nil {
								continue
							}
							πTemp002[1] = µb
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bad_tzinfo_classes.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2064: def test_utc_offset_out_of_bounds(self):
					πF.SetLineno(2064)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_utc_offset_out_of_bounds", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µEdgy *πg.Object = πg.UnboundLocal; _ = µEdgy
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µoffset *πg.Object = πg.UnboundLocal; _ = µoffset
						var µlegit *πg.Object = πg.UnboundLocal; _ = µlegit
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µaofs *πg.Object = πg.UnboundLocal; _ = µaofs
						var µh *πg.Object = πg.UnboundLocal; _ = µh
						var µm *πg.Object = πg.UnboundLocal; _ = µm
						var µtag *πg.Object = πg.UnboundLocal; _ = µtag
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 []*πg.Object
						_ = πTemp012
						var πTemp013 πg.KWArgs
						_ = πTemp013
						var πTemp014 bool
						_ = πTemp014
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2065: class Edgy(tzinfo):
							πF.SetLineno(2065)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Edgy", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2066: def __init__(self, offset):
									πF.SetLineno(2066)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "offset", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µoffset *πg.Object = πArgs[1]; _ = µoffset
										var πTemp001 πg.KWArgs
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2067: self.offset = timedelta(minutes=offset)
											πF.SetLineno(2067)
											if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
												continue
											}
											πTemp001 = πg.KWArgs{
												{"minutes", µoffset},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßoffset, πTemp002); πE != nil {
												continue
											}
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2068: def utcoffset(self, dt):
									πF.SetLineno(2068)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2069: return self.offset
											πF.SetLineno(2069)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßoffset, nil); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("Edgy").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µEdgy = πTemp005
							// line 2071: cls = self.theclass
							πF.SetLineno(2071)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp002
							if πTemp006, πE = πg.Neg(πF, πg.NewInt(1440).ToObject()); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(πTemp006, πTemp007).ToObject()
							if πTemp007, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							if πTemp008, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(πTemp007, πTemp008).ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp007 = πg.NewTuple2(πg.NewInt(1439).ToObject(), πTemp008).ToObject()
							if πTemp009, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp008 = πg.NewTuple2(πg.NewInt(1440).ToObject(), πTemp009).ToObject()
							πTemp004 = πg.NewTuple4(πTemp005, πTemp006, πTemp007, πTemp008).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp010 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp010 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp011 = !isStop
							} else {
								πTemp011 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp004); πE != nil {
									continue
								}
								µoffset = πTemp005
								µlegit = πTemp006
							}
							if πE != nil || !πTemp011 {
								continue
							}
							πF.PushCheckpoint(1)            
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(µcls == πTemp005).ToObject()
							if πTemp011, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(µcls == πTemp005).ToObject()
							if πTemp011, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label5
							}
							goto Label6
							// line 2076: if cls is time:
							πF.SetLineno(2076)
						Label4:
							// line 2077: t = cls(1, 2, 3, tzinfo=Edgy(offset))
							πF.SetLineno(2077)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							πTemp012 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							πTemp012[0] = µoffset
							if πE = πg.CheckLocal(πF, µEdgy, "Edgy"); πE != nil {
								continue
							}
							if πTemp004, πE = µEdgy.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							πTemp013 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = µcls.Call(πF, πTemp003, πTemp013); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt = πTemp004
							goto Label7
							// line 2078: elif cls is datetime:
							πF.SetLineno(2078)
						Label5:
							// line 2079: t = cls(6, 6, 6, 1, 2, 3, tzinfo=Edgy(offset))
							πF.SetLineno(2079)
							πTemp003 = πF.MakeArgs(6)
							πTemp003[0] = πg.NewInt(6).ToObject()
							πTemp003[1] = πg.NewInt(6).ToObject()
							πTemp003[2] = πg.NewInt(6).ToObject()
							πTemp003[3] = πg.NewInt(1).ToObject()
							πTemp003[4] = πg.NewInt(2).ToObject()
							πTemp003[5] = πg.NewInt(3).ToObject()
							πTemp012 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							πTemp012[0] = µoffset
							if πE = πg.CheckLocal(πF, µEdgy, "Edgy"); πE != nil {
								continue
							}
							if πTemp004, πE = µEdgy.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							πTemp013 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = µcls.Call(πF, πTemp003, πTemp013); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt = πTemp004
							goto Label7
						Label6:
							// line 2081: assert 0, "impossible"
							πF.SetLineno(2081)
							if πE = πg.Assert(πF, πg.NewInt(0).ToObject(), ßimpossible.ToObject()); πE != nil {
								continue
							}
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µlegit, "legit"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.IsTrue(πF, µlegit); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label8
							}
							goto Label9
							// line 2082: if legit:
							πF.SetLineno(2082)
						Label8:
							// line 2083: aofs = abs(offset)
							πF.SetLineno(2083)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							πTemp003[0] = µoffset
							if πTemp004, πE = πg.ResolveGlobal(πF, ßabs); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µaofs = πTemp005
							// line 2084: h, m = divmod(aofs, 60)
							πF.SetLineno(2084)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µaofs, "aofs"); πE != nil {
								continue
							}
							πTemp003[0] = µaofs
							πTemp003[1] = πg.NewInt(60).ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßdivmod); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp006}}}, πTemp005); πE != nil {
								continue
							}
							µh = πTemp004
							µm = πTemp006
							// line 2085: tag = "%c%02d:%02d" % (offset < 0 and '-' or '+', h, m)
							πF.SetLineno(2085)
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.LT(πF, µoffset, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp007 = πTemp008
							if πTemp014, πE = πg.IsTrue(πF, πTemp007); πE != nil {
								continue
							}
							if !πTemp014 {
								goto Label12
							}
							πTemp007 = πg.NewStr("-").ToObject()
						Label12:
							πTemp006 = πTemp007
							if πTemp011, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label11
							}
							πTemp006 = πg.NewStr("+").ToObject()
						Label11:
							if πE = πg.CheckLocal(πF, µh, "h"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µm, "m"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple3(πTemp006, µh, µm).ToObject()
							if πTemp004, πE = πg.Mod(πF, πg.NewStr("%c%02d:%02d").ToObject(), πTemp005); πE != nil {
								continue
							}
							µtag = πTemp004
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp003[0] = µt
							if πTemp004, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp011, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label13
							}
							goto Label14
							// line 2086: if isinstance(t, datetime):
							πF.SetLineno(2086)
						Label13:
							// line 2087: t = t.timetz()
							πF.SetLineno(2087)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtimetz, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp005
							goto Label14
						Label14:
							// line 2088: self.assertEqual(str(t), "01:02:03" + tag)
							πF.SetLineno(2088)
							πTemp003 = πF.MakeArgs(2)
							πTemp012 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp012[0] = µt
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							πTemp003[0] = πTemp005
							if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πg.NewStr("01:02:03").ToObject(), µtag); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label10
						Label9:
							// line 2090: self.assertRaises(ValueError, str, t)
							πF.SetLineno(2090)
							πTemp003 = πF.MakeArgs(3)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp003[2] = µt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label10
						Label10:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_utc_offset_out_of_bounds.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2063: @unittest.skip('grumpy')
					πF.SetLineno(2063)
					πTemp005 = πF.MakeArgs(1)
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßtest_utc_offset_out_of_bounds); πE != nil {
						continue
					}
					πTemp005[0] = πTemp006
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßgrumpy.ToObject()
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp008, πE = πg.GetAttr(πF, πTemp006, ßskip, nil); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp008.Call(πF, πTemp007, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					if πTemp008, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_utc_offset_out_of_bounds.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 2092: def test_tzinfo_classes(self):
					πF.SetLineno(2092)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_tzinfo_classes", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µC1 *πg.Object = πg.UnboundLocal; _ = µC1
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µC3 *πg.Object = πg.UnboundLocal; _ = µC3
						var µC4 *πg.Object = πg.UnboundLocal; _ = µC4
						var µC6 *πg.Object = πg.UnboundLocal; _ = µC6
						var µC7 *πg.Object = πg.UnboundLocal; _ = µC7
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2093: cls = self.theclass
							πF.SetLineno(2093)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2094: class C1(tzinfo):
							πF.SetLineno(2094)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C1", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2095: def utcoffset(self, dt): return None
									πF.SetLineno(2095)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2095: def utcoffset(self, dt): return None
											πF.SetLineno(2095)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2096: def dst(self, dt): return None
									πF.SetLineno(2096)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2096: def dst(self, dt): return None
											πF.SetLineno(2096)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
									// line 2097: def tzname(self, dt): return None
									πF.SetLineno(2097)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp004 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2097: def tzname(self, dt): return None
											πF.SetLineno(2097)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp004); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C1").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µC1 = πTemp005
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp005, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"tzinfo", πTemp006},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp006, πE = µcls.Call(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µC1, "C1"); πE != nil {
								continue
							}
							if πTemp008, πE = µC1.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"tzinfo", πTemp008},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp008, πE = µcls.Call(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp004 = πg.NewTuple3(πTemp005, πTemp006, πTemp008).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp009 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp009 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp010 = !isStop
							} else {
								πTemp010 = true
								µt = πTemp004
							}
							if πE != nil || !πTemp010 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2101: self.assertIsNone(t.utcoffset())
							πF.SetLineno(2101)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2102: self.assertIsNone(t.dst())
							πF.SetLineno(2102)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßdst, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2103: self.assertIsNone(t.tzname())
							πF.SetLineno(2103)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2105: class C3(tzinfo):
							πF.SetLineno(2105)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C3", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2106: def utcoffset(self, dt): return timedelta(minutes=-1439)
									πF.SetLineno(2106)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 πg.KWArgs
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2106: def utcoffset(self, dt): return timedelta(minutes=-1439)
											πF.SetLineno(2106)
											if πTemp001, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
												continue
											}
											πTemp002 = πg.KWArgs{
												{"minutes", πTemp001},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2107: def dst(self, dt): return timedelta(minutes=1439)
									πF.SetLineno(2107)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 πg.KWArgs
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2107: def dst(self, dt): return timedelta(minutes=1439)
											πF.SetLineno(2107)
											πTemp001 = πg.KWArgs{
												{"minutes", πg.NewInt(1439).ToObject()},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
									// line 2108: def tzname(self, dt): return "aname"
									πF.SetLineno(2108)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp004 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2108: def tzname(self, dt): return "aname"
											πF.SetLineno(2108)
											πR = ßaname.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp004); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C3").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µC3 = πTemp005
							// line 2109: t = cls(1, 1, 1, tzinfo=C3())
							πF.SetLineno(2109)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µC3, "C3"); πE != nil {
								continue
							}
							if πTemp001, πE = µC3.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt = πTemp001
							// line 2110: self.assertEqual(t.utcoffset(), timedelta(minutes=-1439))
							πF.SetLineno(2110)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"minutes", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2111: self.assertEqual(t.dst(), timedelta(minutes=1439))
							πF.SetLineno(2111)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßdst, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							πTemp007 = πg.KWArgs{
								{"minutes", πg.NewInt(1439).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2112: self.assertEqual(t.tzname(), "aname")
							πF.SetLineno(2112)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							πTemp003[1] = ßaname.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2115: class C4(tzinfo):
							πF.SetLineno(2115)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C4", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2116: def utcoffset(self, dt): return "aname"
									πF.SetLineno(2116)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2116: def utcoffset(self, dt): return "aname"
											πF.SetLineno(2116)
											πR = ßaname.ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2117: def dst(self, dt): return 7
									πF.SetLineno(2117)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2117: def dst(self, dt): return 7
											πF.SetLineno(2117)
											πR = πg.NewInt(7).ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
									// line 2118: def tzname(self, dt): return 0
									πF.SetLineno(2118)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp004 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2118: def tzname(self, dt): return 0
											πF.SetLineno(2118)
											πR = πg.NewInt(0).ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp004); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C4").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µC4 = πTemp005
							// line 2119: t = cls(1, 1, 1, tzinfo=C4())
							πF.SetLineno(2119)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µC4, "C4"); πE != nil {
								continue
							}
							if πTemp001, πE = µC4.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt = πTemp001
							// line 2120: self.assertRaises(TypeError, t.utcoffset)
							πF.SetLineno(2120)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßutcoffset, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2121: self.assertRaises(TypeError, t.dst)
							πF.SetLineno(2121)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßdst, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2122: self.assertRaises(TypeError, t.tzname)
							πF.SetLineno(2122)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßtzname, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2125: class C6(tzinfo):
							πF.SetLineno(2125)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C6", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2126: def utcoffset(self, dt): return timedelta(hours=-24)
									πF.SetLineno(2126)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 πg.KWArgs
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2126: def utcoffset(self, dt): return timedelta(hours=-24)
											πF.SetLineno(2126)
											if πTemp001, πE = πg.Neg(πF, πg.NewInt(24).ToObject()); πE != nil {
												continue
											}
											πTemp002 = πg.KWArgs{
												{"hours", πTemp001},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2127: def dst(self, dt): return timedelta(hours=24)
									πF.SetLineno(2127)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 πg.KWArgs
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2127: def dst(self, dt): return timedelta(hours=24)
											πF.SetLineno(2127)
											πTemp001 = πg.KWArgs{
												{"hours", πg.NewInt(24).ToObject()},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C6").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µC6 = πTemp005
							// line 2128: t = cls(1, 1, 1, tzinfo=C6())
							πF.SetLineno(2128)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µC6, "C6"); πE != nil {
								continue
							}
							if πTemp001, πE = µC6.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt = πTemp001
							// line 2129: self.assertRaises(ValueError, t.utcoffset)
							πF.SetLineno(2129)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßutcoffset, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2130: self.assertRaises(ValueError, t.dst)
							πF.SetLineno(2130)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßdst, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2133: class C7(tzinfo):
							πF.SetLineno(2133)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C7", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2134: def utcoffset(self, dt): return timedelta(seconds=61)
									πF.SetLineno(2134)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 πg.KWArgs
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2134: def utcoffset(self, dt): return timedelta(seconds=61)
											πF.SetLineno(2134)
											πTemp001 = πg.KWArgs{
												{"seconds", πg.NewInt(61).ToObject()},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2135: def dst(self, dt): return timedelta(microseconds=-81)
									πF.SetLineno(2135)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 πg.KWArgs
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2135: def dst(self, dt): return timedelta(microseconds=-81)
											πF.SetLineno(2135)
											if πTemp001, πE = πg.Neg(πF, πg.NewInt(81).ToObject()); πE != nil {
												continue
											}
											πTemp002 = πg.KWArgs{
												{"microseconds", πTemp001},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp001.Call(πF, nil, πTemp002); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C7").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µC7 = πTemp005
							// line 2136: t = cls(1, 1, 1, tzinfo=C7())
							πF.SetLineno(2136)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µC7, "C7"); πE != nil {
								continue
							}
							if πTemp001, πE = µC7.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µt = πTemp001
							// line 2137: self.assertRaises(ValueError, t.utcoffset)
							πF.SetLineno(2137)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßutcoffset, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2138: self.assertRaises(ValueError, t.dst)
							πF.SetLineno(2138)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßdst, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tzinfo_classes.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 2141: def test_aware_compare(self):
					πF.SetLineno(2141)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_aware_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µOperandDependentOffset *πg.Object = πg.UnboundLocal; _ = µOperandDependentOffset
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µd0 *πg.Object = πg.UnboundLocal; _ = µd0
						var µd1 *πg.Object = πg.UnboundLocal; _ = µd1
						var µd2 *πg.Object = πg.UnboundLocal; _ = µd2
						var µx *πg.Object = πg.UnboundLocal; _ = µx
						var µy *πg.Object = πg.UnboundLocal; _ = µy
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							case 9: goto Label9
							case 10: goto Label10
							case 12: goto Label12
							case 13: goto Label13
							default: panic("unexpected function state")
							}
							// line 2142: cls = self.theclass
							πF.SetLineno(2142)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2146: class OperandDependentOffset(tzinfo):
							πF.SetLineno(2146)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("OperandDependentOffset", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2147: def utcoffset(self, t):
									πF.SetLineno(2147)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "t", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µt *πg.Object = πArgs[1]; _ = µt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 bool
										_ = πTemp003
										var πTemp004 πg.KWArgs
										_ = πTemp004
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.LT(πF, πTemp002, πg.NewInt(10).ToObject()); πE != nil {
												continue
											}
											if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
												continue
											}
											if πTemp003 {
												goto Label1
											}
											goto Label2
											// line 2148: if t.minute < 10:
											πF.SetLineno(2148)
										Label1:
											// line 2150: return timedelta(minutes=t.minute)
											πF.SetLineno(2150)
											if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
												continue
											}
											πTemp004 = πg.KWArgs{
												{"minutes", πTemp001},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
												continue
											}
											πR = πTemp002
											continue
											goto Label3
										Label2:
											// line 2153: return timedelta(minutes=59)
											πF.SetLineno(2153)
											πTemp004 = πg.KWArgs{
												{"minutes", πg.NewInt(59).ToObject()},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
												continue
											}
											πR = πTemp002
											continue
											goto Label3
										Label3:
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("OperandDependentOffset").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µOperandDependentOffset = πTemp005
							// line 2155: base = cls(8, 9, 10, tzinfo=OperandDependentOffset())
							πF.SetLineno(2155)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(8).ToObject()
							πTemp003[1] = πg.NewInt(9).ToObject()
							πTemp003[2] = πg.NewInt(10).ToObject()
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µbase = πTemp001
							// line 2156: d0 = base.replace(minute=3)
							πF.SetLineno(2156)
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(3).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd0 = πTemp004
							// line 2157: d1 = base.replace(minute=9)
							πF.SetLineno(2157)
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(9).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd1 = πTemp004
							// line 2158: d2 = base.replace(minute=11)
							πF.SetLineno(2158)
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(11).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd2 = πTemp004
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µx = πTemp004
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp004, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp008 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp005, πE = πg.Next(πF, πTemp004); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µy = πTemp005
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 2161: got = cmp(x, y)
							πF.SetLineno(2161)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							πTemp003[0] = µx
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							πTemp003[1] = µy
							if πTemp005, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µgot = πTemp010
							// line 2162: expected = cmp(x.minute, y.minute)
							πF.SetLineno(2162)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µx, ßminute, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µy, ßminute, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µexpected = πTemp010
							// line 2163: self.assertEqual(got, expected)
							πF.SetLineno(2163)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp003[0] = µgot
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µcls != πTemp004).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label7
							}
							goto Label8
							// line 2169: if cls is not time:
							πF.SetLineno(2169)
						Label7:
							// line 2170: d0 = base.replace(minute=3, tzinfo=OperandDependentOffset())
							πF.SetLineno(2170)
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(3).ToObject()},
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd0 = πTemp004
							// line 2171: d1 = base.replace(minute=9, tzinfo=OperandDependentOffset())
							πF.SetLineno(2171)
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(9).ToObject()},
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd1 = πTemp004
							// line 2172: d2 = base.replace(minute=11, tzinfo=OperandDependentOffset())
							πF.SetLineno(2172)
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(11).ToObject()},
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd2 = πTemp004
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(10)
							πTemp007 = false
						Label9:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label11
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µx = πTemp004
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(9)            
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp004, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(13)
							πTemp008 = false
						Label12:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label14
							}
							if πTemp005, πE = πg.Next(πF, πTemp004); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µy = πTemp005
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(12)            
							// line 2175: got = cmp(x, y)
							πF.SetLineno(2175)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							πTemp003[0] = µx
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							πTemp003[1] = µy
							if πTemp005, πE = πg.ResolveGlobal(πF, ßcmp); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µgot = πTemp010
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							πTemp012 = πg.GetBool(µx == µd0).ToObject()
							πTemp010 = πTemp012
							if πTemp011, πE = πg.IsTrue(πF, πTemp010); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label16
							}
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							πTemp012 = πg.GetBool(µx == µd1).ToObject()
							πTemp010 = πTemp012
						Label16:
							πTemp005 = πTemp010
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if !πTemp009 {
								goto Label15
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							πTemp012 = πg.GetBool(µy == µd0).ToObject()
							πTemp010 = πTemp012
							if πTemp011, πE = πg.IsTrue(πF, πTemp010); πE != nil {
								continue
							}
							if πTemp011 {
								goto Label17
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							πTemp012 = πg.GetBool(µy == µd1).ToObject()
							πTemp010 = πTemp012
						Label17:
							πTemp005 = πTemp010
						Label15:
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label18
							}
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µx == µy).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if !πTemp009 {
								goto Label19
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µy == µd2).ToObject()
						Label19:
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label20
							}
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µx == µd2).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label21
							}
							goto Label22
							// line 2176: if (x is d0 or x is d1) and (y is d0 or y is d1):
							πF.SetLineno(2176)
						Label18:
							// line 2177: expected = 0
							πF.SetLineno(2177)
							µexpected = πg.NewInt(0).ToObject()
							goto Label23
							// line 2178: elif x is y is d2:
							πF.SetLineno(2178)
						Label20:
							// line 2179: expected = 0
							πF.SetLineno(2179)
							µexpected = πg.NewInt(0).ToObject()
							goto Label23
							// line 2180: elif x is d2:
							πF.SetLineno(2180)
						Label21:
							// line 2181: expected = -1
							πF.SetLineno(2181)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µexpected = πTemp005
							goto Label23
						Label22:
							// line 2183: assert y is d2
							πF.SetLineno(2183)
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µy == µd2).ToObject()
							if πE = πg.Assert(πF, πTemp005, nil); πE != nil {
								continue
							}
							// line 2184: expected = 1
							πF.SetLineno(2184)
							µexpected = πg.NewInt(1).ToObject()
							goto Label23
						Label23:
							// line 2185: self.assertEqual(got, expected)
							πF.SetLineno(2185)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp003[0] = µgot
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label13:
							if πE != nil || πR != nil {
								continue
							}
						Label14:
							continue
						Label10:
							if πE != nil || πR != nil {
								continue
							}
						Label11:
							goto Label8
						Label8:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_aware_compare.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 2140: @unittest.skip('grumpy')
					πF.SetLineno(2140)
					πTemp005 = πF.MakeArgs(1)
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßtest_aware_compare); πE != nil {
						continue
					}
					πTemp005[0] = πTemp009
					πTemp007 = πF.MakeArgs(1)
					πTemp007[0] = ßgrumpy.ToObject()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßskip, nil); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp010.Call(πF, πTemp007, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp007)
					if πTemp010, πE = πTemp009.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßtest_aware_compare.ToObject(), πTemp010); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TZInfoBase").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTZInfoBase.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 2189: class TestTimeTZ(TestTime, TZInfoBase, unittest.TestCase):
			πF.SetLineno(2189)
			πTemp002 = make([]*πg.Object, 3)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßTestTime); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			if πTemp004, πE = πg.ResolveGlobal(πF, ßTZInfoBase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp004
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[2] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTimeTZ", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2190: theclass = time
					πF.SetLineno(2190)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßtime); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßtheclass.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2192: def test_empty(self):
					πF.SetLineno(2192)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_empty", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2193: t = self.theclass()
							πF.SetLineno(2193)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp002
							// line 2194: self.assertEqual(t.hour, 0)
							πF.SetLineno(2194)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßhour, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2195: self.assertEqual(t.minute, 0)
							πF.SetLineno(2195)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2196: self.assertEqual(t.second, 0)
							πF.SetLineno(2196)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2197: self.assertEqual(t.microsecond, 0)
							πF.SetLineno(2197)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2198: self.assertIsNone(t.tzinfo)
							πF.SetLineno(2198)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µt, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_empty.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2201: def test_zones(self):
					πF.SetLineno(2201)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_zones", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µest *πg.Object = πg.UnboundLocal; _ = µest
						var µutc *πg.Object = πg.UnboundLocal; _ = µutc
						var µmet *πg.Object = πg.UnboundLocal; _ = µmet
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µt3 *πg.Object = πg.UnboundLocal; _ = µt3
						var µt4 *πg.Object = πg.UnboundLocal; _ = µt4
						var µt5 *πg.Object = πg.UnboundLocal; _ = µt5
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µyuck *πg.Object = πg.UnboundLocal; _ = µyuck
						var µBadtzname *πg.Object = πg.UnboundLocal; _ = µBadtzname
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []πg.Param
						_ = πTemp006
						var πTemp007 *πg.Dict
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2202: est = FixedOffset(-300, "EST", 1)
							πF.SetLineno(2202)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ßEST.ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µest = πTemp003
							// line 2203: utc = FixedOffset(0, "UTC", -2)
							πF.SetLineno(2203)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = ßUTC.ToObject()
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µutc = πTemp003
							// line 2204: met = FixedOffset(60, "MET", 3)
							πF.SetLineno(2204)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(60).ToObject()
							πTemp001[1] = ßMET.ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmet = πTemp003
							// line 2205: t1 = time( 7, 47, tzinfo=est)
							πF.SetLineno(2205)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(7).ToObject()
							πTemp001[1] = πg.NewInt(47).ToObject()
							if πE = πg.CheckLocal(πF, µest, "est"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µest},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp003
							// line 2206: t2 = time(12, 47, tzinfo=utc)
							πF.SetLineno(2206)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(12).ToObject()
							πTemp001[1] = πg.NewInt(47).ToObject()
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µutc},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 2207: t3 = time(13, 47, tzinfo=met)
							πF.SetLineno(2207)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(13).ToObject()
							πTemp001[1] = πg.NewInt(47).ToObject()
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µmet},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt3 = πTemp003
							// line 2208: t4 = time(microsecond=40)
							πF.SetLineno(2208)
							πTemp004 = πg.KWArgs{
								{"microsecond", πg.NewInt(40).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt4 = πTemp003
							// line 2209: t5 = time(microsecond=40, tzinfo=utc)
							πF.SetLineno(2209)
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"microsecond", πg.NewInt(40).ToObject()},
								{"tzinfo", µutc},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt5 = πTemp003
							// line 2211: self.assertEqual(t1.tzinfo, est)
							πF.SetLineno(2211)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µest, "est"); πE != nil {
								continue
							}
							πTemp001[1] = µest
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2212: self.assertEqual(t2.tzinfo, utc)
							πF.SetLineno(2212)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp001[1] = µutc
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2213: self.assertEqual(t3.tzinfo, met)
							πF.SetLineno(2213)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp001[1] = µmet
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2214: self.assertIsNone(t4.tzinfo)
							πF.SetLineno(2214)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2215: self.assertEqual(t5.tzinfo, utc)
							πF.SetLineno(2215)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt5, "t5"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt5, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp001[1] = µutc
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2217: self.assertEqual(t1.utcoffset(), timedelta(minutes=-300))
							πF.SetLineno(2217)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"minutes", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2218: self.assertEqual(t2.utcoffset(), timedelta(minutes=0))
							πF.SetLineno(2218)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(0).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2219: self.assertEqual(t3.utcoffset(), timedelta(minutes=60))
							πF.SetLineno(2219)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(60).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2220: self.assertIsNone(t4.utcoffset())
							πF.SetLineno(2220)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2221: self.assertRaises(TypeError, t1.utcoffset, "no args")
							πF.SetLineno(2221)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßutcoffset, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewStr("no args").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2223: self.assertEqual(t1.tzname(), "EST")
							πF.SetLineno(2223)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = ßEST.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2224: self.assertEqual(t2.tzname(), "UTC")
							πF.SetLineno(2224)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = ßUTC.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2225: self.assertEqual(t3.tzname(), "MET")
							πF.SetLineno(2225)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = ßMET.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2226: self.assertIsNone(t4.tzname())
							πF.SetLineno(2226)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2227: self.assertRaises(TypeError, t1.tzname, "no args")
							πF.SetLineno(2227)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßtzname, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewStr("no args").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2229: self.assertEqual(t1.dst(), timedelta(minutes=1))
							πF.SetLineno(2229)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(1).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2230: self.assertEqual(t2.dst(), timedelta(minutes=-2))
							πF.SetLineno(2230)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"minutes", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2231: self.assertEqual(t3.dst(), timedelta(minutes=3))
							πF.SetLineno(2231)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(3).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2232: self.assertIsNone(t4.dst())
							πF.SetLineno(2232)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2233: self.assertRaises(TypeError, t1.dst, "no args")
							πF.SetLineno(2233)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßdst, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewStr("no args").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2235: self.assertEqual(hash(t1), hash(t2))
							πF.SetLineno(2235)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2236: self.assertEqual(hash(t1), hash(t3))
							πF.SetLineno(2236)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2237: self.assertEqual(hash(t2), hash(t3))
							πF.SetLineno(2237)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2239: self.assertEqual(t1, t2)
							πF.SetLineno(2239)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2240: self.assertEqual(t1, t3)
							πF.SetLineno(2240)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp001[1] = µt3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2241: self.assertEqual(t2, t3)
							πF.SetLineno(2241)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[0] = µt2
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp001[1] = µt3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2242: self.assertRaises(TypeError, lambda: t4 == t5) # mixed tz-aware & naive
							πF.SetLineno(2242)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2242: self.assertRaises(TypeError, lambda: t4 == t5) # mixed tz-aware & naive
									πF.SetLineno(2242)
									if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt5, "t5"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Eq(πF, µt4, µt5); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2243: self.assertRaises(TypeError, lambda: t4 < t5) # mixed tz-aware & naive
							πF.SetLineno(2243)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2243: self.assertRaises(TypeError, lambda: t4 < t5) # mixed tz-aware & naive
									πF.SetLineno(2243)
									if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt5, "t5"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µt4, µt5); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2244: self.assertRaises(TypeError, lambda: t5 < t4) # mixed tz-aware & naive
							πF.SetLineno(2244)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2244: self.assertRaises(TypeError, lambda: t5 < t4) # mixed tz-aware & naive
									πF.SetLineno(2244)
									if πE = πg.CheckLocal(πF, µt5, "t5"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µt5, µt4); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2246: self.assertEqual(str(t1), "07:47:00-05:00")
							πF.SetLineno(2246)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("07:47:00-05:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2247: self.assertEqual(str(t2), "12:47:00+00:00")
							πF.SetLineno(2247)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("12:47:00+00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2248: self.assertEqual(str(t3), "13:47:00+01:00")
							πF.SetLineno(2248)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("13:47:00+01:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2249: self.assertEqual(str(t4), "00:00:00.000040")
							πF.SetLineno(2249)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							πTemp005[0] = µt4
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.000040").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2250: self.assertEqual(str(t5), "00:00:00.000040+00:00")
							πF.SetLineno(2250)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt5, "t5"); πE != nil {
								continue
							}
							πTemp005[0] = µt5
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.000040+00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2252: self.assertEqual(t1.isoformat(), "07:47:00-05:00")
							πF.SetLineno(2252)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("07:47:00-05:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2253: self.assertEqual(t2.isoformat(), "12:47:00+00:00")
							πF.SetLineno(2253)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("12:47:00+00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2254: self.assertEqual(t3.isoformat(), "13:47:00+01:00")
							πF.SetLineno(2254)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("13:47:00+01:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2255: self.assertEqual(t4.isoformat(), "00:00:00.000040")
							πF.SetLineno(2255)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt4, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.000040").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2256: self.assertEqual(t5.isoformat(), "00:00:00.000040+00:00")
							πF.SetLineno(2256)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt5, "t5"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt5, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("00:00:00.000040+00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2258: d = 'datetime.time'
							πF.SetLineno(2258)
							µd = πg.NewStr("datetime.time").ToObject()
							// line 2259: self.assertEqual(repr(t1), d + "(7, 47, tzinfo=est)")
							πF.SetLineno(2259)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("(7, 47, tzinfo=est)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2260: self.assertEqual(repr(t2), d + "(12, 47, tzinfo=utc)")
							πF.SetLineno(2260)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("(12, 47, tzinfo=utc)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2261: self.assertEqual(repr(t3), d + "(13, 47, tzinfo=met)")
							πF.SetLineno(2261)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("(13, 47, tzinfo=met)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2262: self.assertEqual(repr(t4), d + "(0, 0, 0, 40)")
							πF.SetLineno(2262)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt4, "t4"); πE != nil {
								continue
							}
							πTemp005[0] = µt4
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("(0, 0, 0, 40)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2263: self.assertEqual(repr(t5), d + "(0, 0, 0, 40, tzinfo=utc)")
							πF.SetLineno(2263)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt5, "t5"); πE != nil {
								continue
							}
							πTemp005[0] = µt5
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("(0, 0, 0, 40, tzinfo=utc)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2265: self.assertEqual(t1.strftime("%H:%M:%S %%Z=%Z %%z=%z"),
							πF.SetLineno(2265)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%H:%M:%S %%Z=%Z %%z=%z").ToObject()
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("07:47:00 %Z=EST %z=-0500").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2267: self.assertEqual(t2.strftime("%H:%M:%S %Z %z"), "12:47:00 UTC +0000")
							πF.SetLineno(2267)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%H:%M:%S %Z %z").ToObject()
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("12:47:00 UTC +0000").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2268: self.assertEqual(t3.strftime("%H:%M:%S %Z %z"), "13:47:00 MET +0100")
							πF.SetLineno(2268)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%H:%M:%S %Z %z").ToObject()
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("13:47:00 MET +0100").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2270: yuck = FixedOffset(-1439, "%z %Z %%z%%Z")
							πF.SetLineno(2270)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("%z %Z %%z%%Z").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µyuck = πTemp003
							// line 2271: t1 = time(23, 59, tzinfo=yuck)
							πF.SetLineno(2271)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µyuck, "yuck"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µyuck},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp003
							// line 2272: self.assertEqual(t1.strftime("%H:%M %%Z='%Z' %%z='%z'"),
							πF.SetLineno(2272)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%H:%M %%Z='%Z' %%z='%z'").ToObject()
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("23:59 %Z='%z %Z %%z%%Z' %z='-2359'").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2276: class Badtzname(tzinfo):
							πF.SetLineno(2276)
							πTemp001 = make([]*πg.Object, 1)
							if πTemp008, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp001[0] = πTemp008
							πTemp007 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Badtzname", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp007
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2277: def tzname(self, dt): return 42
									πF.SetLineno(2277)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2277: def tzname(self, dt): return 42
											πF.SetLineno(2277)
											πR = πg.NewInt(42).ToObject()
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp007.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp008, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("Badtzname").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp007.ToObject()}, nil); πE != nil {
								continue
							}
							µBadtzname = πTemp008
							// line 2278: t = time(2, 3, 4, tzinfo=Badtzname())
							πF.SetLineno(2278)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µBadtzname, "Badtzname"); πE != nil {
								continue
							}
							if πTemp002, πE = µBadtzname.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp003
							// line 2279: self.assertEqual(t.strftime("%H:%M:%S"), "02:03:04")
							πF.SetLineno(2279)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%H:%M:%S").ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("02:03:04").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2280: self.assertRaises(TypeError, t.strftime, "%Z")
							πF.SetLineno(2280)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßstrftime, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							πTemp001[2] = πg.NewStr("%Z").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_zones.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2200: @unittest.expectedFailure
					πF.SetLineno(2200)
					πTemp004 = πF.MakeArgs(1)
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßtest_zones); πE != nil {
						continue
					}
					πTemp004[0] = πTemp005
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp006.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_zones.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 2283: def test_hash_edge_cases(self):
					πF.SetLineno(2283)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_hash_edge_cases", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2285: t1 = self.theclass(0, 1, 2, 3, tzinfo=FixedOffset(1439, ""))
							πF.SetLineno(2285)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							πTemp001[3] = πg.NewInt(3).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1439).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2286: t2 = self.theclass(0, 0, 2, 3, tzinfo=FixedOffset(1438, ""))
							πF.SetLineno(2286)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewInt(0).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							πTemp001[3] = πg.NewInt(3).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1438).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp004
							// line 2287: self.assertEqual(hash(t1), hash(t2))
							πF.SetLineno(2287)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp002[0] = µt1
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp002[0] = µt2
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2289: t1 = self.theclass(23, 58, 6, 100, tzinfo=FixedOffset(-1000, ""))
							πF.SetLineno(2289)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(58).ToObject()
							πTemp001[2] = πg.NewInt(6).ToObject()
							πTemp001[3] = πg.NewInt(100).ToObject()
							πTemp002 = πF.MakeArgs(2)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1000).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2290: t2 = self.theclass(23, 48, 6, 100, tzinfo=FixedOffset(-1010, ""))
							πF.SetLineno(2290)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(23).ToObject()
							πTemp001[1] = πg.NewInt(48).ToObject()
							πTemp001[2] = πg.NewInt(6).ToObject()
							πTemp001[3] = πg.NewInt(100).ToObject()
							πTemp002 = πF.MakeArgs(2)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1010).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp004
							// line 2291: self.assertEqual(hash(t1), hash(t2))
							πF.SetLineno(2291)
							πTemp001 = πF.MakeArgs(2)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp002[0] = µt1
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp002[0] = µt2
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_hash_edge_cases.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 2282: @unittest.expectedFailure
					πF.SetLineno(2282)
					πTemp004 = πF.MakeArgs(1)
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßtest_hash_edge_cases); πE != nil {
						continue
					}
					πTemp004[0] = πTemp006
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp007.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_hash_edge_cases.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 2313: def test_more_bool(self):
					πF.SetLineno(2313)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_more_bool", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 []πg.Param
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2315: cls = self.theclass
							πF.SetLineno(2315)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2317: t = cls(0, tzinfo=FixedOffset(-300, ""))
							πF.SetLineno(2317)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2318: self.assertTrue(t)
							πF.SetLineno(2318)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2320: t = cls(5, tzinfo=FixedOffset(-300, ""))
							πF.SetLineno(2320)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(5).ToObject()
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2321: self.assertTrue(t)
							πF.SetLineno(2321)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2323: t = cls(5, tzinfo=FixedOffset(300, ""))
							πF.SetLineno(2323)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(5).ToObject()
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(300).ToObject()
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2324: self.assertFalse(t)
							πF.SetLineno(2324)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2326: t = cls(23, 59, tzinfo=FixedOffset(23*60 + 59, ""))
							πF.SetLineno(2326)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(23).ToObject()
							πTemp002[1] = πg.NewInt(59).ToObject()
							πTemp003 = πF.MakeArgs(2)
							if πTemp004, πE = πg.Mul(πF, πg.NewInt(23).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp004, πg.NewInt(59).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2327: self.assertFalse(t)
							πF.SetLineno(2327)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2330: t = cls(0, tzinfo=FixedOffset(23*60 + 59, ""))
							πF.SetLineno(2330)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp003 = πF.MakeArgs(2)
							if πTemp004, πE = πg.Mul(πF, πg.NewInt(23).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp004, πg.NewInt(59).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2331: self.assertTrue(t)
							πF.SetLineno(2331)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp002[0] = µt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2334: t = cls(0, tzinfo=FixedOffset(24*60, ""))
							πF.SetLineno(2334)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Mul(πF, πg.NewInt(24).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2335: self.assertRaises(ValueError, lambda: bool(t))
							πF.SetLineno(2335)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp006 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2335: self.assertRaises(ValueError, lambda: bool(t))
									πF.SetLineno(2335)
									πTemp001 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
										continue
									}
									πTemp001[0] = µt
									if πTemp002, πE = πg.ResolveGlobal(πF, ßbool); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									πR = πTemp003
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2338: t = cls(0, tzinfo=FixedOffset(-24*60, ""))
							πF.SetLineno(2338)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp003 = πF.MakeArgs(2)
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(24).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πTemp004, πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = ß.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µt = πTemp001
							// line 2339: self.assertRaises(ValueError, lambda: bool(t))
							πF.SetLineno(2339)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp006 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2339: self.assertRaises(ValueError, lambda: bool(t))
									πF.SetLineno(2339)
									πTemp001 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
										continue
									}
									πTemp001[0] = µt
									if πTemp002, πE = πg.ResolveGlobal(πF, ßbool); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									πR = πTemp003
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_more_bool.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 2342: def test_replace(self):
					πF.SetLineno(2342)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_replace", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µz100 *πg.Object = πg.UnboundLocal; _ = µz100
						var µzm200 *πg.Object = πg.UnboundLocal; _ = µzm200
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µname *πg.Object = πg.UnboundLocal; _ = µname
						var µnewval *πg.Object = πg.UnboundLocal; _ = µnewval
						var µnewargs *πg.Object = πg.UnboundLocal; _ = µnewargs
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var µbase2 *πg.Object = πg.UnboundLocal; _ = µbase2
						var µbase3 *πg.Object = πg.UnboundLocal; _ = µbase3
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 *πg.Dict
						_ = πTemp012
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2343: cls = self.theclass
							πF.SetLineno(2343)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2344: z100 = FixedOffset(100, "+100")
							πF.SetLineno(2344)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(100).ToObject()
							πTemp002[1] = πg.NewStr("+100").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µz100 = πTemp003
							// line 2345: zm200 = FixedOffset(timedelta(minutes=-200), "-200")
							πF.SetLineno(2345)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(200).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"minutes", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewStr("-200").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µzm200 = πTemp003
							// line 2346: args = [1, 2, 3, 4, z100]
							πF.SetLineno(2346)
							πTemp002 = make([]*πg.Object, 5)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(3).ToObject()
							πTemp002[3] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µz100, "z100"); πE != nil {
								continue
							}
							πTemp002[4] = µz100
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µargs = πTemp001
							// line 2347: base = cls(*args)
							πF.SetLineno(2347)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Invoke(πF, µcls, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µbase = πTemp001
							// line 2348: self.assertEqual(base, base.replace())
							πF.SetLineno(2348)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							πTemp002[0] = µbase
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2350: i = 0
							πF.SetLineno(2350)
							µi = πg.NewInt(0).ToObject()
							πTemp005 = πg.NewTuple2(ßhour.ToObject(), πg.NewInt(5).ToObject()).ToObject()
							πTemp006 = πg.NewTuple2(ßminute.ToObject(), πg.NewInt(6).ToObject()).ToObject()
							πTemp007 = πg.NewTuple2(ßsecond.ToObject(), πg.NewInt(7).ToObject()).ToObject()
							πTemp008 = πg.NewTuple2(ßmicrosecond.ToObject(), πg.NewInt(8).ToObject()).ToObject()
							if πE = πg.CheckLocal(πF, µzm200, "zm200"); πE != nil {
								continue
							}
							πTemp009 = πg.NewTuple2(ßtzinfo.ToObject(), µzm200).ToObject()
							πTemp003 = πg.NewTuple5(πTemp005, πTemp006, πTemp007, πTemp008, πTemp009).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp010 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp010 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp011 = !isStop
							} else {
								πTemp011 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp003); πE != nil {
									continue
								}
								µname = πTemp005
								µnewval = πTemp006
							}
							if πE != nil || !πTemp011 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2356: newargs = args[:]
							πF.SetLineno(2356)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µargs, πTemp003); πE != nil {
								continue
							}
							µnewargs = πTemp005
							// line 2357: newargs[i] = newval
							πF.SetLineno(2357)
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µnewval); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp005 = µi
							if πE = πg.SetItem(πF, µnewargs, πTemp005, πTemp003); πE != nil {
								continue
							}
							// line 2358: expected = cls(*newargs)
							πF.SetLineno(2358)
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, µcls, nil, µnewargs, nil, nil); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 2359: got = base.replace(**{name: newval})
							πF.SetLineno(2359)
							πTemp012 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πTemp012.SetItem(πF, µname, µnewval); πE != nil {
								continue
							}
							πTemp003 = πTemp012.ToObject()
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Invoke(πF, πTemp005, nil, nil, nil, πTemp003); πE != nil {
								continue
							}
							µgot = πTemp006
							// line 2360: self.assertEqual(expected, got)
							πF.SetLineno(2360)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2361: i += 1
							πF.SetLineno(2361)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µi = πTemp003
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2364: self.assertEqual(base.tzname(), "+100")
							πF.SetLineno(2364)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewStr("+100").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2365: base2 = base.replace(tzinfo=None)
							πF.SetLineno(2365)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µbase2 = πTemp003
							// line 2366: self.assertIsNone(base2.tzinfo)
							πF.SetLineno(2366)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µbase2, "base2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase2, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2367: self.assertIsNone(base2.tzname())
							πF.SetLineno(2367)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µbase2, "base2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase2, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2370: base3 = base2.replace(tzinfo=z100)
							πF.SetLineno(2370)
							if πE = πg.CheckLocal(πF, µz100, "z100"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µz100},
							}
							if πE = πg.CheckLocal(πF, µbase2, "base2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µbase3 = πTemp003
							// line 2371: self.assertEqual(base, base3)
							πF.SetLineno(2371)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							πTemp002[0] = µbase
							if πE = πg.CheckLocal(πF, µbase3, "base3"); πE != nil {
								continue
							}
							πTemp002[1] = µbase3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2372: self.assertIs(base.tzinfo, base3.tzinfo)
							πF.SetLineno(2372)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase3, "base3"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase3, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2375: base = cls(1)
							πF.SetLineno(2375)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µbase = πTemp001
							// line 2376: self.assertRaises(ValueError, base.replace, hour=24)
							πF.SetLineno(2376)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp004 = πg.KWArgs{
								{"hour", πg.NewInt(24).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2377: self.assertRaises(ValueError, base.replace, minute=-1)
							πF.SetLineno(2377)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"minute", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2378: self.assertRaises(ValueError, base.replace, second=100)
							πF.SetLineno(2378)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp004 = πg.KWArgs{
								{"second", πg.NewInt(100).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2379: self.assertRaises(ValueError, base.replace, microsecond=1000000)
							πF.SetLineno(2379)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp004 = πg.KWArgs{
								{"microsecond", πg.NewInt(1000000).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 2341: @unittest.expectedFailure
					πF.SetLineno(2341)
					πTemp004 = πF.MakeArgs(1)
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßtest_replace); πE != nil {
						continue
					}
					πTemp004[0] = πTemp008
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp009, πE = πg.GetAttr(πF, πTemp008, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp009.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 2382: def test_mixed_compare(self):
					πF.SetLineno(2382)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_mixed_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µVaries *πg.Object = πg.UnboundLocal; _ = µVaries
						var µv *πg.Object = πg.UnboundLocal; _ = µv
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []πg.Param
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2383: t1 = time(1, 2, 3)
							πF.SetLineno(2383)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp003
							// line 2384: t2 = time(1, 2, 3)
							πF.SetLineno(2384)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 2385: self.assertEqual(t1, t2)
							πF.SetLineno(2385)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2386: t2 = t2.replace(tzinfo=None)
							πF.SetLineno(2386)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 2387: self.assertEqual(t1, t2)
							πF.SetLineno(2387)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2388: t2 = t2.replace(tzinfo=FixedOffset(None, ""))
							πF.SetLineno(2388)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 2389: self.assertEqual(t1, t2)
							πF.SetLineno(2389)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2390: t2 = t2.replace(tzinfo=FixedOffset(0, ""))
							πF.SetLineno(2390)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 2391: self.assertRaises(TypeError, lambda: t1 == t2)
							πF.SetLineno(2391)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp005 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2391: self.assertRaises(TypeError, lambda: t1 == t2)
									πF.SetLineno(2391)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Eq(πF, µt1, µt2); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2394: class Varies(tzinfo):
							πF.SetLineno(2394)
							πTemp001 = make([]*πg.Object, 1)
							if πTemp007, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp001[0] = πTemp007
							πTemp006 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Varies", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp006
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2395: def __init__(self):
									πF.SetLineno(2395)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πTemp001 πg.KWArgs
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2396: self.offset = timedelta(minutes=22)
											πF.SetLineno(2396)
											πTemp001 = πg.KWArgs{
												{"minutes", πg.NewInt(22).ToObject()},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßoffset, πTemp002); πE != nil {
												continue
											}
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2397: def utcoffset(self, t):
									πF.SetLineno(2397)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "t", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µt *πg.Object = πArgs[1]; _ = µt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 πg.KWArgs
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 *πg.Object
										_ = πTemp004
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2398: self.offset += timedelta(minutes=1)
											πF.SetLineno(2398)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßoffset, nil); πE != nil {
												continue
											}
											πTemp002 = πg.KWArgs{
												{"minutes", πg.NewInt(1).ToObject()},
											}
											if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
												continue
											}
											if πTemp003, πE = πg.IAdd(πF, πTemp001, πTemp004); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßoffset, πTemp003); πE != nil {
												continue
											}
											// line 2399: return self.offset
											πF.SetLineno(2399)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßoffset, nil); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp007, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("Varies").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp006.ToObject()}, nil); πE != nil {
								continue
							}
							µVaries = πTemp007
							// line 2401: v = Varies()
							πF.SetLineno(2401)
							if πE = πg.CheckLocal(πF, µVaries, "Varies"); πE != nil {
								continue
							}
							if πTemp002, πE = µVaries.Call(πF, nil, nil); πE != nil {
								continue
							}
							µv = πTemp002
							// line 2402: t1 = t2.replace(tzinfo=v)
							πF.SetLineno(2402)
							if πE = πg.CheckLocal(πF, µv, "v"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µv},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt1 = πTemp003
							// line 2403: t2 = t2.replace(tzinfo=v)
							πF.SetLineno(2403)
							if πE = πg.CheckLocal(πF, µv, "v"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µv},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 2404: self.assertEqual(t1.utcoffset(), timedelta(minutes=23))
							πF.SetLineno(2404)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(23).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2405: self.assertEqual(t2.utcoffset(), timedelta(minutes=24))
							πF.SetLineno(2405)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(24).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2406: self.assertEqual(t1, t2)
							πF.SetLineno(2406)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2409: t2 = t2.replace(tzinfo=Varies())
							πF.SetLineno(2409)
							if πE = πg.CheckLocal(πF, µVaries, "Varies"); πE != nil {
								continue
							}
							if πTemp002, πE = µVaries.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 2410: self.assertTrue(t1 < t2)  # t1's offset counter still going up
							πF.SetLineno(2410)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_mixed_compare.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 2381: @unittest.expectedFailure
					πF.SetLineno(2381)
					πTemp004 = πF.MakeArgs(1)
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßtest_mixed_compare); πE != nil {
						continue
					}
					πTemp004[0] = πTemp009
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp010.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_mixed_compare.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 2413: def test_subclass_timetz(self):
					πF.SetLineno(2413)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_subclass_timetz", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µC *πg.Object = πg.UnboundLocal; _ = µC
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µdt1 *πg.Object = πg.UnboundLocal; _ = µdt1
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2415: class C(self.theclass):
							πF.SetLineno(2415)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2416: theAnswer = 42
									πF.SetLineno(2416)
									if πE = πClass.SetItem(πF, ßtheAnswer.ToObject(), πg.NewInt(42).ToObject()); πE != nil {
										continue
									}
									// line 2418: def __new__(cls, *args, **kws):
									πF.SetLineno(2418)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "cls", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__new__", "build/src/__python__/test/test_datetime.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µcls *πg.Object = πArgs[0]; _ = µcls
										var µargs *πg.Object = πArgs[1]; _ = µargs
										var µkws *πg.Object = πArgs[2]; _ = µkws
										var µtemp *πg.Object = πg.UnboundLocal; _ = µtemp
										var µextra *πg.Object = πg.UnboundLocal; _ = µextra
										var µresult *πg.Object = πg.UnboundLocal; _ = µresult
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2419: temp = kws.copy()
											πF.SetLineno(2419)
											if πE = πg.CheckLocal(πF, µkws, "kws"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µkws, ßcopy, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
												continue
											}
											µtemp = πTemp002
											// line 2420: extra = temp.pop('extra')
											πF.SetLineno(2420)
											πTemp003 = πF.MakeArgs(1)
											πTemp003[0] = ßextra.ToObject()
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtemp, ßpop, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µextra = πTemp002
											// line 2421: result = self.theclass.__new__(cls, *args, **temp)
											πF.SetLineno(2421)
											πTemp003 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
												continue
											}
											πTemp003[0] = µcls
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ß__new__, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Invoke(πF, πTemp002, πTemp003, µargs, nil, µtemp); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µresult = πTemp001
											// line 2422: result.extra = extra
											πF.SetLineno(2422)
											if πE = πg.CheckLocal(πF, µextra, "extra"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µextra); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µresult, ßextra, πTemp001); πE != nil {
												continue
											}
											// line 2423: return result
											πF.SetLineno(2423)
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											πR = µresult
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__new__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2425: def newmeth(self, start):
									πF.SetLineno(2425)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "start", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("newmeth", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µstart *πg.Object = πArgs[1]; _ = µstart
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2426: return start + self.hour + self.second
											πF.SetLineno(2426)
											if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßhour, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Add(πF, µstart, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßsecond, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Add(πF, πTemp002, πTemp003); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßnewmeth.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µC = πTemp005
							// line 2428: args = 4, 5, 6, 500, FixedOffset(-300, "EST", 1)
							πF.SetLineno(2428)
							πTemp003 = πF.MakeArgs(3)
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							πTemp003[1] = ßEST.ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002 = πg.NewTuple5(πg.NewInt(4).ToObject(), πg.NewInt(5).ToObject(), πg.NewInt(6).ToObject(), πg.NewInt(500).ToObject(), πTemp005).ToObject()
							µargs = πTemp002
							// line 2430: dt1 = self.theclass(*args)
							πF.SetLineno(2430)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µdt1 = πTemp004
							// line 2431: dt2 = C(*args, **{'extra': 7})
							πF.SetLineno(2431)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ßextra.ToObject(), πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, µC, nil, µargs, nil, πTemp002); πE != nil {
								continue
							}
							µdt2 = πTemp004
							// line 2433: self.assertEqual(dt2.__class__, C)
							πF.SetLineno(2433)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ß__class__, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							πTemp003[1] = µC
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2434: self.assertEqual(dt2.theAnswer, 42)
							πF.SetLineno(2434)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßtheAnswer, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2435: self.assertEqual(dt2.extra, 7)
							πF.SetLineno(2435)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßextra, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2436: self.assertEqual(dt1.utcoffset(), dt2.utcoffset())
							πF.SetLineno(2436)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt1, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2437: self.assertEqual(dt2.newmeth(-7), dt1.hour + dt1.second - 7)
							πF.SetLineno(2437)
							πTemp003 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßnewmeth, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µdt1, ßhour, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µdt1, ßsecond, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp004, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subclass_timetz.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 2412: @unittest.expectedFailure
					πF.SetLineno(2412)
					πTemp004 = πF.MakeArgs(1)
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßtest_subclass_timetz); πE != nil {
						continue
					}
					πTemp004[0] = πTemp010
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp010, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp010, πE = πTemp011.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					if πE = πClass.SetItem(πF, ßtest_subclass_timetz.ToObject(), πTemp010); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestTimeTZ").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTimeTZ.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 2442: class TestDateTimeTZ(TestDateTime, TZInfoBase, unittest.TestCase):
			πF.SetLineno(2442)
			πTemp002 = make([]*πg.Object, 3)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßTestDateTime); πE != nil {
				continue
			}
			πTemp002[0] = πTemp004
			if πTemp004, πE = πg.ResolveGlobal(πF, ßTZInfoBase); πE != nil {
				continue
			}
			πTemp002[1] = πTemp004
			if πTemp004, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[2] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestDateTimeTZ", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 []*πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				var πTemp021 *πg.Object
				_ = πTemp021
				var πTemp022 *πg.Object
				_ = πTemp022
				var πTemp023 *πg.Object
				_ = πTemp023
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 2443: theclass = datetime
					πF.SetLineno(2443)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßdatetime); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßtheclass.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2445: def test_trivial(self):
					πF.SetLineno(2445)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_trivial", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2446: dt = self.theclass(1, 2, 3, 4, 5, 6, 7)
							πF.SetLineno(2446)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(6).ToObject()
							πTemp001[6] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 2447: self.assertEqual(dt.year, 1)
							πF.SetLineno(2447)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2448: self.assertEqual(dt.month, 2)
							πF.SetLineno(2448)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmonth, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2449: self.assertEqual(dt.day, 3)
							πF.SetLineno(2449)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßday, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(3).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2450: self.assertEqual(dt.hour, 4)
							πF.SetLineno(2450)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßhour, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(4).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2451: self.assertEqual(dt.minute, 5)
							πF.SetLineno(2451)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßminute, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(5).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2452: self.assertEqual(dt.second, 6)
							πF.SetLineno(2452)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßsecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(6).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2453: self.assertEqual(dt.microsecond, 7)
							πF.SetLineno(2453)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßmicrosecond, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2454: self.assertEqual(dt.tzinfo, None)
							πF.SetLineno(2454)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_trivial.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 2456: def test_even_more_compare(self):
					πF.SetLineno(2456)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("test_even_more_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µNaive *πg.Object = πg.UnboundLocal; _ = µNaive
						var µBogus *πg.Object = πg.UnboundLocal; _ = µBogus
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []πg.Param
						_ = πTemp007
						var πTemp008 *πg.Dict
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2461: t1 = self.theclass(1, 1, 1, tzinfo=FixedOffset(1439, ""))
							πF.SetLineno(2461)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1439).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2463: t2 = self.theclass(MAXYEAR, 12, 31, 23, 59, 59, 999999,
							πF.SetLineno(2463)
							πTemp001 = πF.MakeArgs(7)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							πTemp001[6] = πg.NewInt(999999).ToObject()
							πTemp002 = πF.MakeArgs(2)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp004
							// line 2467: self.assertTrue(t1 < t2)
							πF.SetLineno(2467)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2468: self.assertTrue(t1 != t2)
							πF.SetLineno(2468)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2469: self.assertTrue(t2 > t1)
							πF.SetLineno(2469)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt2, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2471: self.assertTrue(t1 == t1)
							πF.SetLineno(2471)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt1, µt1); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2472: self.assertTrue(t2 == t2)
							πF.SetLineno(2472)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µt2, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2475: t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(1, ""))
							πF.SetLineno(2475)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2476: t2 = self.theclass(2, 1, 1, 3, 13, tzinfo=FixedOffset(3*60+13+2, ""))
							πF.SetLineno(2476)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp001[3] = πg.NewInt(3).ToObject()
							πTemp001[4] = πg.NewInt(13).ToObject()
							πTemp002 = πF.MakeArgs(2)
							if πTemp006, πE = πg.Mul(πF, πg.NewInt(3).ToObject(), πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp006, πg.NewInt(13).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp004, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp004
							// line 2477: self.assertEqual(t1, t2)
							πF.SetLineno(2477)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2480: t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(0, ""))
							πF.SetLineno(2480)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2481: self.assertTrue(t1 > t2)
							πF.SetLineno(2481)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2484: t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(2, ""))
							πF.SetLineno(2484)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(2).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2485: self.assertTrue(t1 < t2)
							πF.SetLineno(2485)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2488: t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(1, ""),
							πF.SetLineno(2488)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
								{"second", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2490: self.assertTrue(t1 > t2)
							πF.SetLineno(2490)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2493: t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(1, ""),
							πF.SetLineno(2493)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
								{"microsecond", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2495: self.assertTrue(t1 > t2)
							πF.SetLineno(2495)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2498: t2 = self.theclass.min
							πF.SetLineno(2498)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßmin, nil); πE != nil {
								continue
							}
							µt2 = πTemp004
							// line 2499: self.assertRaises(TypeError, lambda: t1 == t2)
							πF.SetLineno(2499)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp007 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp007, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2499: self.assertRaises(TypeError, lambda: t1 == t2)
									πF.SetLineno(2499)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Eq(πF, µt1, µt2); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2500: self.assertEqual(t2, t2)
							πF.SetLineno(2500)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[0] = µt2
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2503: class Naive(tzinfo):
							πF.SetLineno(2503)
							πTemp001 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp008 = πg.NewDict()
							if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Naive", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp008
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2504: def utcoffset(self, dt): return None
									πF.SetLineno(2504)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2504: def utcoffset(self, dt): return None
											πF.SetLineno(2504)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("Naive").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
								continue
							}
							µNaive = πTemp006
							// line 2505: t2 = self.theclass(5, 6, 7, tzinfo=Naive())
							πF.SetLineno(2505)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(5).ToObject()
							πTemp001[1] = πg.NewInt(6).ToObject()
							πTemp001[2] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µNaive, "Naive"); πE != nil {
								continue
							}
							if πTemp003, πE = µNaive.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp004
							// line 2506: self.assertRaises(TypeError, lambda: t1 == t2)
							πF.SetLineno(2506)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp007 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp007, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2506: self.assertRaises(TypeError, lambda: t1 == t2)
									πF.SetLineno(2506)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Eq(πF, µt1, µt2); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2507: self.assertEqual(t2, t2)
							πF.SetLineno(2507)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[0] = µt2
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2511: t1 = self.theclass(5, 6, 7)
							πF.SetLineno(2511)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(5).ToObject()
							πTemp001[1] = πg.NewInt(6).ToObject()
							πTemp001[2] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2512: self.assertEqual(t1, t2)
							πF.SetLineno(2512)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2515: class Bogus(tzinfo):
							πF.SetLineno(2515)
							πTemp001 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp008 = πg.NewDict()
							if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Bogus", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp008
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2516: def utcoffset(self, dt):
									πF.SetLineno(2516)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 πg.KWArgs
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2517: return timedelta(minutes=1440) # out of bounds
											πF.SetLineno(2517)
											πTemp001 = πg.KWArgs{
												{"minutes", πg.NewInt(1440).ToObject()},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
												continue
											}
											πR = πTemp003
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("Bogus").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
								continue
							}
							µBogus = πTemp006
							// line 2518: t1 = self.theclass(2, 2, 2, tzinfo=Bogus())
							πF.SetLineno(2518)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							if πE = πg.CheckLocal(πF, µBogus, "Bogus"); πE != nil {
								continue
							}
							if πTemp003, πE = µBogus.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp004
							// line 2519: t2 = self.theclass(2, 2, 2, tzinfo=FixedOffset(0, ""))
							πF.SetLineno(2519)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(2).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp004
							// line 2520: self.assertRaises(ValueError, lambda: t1 == t2)
							πF.SetLineno(2520)
							πTemp001 = πF.MakeArgs(2)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp007 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp007, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2520: self.assertRaises(ValueError, lambda: t1 == t2)
									πF.SetLineno(2520)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Eq(πF, µt1, µt2); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_even_more_compare.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 2543: def test_extreme_hashes(self):
					πF.SetLineno(2543)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("test_extreme_hashes", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2547: t = self.theclass(1, 1, 1, tzinfo=FixedOffset(1439, ""))
							πF.SetLineno(2547)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							πTemp001[2] = πg.NewInt(1).ToObject()
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1439).ToObject()
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp004
							// line 2548: hash(t)
							πF.SetLineno(2548)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[0] = µt
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2549: t = self.theclass(MAXYEAR, 12, 31, 23, 59, 59, 999999,
							πF.SetLineno(2549)
							πTemp001 = πF.MakeArgs(7)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewInt(12).ToObject()
							πTemp001[2] = πg.NewInt(31).ToObject()
							πTemp001[3] = πg.NewInt(23).ToObject()
							πTemp001[4] = πg.NewInt(59).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							πTemp001[6] = πg.NewInt(999999).ToObject()
							πTemp002 = πF.MakeArgs(2)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp004
							// line 2551: hash(t)
							πF.SetLineno(2551)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[0] = µt
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2554: t = self.theclass(5, 5, 5, tzinfo=FixedOffset(-1440, ""))
							πF.SetLineno(2554)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(5).ToObject()
							πTemp001[1] = πg.NewInt(5).ToObject()
							πTemp001[2] = πg.NewInt(5).ToObject()
							πTemp002 = πF.MakeArgs(2)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1440).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = ß.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp005 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt = πTemp004
							// line 2555: self.assertRaises(ValueError, hash, t)
							πF.SetLineno(2555)
							πTemp001 = πF.MakeArgs(3)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							πTemp001[2] = µt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_extreme_hashes.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 2558: def test_zones(self):
					πF.SetLineno(2558)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("test_zones", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µest *πg.Object = πg.UnboundLocal; _ = µest
						var µutc *πg.Object = πg.UnboundLocal; _ = µutc
						var µmet *πg.Object = πg.UnboundLocal; _ = µmet
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µt3 *πg.Object = πg.UnboundLocal; _ = µt3
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2559: est = FixedOffset(-300, "EST")
							πF.SetLineno(2559)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ßEST.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µest = πTemp003
							// line 2560: utc = FixedOffset(0, "UTC")
							πF.SetLineno(2560)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = ßUTC.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µutc = πTemp003
							// line 2561: met = FixedOffset(60, "MET")
							πF.SetLineno(2561)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(60).ToObject()
							πTemp001[1] = ßMET.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmet = πTemp003
							// line 2562: t1 = datetime(2002, 3, 19,  7, 47, tzinfo=est)
							πF.SetLineno(2562)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(19).ToObject()
							πTemp001[3] = πg.NewInt(7).ToObject()
							πTemp001[4] = πg.NewInt(47).ToObject()
							if πE = πg.CheckLocal(πF, µest, "est"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µest},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp003
							// line 2563: t2 = datetime(2002, 3, 19, 12, 47, tzinfo=utc)
							πF.SetLineno(2563)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(19).ToObject()
							πTemp001[3] = πg.NewInt(12).ToObject()
							πTemp001[4] = πg.NewInt(47).ToObject()
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µutc},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 2564: t3 = datetime(2002, 3, 19, 13, 47, tzinfo=met)
							πF.SetLineno(2564)
							πTemp001 = πF.MakeArgs(5)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(19).ToObject()
							πTemp001[3] = πg.NewInt(13).ToObject()
							πTemp001[4] = πg.NewInt(47).ToObject()
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µmet},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt3 = πTemp003
							// line 2565: self.assertEqual(t1.tzinfo, est)
							πF.SetLineno(2565)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µest, "est"); πE != nil {
								continue
							}
							πTemp001[1] = µest
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2566: self.assertEqual(t2.tzinfo, utc)
							πF.SetLineno(2566)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp001[1] = µutc
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2567: self.assertEqual(t3.tzinfo, met)
							πF.SetLineno(2567)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp001[1] = µmet
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2568: self.assertEqual(t1.utcoffset(), timedelta(minutes=-300))
							πF.SetLineno(2568)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"minutes", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2569: self.assertEqual(t2.utcoffset(), timedelta(minutes=0))
							πF.SetLineno(2569)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(0).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2570: self.assertEqual(t3.utcoffset(), timedelta(minutes=60))
							πF.SetLineno(2570)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(60).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2571: self.assertEqual(t1.tzname(), "EST")
							πF.SetLineno(2571)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = ßEST.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2572: self.assertEqual(t2.tzname(), "UTC")
							πF.SetLineno(2572)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = ßUTC.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2573: self.assertEqual(t3.tzname(), "MET")
							πF.SetLineno(2573)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt3, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp001[1] = ßMET.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2574: self.assertEqual(hash(t1), hash(t2))
							πF.SetLineno(2574)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2575: self.assertEqual(hash(t1), hash(t3))
							πF.SetLineno(2575)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2576: self.assertEqual(hash(t2), hash(t3))
							πF.SetLineno(2576)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhash); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2577: self.assertEqual(t1, t2)
							πF.SetLineno(2577)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2578: self.assertEqual(t1, t3)
							πF.SetLineno(2578)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp001[1] = µt3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2579: self.assertEqual(t2, t3)
							πF.SetLineno(2579)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[0] = µt2
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp001[1] = µt3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2580: self.assertEqual(str(t1), "2002-03-19 07:47:00-05:00")
							πF.SetLineno(2580)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("2002-03-19 07:47:00-05:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2581: self.assertEqual(str(t2), "2002-03-19 12:47:00+00:00")
							πF.SetLineno(2581)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("2002-03-19 12:47:00+00:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2582: self.assertEqual(str(t3), "2002-03-19 13:47:00+01:00")
							πF.SetLineno(2582)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							πTemp001[1] = πg.NewStr("2002-03-19 13:47:00+01:00").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2583: d = 'datetime.datetime(2002, 3, 19, '
							πF.SetLineno(2583)
							µd = πg.NewStr("datetime.datetime(2002, 3, 19, ").ToObject()
							// line 2584: self.assertEqual(repr(t1), d + "7, 47, tzinfo=est)")
							πF.SetLineno(2584)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp005[0] = µt1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("7, 47, tzinfo=est)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2585: self.assertEqual(repr(t2), d + "12, 47, tzinfo=utc)")
							πF.SetLineno(2585)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp005[0] = µt2
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("12, 47, tzinfo=utc)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2586: self.assertEqual(repr(t3), d + "13, 47, tzinfo=met)")
							πF.SetLineno(2586)
							πTemp001 = πF.MakeArgs(2)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt3, "t3"); πE != nil {
								continue
							}
							πTemp005[0] = µt3
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrepr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µd, πg.NewStr("13, 47, tzinfo=met)").ToObject()); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_zones.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 2557: @unittest.expectedFailure
					πF.SetLineno(2557)
					πTemp006 = πF.MakeArgs(1)
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßtest_zones); πE != nil {
						continue
					}
					πTemp006[0] = πTemp007
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp008.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_zones.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 2588: def test_combine(self):
					πF.SetLineno(2588)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_combine", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µmet *πg.Object = πg.UnboundLocal; _ = µmet
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µtz *πg.Object = πg.UnboundLocal; _ = µtz
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2589: met = FixedOffset(60, "MET")
							πF.SetLineno(2589)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(60).ToObject()
							πTemp001[1] = ßMET.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmet = πTemp003
							// line 2590: d = date(2002, 3, 4)
							πF.SetLineno(2590)
							πTemp001 = πF.MakeArgs(3)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp003
							// line 2591: tz = time(18, 45, 3, 1234, tzinfo=met)
							πF.SetLineno(2591)
							πTemp001 = πF.MakeArgs(4)
							πTemp001[0] = πg.NewInt(18).ToObject()
							πTemp001[1] = πg.NewInt(45).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(1234).ToObject()
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µmet},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtz = πTemp003
							// line 2592: dt = datetime.combine(d, tz)
							πF.SetLineno(2592)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp001[0] = µd
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp001[1] = µtz
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcombine, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp002
							// line 2593: self.assertEqual(dt, datetime(2002, 3, 4, 18, 45, 3, 1234,
							πF.SetLineno(2593)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							πTemp005 = πF.MakeArgs(7)
							πTemp005[0] = πg.NewInt(2002).ToObject()
							πTemp005[1] = πg.NewInt(3).ToObject()
							πTemp005[2] = πg.NewInt(4).ToObject()
							πTemp005[3] = πg.NewInt(18).ToObject()
							πTemp005[4] = πg.NewInt(45).ToObject()
							πTemp005[5] = πg.NewInt(3).ToObject()
							πTemp005[6] = πg.NewInt(1234).ToObject()
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µmet},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_combine.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 2596: def test_extract(self):
					πF.SetLineno(2596)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_extract", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µmet *πg.Object = πg.UnboundLocal; _ = µmet
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2597: met = FixedOffset(60, "MET")
							πF.SetLineno(2597)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(60).ToObject()
							πTemp001[1] = ßMET.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmet = πTemp003
							// line 2598: dt = self.theclass(2002, 3, 4, 18, 45, 3, 1234, tzinfo=met)
							πF.SetLineno(2598)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(2002).ToObject()
							πTemp001[1] = πg.NewInt(3).ToObject()
							πTemp001[2] = πg.NewInt(4).ToObject()
							πTemp001[3] = πg.NewInt(18).ToObject()
							πTemp001[4] = πg.NewInt(45).ToObject()
							πTemp001[5] = πg.NewInt(3).ToObject()
							πTemp001[6] = πg.NewInt(1234).ToObject()
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µmet},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdt = πTemp003
							// line 2599: self.assertEqual(dt.date(), date(2002, 3, 4))
							πF.SetLineno(2599)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(3)
							πTemp005[0] = πg.NewInt(2002).ToObject()
							πTemp005[1] = πg.NewInt(3).ToObject()
							πTemp005[2] = πg.NewInt(4).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2600: self.assertEqual(dt.time(), time(18, 45, 3, 1234))
							πF.SetLineno(2600)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(4)
							πTemp005[0] = πg.NewInt(18).ToObject()
							πTemp005[1] = πg.NewInt(45).ToObject()
							πTemp005[2] = πg.NewInt(3).ToObject()
							πTemp005[3] = πg.NewInt(1234).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2601: self.assertEqual(dt.timetz(), time(18, 45, 3, 1234, tzinfo=met))
							πF.SetLineno(2601)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtimetz, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp005 = πF.MakeArgs(4)
							πTemp005[0] = πg.NewInt(18).ToObject()
							πTemp005[1] = πg.NewInt(45).ToObject()
							πTemp005[2] = πg.NewInt(3).ToObject()
							πTemp005[3] = πg.NewInt(1234).ToObject()
							if πE = πg.CheckLocal(πF, µmet, "met"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µmet},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_extract.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 2604: def test_tz_aware_arithmetic(self):
					πF.SetLineno(2604)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_tz_aware_arithmetic", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µrandom *πg.Object = πg.UnboundLocal; _ = µrandom
						var µnow *πg.Object = πg.UnboundLocal; _ = µnow
						var µtz55 *πg.Object = πg.UnboundLocal; _ = µtz55
						var µtimeaware *πg.Object = πg.UnboundLocal; _ = µtimeaware
						var µnowaware *πg.Object = πg.UnboundLocal; _ = µnowaware
						var µdelta *πg.Object = πg.UnboundLocal; _ = µdelta
						var µnowawareplus *πg.Object = πg.UnboundLocal; _ = µnowawareplus
						var µnowawareplus2 *πg.Object = πg.UnboundLocal; _ = µnowawareplus2
						var µdiff *πg.Object = πg.UnboundLocal; _ = µdiff
						var µtzr *πg.Object = πg.UnboundLocal; _ = µtzr
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µmin *πg.Object = πg.UnboundLocal; _ = µmin
						var µmax *πg.Object = πg.UnboundLocal; _ = µmax
						var µmaxdiff *πg.Object = πg.UnboundLocal; _ = µmaxdiff
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []πg.Param
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2605: import random
							πF.SetLineno(2605)
							if πTemp002, πE = πg.ImportModule(πF, "random"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µrandom = πTemp001
							// line 2607: now = self.theclass.now()
							πF.SetLineno(2607)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßnow, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µnow = πTemp001
							// line 2608: tz55 = FixedOffset(-330, "west 5:30")
							πF.SetLineno(2608)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(330).ToObject()); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp002[1] = πg.NewStr("west 5:30").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µtz55 = πTemp003
							// line 2609: timeaware = now.time().replace(tzinfo=tz55)
							πF.SetLineno(2609)
							if πE = πg.CheckLocal(πF, µtz55, "tz55"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µtz55},
							}
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnow, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µtimeaware = πTemp003
							// line 2610: nowaware = self.theclass.combine(now.date(), timeaware)
							πF.SetLineno(2610)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnow, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtimeaware, "timeaware"); πE != nil {
								continue
							}
							πTemp002[1] = µtimeaware
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßcombine, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µnowaware = πTemp001
							// line 2611: self.assertIs(nowaware.tzinfo, tz55)
							πF.SetLineno(2611)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnowaware, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtz55, "tz55"); πE != nil {
								continue
							}
							πTemp002[1] = µtz55
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2612: self.assertEqual(nowaware.timetz(), timeaware)
							πF.SetLineno(2612)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnowaware, ßtimetz, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtimeaware, "timeaware"); πE != nil {
								continue
							}
							πTemp002[1] = µtimeaware
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2615: self.assertRaises(TypeError, lambda: now - nowaware)
							πF.SetLineno(2615)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp005 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2615: self.assertRaises(TypeError, lambda: now - nowaware)
									πF.SetLineno(2615)
									if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µnow, µnowaware); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2616: self.assertRaises(TypeError, lambda: nowaware - now)
							πF.SetLineno(2616)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp005 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2616: self.assertRaises(TypeError, lambda: nowaware - now)
									πF.SetLineno(2616)
									if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µnowaware, µnow); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2619: self.assertRaises(TypeError, lambda: now + nowaware)
							πF.SetLineno(2619)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp005 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2619: self.assertRaises(TypeError, lambda: now + nowaware)
									πF.SetLineno(2619)
									if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µnow, µnowaware); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2620: self.assertRaises(TypeError, lambda: nowaware + now)
							πF.SetLineno(2620)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp005 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2620: self.assertRaises(TypeError, lambda: nowaware + now)
									πF.SetLineno(2620)
									if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µnowaware, µnow); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2621: self.assertRaises(TypeError, lambda: nowaware + nowaware)
							πF.SetLineno(2621)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp005 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2621: self.assertRaises(TypeError, lambda: nowaware + nowaware)
									πF.SetLineno(2621)
									if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Add(πF, µnowaware, µnowaware); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2624: self.assertEqual(now - now, timedelta(0))
							πF.SetLineno(2624)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µnow, µnow); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2625: self.assertEqual(nowaware - nowaware, timedelta(0))
							πF.SetLineno(2625)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µnowaware, µnowaware); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2628: delta = timedelta(weeks=1, minutes=12, microseconds=5678)
							πF.SetLineno(2628)
							πTemp004 = πg.KWArgs{
								{"weeks", πg.NewInt(1).ToObject()},
								{"minutes", πg.NewInt(12).ToObject()},
								{"microseconds", πg.NewInt(5678).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µdelta = πTemp003
							// line 2629: nowawareplus = nowaware + delta
							πF.SetLineno(2629)
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µnowaware, µdelta); πE != nil {
								continue
							}
							µnowawareplus = πTemp001
							// line 2630: self.assertIs(nowaware.tzinfo, tz55)
							πF.SetLineno(2630)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnowaware, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtz55, "tz55"); πE != nil {
								continue
							}
							πTemp002[1] = µtz55
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2631: nowawareplus2 = delta + nowaware
							πF.SetLineno(2631)
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µdelta, µnowaware); πE != nil {
								continue
							}
							µnowawareplus2 = πTemp001
							// line 2632: self.assertIs(nowawareplus2.tzinfo, tz55)
							πF.SetLineno(2632)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowawareplus2, "nowawareplus2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnowawareplus2, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtz55, "tz55"); πE != nil {
								continue
							}
							πTemp002[1] = µtz55
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2633: self.assertEqual(nowawareplus, nowawareplus2)
							πF.SetLineno(2633)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
								continue
							}
							πTemp002[0] = µnowawareplus
							if πE = πg.CheckLocal(πF, µnowawareplus2, "nowawareplus2"); πE != nil {
								continue
							}
							πTemp002[1] = µnowawareplus2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2637: diff = nowawareplus - delta
							πF.SetLineno(2637)
							if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µnowawareplus, µdelta); πE != nil {
								continue
							}
							µdiff = πTemp001
							// line 2638: self.assertIs(diff.tzinfo, tz55)
							πF.SetLineno(2638)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdiff, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtz55, "tz55"); πE != nil {
								continue
							}
							πTemp002[1] = µtz55
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2639: self.assertEqual(nowaware, diff)
							πF.SetLineno(2639)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							πTemp002[0] = µnowaware
							if πE = πg.CheckLocal(πF, µdiff, "diff"); πE != nil {
								continue
							}
							πTemp002[1] = µdiff
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2640: self.assertRaises(TypeError, lambda: delta - nowawareplus)
							πF.SetLineno(2640)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp005 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2640: self.assertRaises(TypeError, lambda: delta - nowawareplus)
									πF.SetLineno(2640)
									if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Sub(πF, µdelta, µnowawareplus); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2641: self.assertEqual(nowawareplus - nowaware, delta)
							πF.SetLineno(2641)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µnowawareplus, µnowaware); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							πTemp002[1] = µdelta
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2644: tzr = FixedOffset(random.randrange(-1439, 1440), "randomtimezone")
							πF.SetLineno(2644)
							πTemp002 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp006[1] = πg.NewInt(1440).ToObject()
							if πE = πg.CheckLocal(πF, µrandom, "random"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µrandom, ßrandrange, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp002[0] = πTemp003
							πTemp002[1] = ßrandomtimezone.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µtzr = πTemp003
							// line 2646: nowawareplus = nowawareplus.replace(tzinfo=tzr)
							πF.SetLineno(2646)
							if πE = πg.CheckLocal(πF, µtzr, "tzr"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µtzr},
							}
							if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnowawareplus, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µnowawareplus = πTemp003
							// line 2647: self.assertIs(nowawareplus.tzinfo, tzr)
							πF.SetLineno(2647)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnowawareplus, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µtzr, "tzr"); πE != nil {
								continue
							}
							πTemp002[1] = µtzr
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2649: got = nowaware - nowawareplus
							πF.SetLineno(2649)
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µnowaware, µnowawareplus); πE != nil {
								continue
							}
							µgot = πTemp001
							// line 2655: expected = nowawareplus.utcoffset() - nowaware.utcoffset() - delta
							πF.SetLineno(2655)
							if πE = πg.CheckLocal(πF, µnowawareplus, "nowawareplus"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µnowawareplus, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnowaware, "nowaware"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µnowaware, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, πTemp008, πTemp009); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp003, µdelta); πE != nil {
								continue
							}
							µexpected = πTemp001
							// line 2656: self.assertEqual(got, expected)
							πF.SetLineno(2656)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[0] = µgot
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2659: min = self.theclass(1, 1, 1, tzinfo=FixedOffset(1439, "min"))
							πF.SetLineno(2659)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(1).ToObject()
							πTemp002[2] = πg.NewInt(1).ToObject()
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewInt(1439).ToObject()
							πTemp006[1] = ßmin.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µmin = πTemp003
							// line 2660: max = self.theclass(MAXYEAR, 12, 31, 23, 59, 59, 999999,
							πF.SetLineno(2660)
							πTemp002 = πF.MakeArgs(7)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp002[1] = πg.NewInt(12).ToObject()
							πTemp002[2] = πg.NewInt(31).ToObject()
							πTemp002[3] = πg.NewInt(23).ToObject()
							πTemp002[4] = πg.NewInt(59).ToObject()
							πTemp002[5] = πg.NewInt(59).ToObject()
							πTemp002[6] = πg.NewInt(999999).ToObject()
							πTemp006 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp006[1] = ßmax.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µmax = πTemp003
							// line 2662: maxdiff = max - min
							πF.SetLineno(2662)
							if πE = πg.CheckLocal(πF, µmax, "max"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmin, "min"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, µmax, µmin); πE != nil {
								continue
							}
							µmaxdiff = πTemp001
							// line 2663: self.assertEqual(maxdiff, self.theclass.max - self.theclass.min +
							πF.SetLineno(2663)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µmaxdiff, "maxdiff"); πE != nil {
								continue
							}
							πTemp002[0] = µmaxdiff
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßmax, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, πTemp007, ßmin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, πTemp008, πTemp009); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Mul(πF, πg.NewInt(2).ToObject(), πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"minutes", πTemp007},
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πTemp008); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tz_aware_arithmetic.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 2603: @unittest.expectedFailure
					πF.SetLineno(2603)
					πTemp006 = πF.MakeArgs(1)
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßtest_tz_aware_arithmetic); πE != nil {
						continue
					}
					πTemp006[0] = πTemp010
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp010, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp010, πE = πTemp011.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_tz_aware_arithmetic.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 2667: def test_tzinfo_now(self):
					πF.SetLineno(2667)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("test_tzinfo_now", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µmeth *πg.Object = πg.UnboundLocal; _ = µmeth
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µoff42 *πg.Object = πg.UnboundLocal; _ = µoff42
						var µanother *πg.Object = πg.UnboundLocal; _ = µanother
						var µagain *πg.Object = πg.UnboundLocal; _ = µagain
						var µweirdtz *πg.Object = πg.UnboundLocal; _ = µweirdtz
						var µutc *πg.Object = πg.UnboundLocal; _ = µutc
						var µdummy *πg.Object = πg.UnboundLocal; _ = µdummy
						var µnow *πg.Object = πg.UnboundLocal; _ = µnow
						var µutcnow *πg.Object = πg.UnboundLocal; _ = µutcnow
						var µnow2 *πg.Object = πg.UnboundLocal; _ = µnow2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2668: meth = self.theclass.now
							πF.SetLineno(2668)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnow, nil); πE != nil {
								continue
							}
							µmeth = πTemp002
							// line 2670: base = meth()
							πF.SetLineno(2670)
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, nil, nil); πE != nil {
								continue
							}
							µbase = πTemp001
							// line 2672: off42 = FixedOffset(42, "42")
							πF.SetLineno(2672)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(42).ToObject()
							πTemp003[1] = ß42.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µoff42 = πTemp002
							// line 2673: another = meth(off42)
							πF.SetLineno(2673)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp003[0] = µoff42
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µanother = πTemp001
							// line 2674: again = meth(tz=off42)
							πF.SetLineno(2674)
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tz", µoff42},
							}
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µagain = πTemp001
							// line 2675: self.assertIs(another.tzinfo, again.tzinfo)
							πF.SetLineno(2675)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µanother, "another"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µanother, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µagain, "again"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µagain, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2676: self.assertEqual(another.utcoffset(), timedelta(minutes=42))
							πF.SetLineno(2676)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µanother, "another"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µanother, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(42).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2678: self.assertRaises(TypeError, meth, 16)
							πF.SetLineno(2678)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp003[1] = µmeth
							πTemp003[2] = πg.NewInt(16).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2679: self.assertRaises(TypeError, meth, tzinfo=16)
							πF.SetLineno(2679)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp003[1] = µmeth
							πTemp004 = πg.KWArgs{
								{"tzinfo", πg.NewInt(16).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2681: self.assertRaises(TypeError, meth, tinfo=off42)
							πF.SetLineno(2681)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp003[1] = µmeth
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tinfo", µoff42},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2683: self.assertRaises(TypeError, meth, off42, off42)
							πF.SetLineno(2683)
							πTemp003 = πF.MakeArgs(4)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp003[1] = µmeth
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp003[2] = µoff42
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp003[3] = µoff42
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2688: weirdtz = FixedOffset(timedelta(hours=15, minutes=58), "weirdtz", 0)
							πF.SetLineno(2688)
							πTemp003 = πF.MakeArgs(3)
							πTemp004 = πg.KWArgs{
								{"hours", πg.NewInt(15).ToObject()},
								{"minutes", πg.NewInt(58).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = ßweirdtz.ToObject()
							πTemp003[2] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µweirdtz = πTemp002
							// line 2689: utc = FixedOffset(0, "utc", 0)
							πF.SetLineno(2689)
							πTemp003 = πF.MakeArgs(3)
							πTemp003[0] = πg.NewInt(0).ToObject()
							πTemp003[1] = ßutc.ToObject()
							πTemp003[2] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µutc = πTemp002
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewInt(3).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µdummy = πTemp002
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2691: now = datetime.now(weirdtz)
							πF.SetLineno(2691)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µweirdtz, "weirdtz"); πE != nil {
								continue
							}
							πTemp003[0] = µweirdtz
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßnow, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µnow = πTemp002
							// line 2692: self.assertIs(now.tzinfo, weirdtz)
							πF.SetLineno(2692)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnow, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µweirdtz, "weirdtz"); πE != nil {
								continue
							}
							πTemp003[1] = µweirdtz
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2693: utcnow = datetime.utcnow().replace(tzinfo=utc)
							πF.SetLineno(2693)
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µutc},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßutcnow, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µutcnow = πTemp002
							// line 2694: now2 = utcnow.astimezone(weirdtz)
							πF.SetLineno(2694)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µweirdtz, "weirdtz"); πE != nil {
								continue
							}
							πTemp003[0] = µweirdtz
							if πE = πg.CheckLocal(πF, µutcnow, "utcnow"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µutcnow, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µnow2 = πTemp005
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnow2, "now2"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, µnow, µnow2); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßabs); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp004 = πg.KWArgs{
								{"seconds", πg.NewInt(30).ToObject()},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, πTemp008, πTemp009); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label4
							}
							goto Label5
							// line 2695: if abs(now - now2) < timedelta(seconds=30):
							πF.SetLineno(2695)
						Label4:
							// line 2696: break
							πF.SetLineno(2696)
							πTemp006 = true
							continue
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
							// line 2701: self.fail("utcnow(), now(tz), or astimezone() may be broken")
							πF.SetLineno(2701)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("utcnow(), now(tz), or astimezone() may be broken").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfail, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tzinfo_now.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 2666: @unittest.expectedFailure
					πF.SetLineno(2666)
					πTemp006 = πF.MakeArgs(1)
					if πTemp011, πE = πg.ResolveClass(πF, πClass, nil, ßtest_tzinfo_now); πE != nil {
						continue
					}
					πTemp006[0] = πTemp011
					if πTemp011, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp012, πE = πg.GetAttr(πF, πTemp011, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp011, πE = πTemp012.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_tzinfo_now.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 2704: def test_tzinfo_fromtimestamp(self):
					πF.SetLineno(2704)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("test_tzinfo_fromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µmeth *πg.Object = πg.UnboundLocal; _ = µmeth
						var µts *πg.Object = πg.UnboundLocal; _ = µts
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µoff42 *πg.Object = πg.UnboundLocal; _ = µoff42
						var µanother *πg.Object = πg.UnboundLocal; _ = µanother
						var µagain *πg.Object = πg.UnboundLocal; _ = µagain
						var µtimestamp *πg.Object = πg.UnboundLocal; _ = µtimestamp
						var µutcdatetime *πg.Object = πg.UnboundLocal; _ = µutcdatetime
						var µutcoffset *πg.Object = πg.UnboundLocal; _ = µutcoffset
						var µtz *πg.Object = πg.UnboundLocal; _ = µtz
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2705: import time
							πF.SetLineno(2705)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							// line 2706: meth = self.theclass.fromtimestamp
							πF.SetLineno(2706)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßfromtimestamp, nil); πE != nil {
								continue
							}
							µmeth = πTemp003
							// line 2707: ts = time.time()
							πF.SetLineno(2707)
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µts = πTemp003
							// line 2709: base = meth(ts)
							πF.SetLineno(2709)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µbase = πTemp001
							// line 2711: off42 = FixedOffset(42, "42")
							πF.SetLineno(2711)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(42).ToObject()
							πTemp002[1] = ß42.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µoff42 = πTemp003
							// line 2712: another = meth(ts, off42)
							πF.SetLineno(2712)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp002[1] = µoff42
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µanother = πTemp001
							// line 2713: again = meth(ts, tz=off42)
							πF.SetLineno(2713)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tz", µoff42},
							}
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µagain = πTemp001
							// line 2714: self.assertIs(another.tzinfo, again.tzinfo)
							πF.SetLineno(2714)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µanother, "another"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µanother, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µagain, "again"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µagain, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2715: self.assertEqual(another.utcoffset(), timedelta(minutes=42))
							πF.SetLineno(2715)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µanother, "another"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µanother, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(42).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2717: self.assertRaises(TypeError, meth, ts, 16)
							πF.SetLineno(2717)
							πTemp002 = πF.MakeArgs(4)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp002[1] = µmeth
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[2] = µts
							πTemp002[3] = πg.NewInt(16).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2718: self.assertRaises(TypeError, meth, ts, tzinfo=16)
							πF.SetLineno(2718)
							πTemp002 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp002[1] = µmeth
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[2] = µts
							πTemp004 = πg.KWArgs{
								{"tzinfo", πg.NewInt(16).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2720: self.assertRaises(TypeError, meth, ts, tinfo=off42)
							πF.SetLineno(2720)
							πTemp002 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp002[1] = µmeth
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[2] = µts
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tinfo", µoff42},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2722: self.assertRaises(TypeError, meth, ts, off42, off42)
							πF.SetLineno(2722)
							πTemp002 = πF.MakeArgs(5)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp002[1] = µmeth
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[2] = µts
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp002[3] = µoff42
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp002[4] = µoff42
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2724: self.assertRaises(TypeError, meth)
							πF.SetLineno(2724)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp002[1] = µmeth
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2727: timestamp = 1000000000
							πF.SetLineno(2727)
							µtimestamp = πg.NewInt(1000000000).ToObject()
							// line 2728: utcdatetime = datetime.utcfromtimestamp(timestamp)
							πF.SetLineno(2728)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtimestamp, "timestamp"); πE != nil {
								continue
							}
							πTemp002[0] = µtimestamp
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßutcfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µutcdatetime = πTemp001
							// line 2733: utcoffset = timedelta(hours=-15, minutes=39) # arbitrary, but not zero
							πF.SetLineno(2733)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(15).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"hours", πTemp001},
								{"minutes", πg.NewInt(39).ToObject()},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µutcoffset = πTemp003
							// line 2734: tz = FixedOffset(utcoffset, "tz", 0)
							πF.SetLineno(2734)
							πTemp002 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µutcoffset, "utcoffset"); πE != nil {
								continue
							}
							πTemp002[0] = µutcoffset
							πTemp002[1] = ßtz.ToObject()
							πTemp002[2] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µtz = πTemp003
							// line 2735: expected = utcdatetime + utcoffset
							πF.SetLineno(2735)
							if πE = πg.CheckLocal(πF, µutcdatetime, "utcdatetime"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µutcoffset, "utcoffset"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µutcdatetime, µutcoffset); πE != nil {
								continue
							}
							µexpected = πTemp001
							// line 2736: got = datetime.fromtimestamp(timestamp, tz)
							πF.SetLineno(2736)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtimestamp, "timestamp"); πE != nil {
								continue
							}
							πTemp002[0] = µtimestamp
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp002[1] = µtz
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßfromtimestamp, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µgot = πTemp001
							// line 2737: self.assertEqual(expected, got.replace(tzinfo=None))
							πF.SetLineno(2737)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µgot, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tzinfo_fromtimestamp.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 2703: @unittest.expectedFailure
					πF.SetLineno(2703)
					πTemp006 = πF.MakeArgs(1)
					if πTemp012, πE = πg.ResolveClass(πF, πClass, nil, ßtest_tzinfo_fromtimestamp); πE != nil {
						continue
					}
					πTemp006[0] = πTemp012
					if πTemp012, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp013, πE = πg.GetAttr(πF, πTemp012, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp012, πE = πTemp013.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_tzinfo_fromtimestamp.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 2739: def test_tzinfo_utcnow(self):
					πF.SetLineno(2739)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("test_tzinfo_utcnow", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µmeth *πg.Object = πg.UnboundLocal; _ = µmeth
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µoff42 *πg.Object = πg.UnboundLocal; _ = µoff42
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2740: meth = self.theclass.utcnow
							πF.SetLineno(2740)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßutcnow, nil); πE != nil {
								continue
							}
							µmeth = πTemp002
							// line 2742: base = meth()
							πF.SetLineno(2742)
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, nil, nil); πE != nil {
								continue
							}
							µbase = πTemp001
							// line 2745: off42 = FixedOffset(42, "42")
							πF.SetLineno(2745)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(42).ToObject()
							πTemp003[1] = ß42.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µoff42 = πTemp002
							// line 2746: self.assertRaises(TypeError, meth, off42)
							πF.SetLineno(2746)
							πTemp003 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp003[1] = µmeth
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp003[2] = µoff42
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2747: self.assertRaises(TypeError, meth, tzinfo=off42)
							πF.SetLineno(2747)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp003[1] = µmeth
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µoff42},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tzinfo_utcnow.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 2749: def test_tzinfo_utcfromtimestamp(self):
					πF.SetLineno(2749)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("test_tzinfo_utcfromtimestamp", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtime *πg.Object = πg.UnboundLocal; _ = µtime
						var µmeth *πg.Object = πg.UnboundLocal; _ = µmeth
						var µts *πg.Object = πg.UnboundLocal; _ = µts
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µoff42 *πg.Object = πg.UnboundLocal; _ = µoff42
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2750: import time
							πF.SetLineno(2750)
							if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
								continue
							}
							πTemp001 = πTemp002[0]
							µtime = πTemp001
							// line 2751: meth = self.theclass.utcfromtimestamp
							πF.SetLineno(2751)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßutcfromtimestamp, nil); πE != nil {
								continue
							}
							µmeth = πTemp003
							// line 2752: ts = time.time()
							πF.SetLineno(2752)
							if πE = πg.CheckLocal(πF, µtime, "time"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtime, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µts = πTemp003
							// line 2754: base = meth(ts)
							πF.SetLineno(2754)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[0] = µts
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							if πTemp001, πE = µmeth.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µbase = πTemp001
							// line 2757: off42 = FixedOffset(42, "42")
							πF.SetLineno(2757)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(42).ToObject()
							πTemp002[1] = ß42.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µoff42 = πTemp003
							// line 2758: self.assertRaises(TypeError, meth, ts, off42)
							πF.SetLineno(2758)
							πTemp002 = πF.MakeArgs(4)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp002[1] = µmeth
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[2] = µts
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp002[3] = µoff42
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2759: self.assertRaises(TypeError, meth, ts, tzinfo=off42)
							πF.SetLineno(2759)
							πTemp002 = πF.MakeArgs(3)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmeth, "meth"); πE != nil {
								continue
							}
							πTemp002[1] = µmeth
							if πE = πg.CheckLocal(πF, µts, "ts"); πE != nil {
								continue
							}
							πTemp002[2] = µts
							if πE = πg.CheckLocal(πF, µoff42, "off42"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µoff42},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tzinfo_utcfromtimestamp.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 2761: def test_tzinfo_timetuple(self):
					πF.SetLineno(2761)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("test_tzinfo_timetuple", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µDST *πg.Object = πg.UnboundLocal; _ = µDST
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µdstvalue *πg.Object = πg.UnboundLocal; _ = µdstvalue
						var µflag *πg.Object = πg.UnboundLocal; _ = µflag
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 bool
						_ = πTemp012
						var πTemp013 []*πg.Object
						_ = πTemp013
						var πTemp014 πg.KWArgs
						_ = πTemp014
						var πTemp015 []*πg.Object
						_ = πTemp015
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2764: class DST(tzinfo):
							πF.SetLineno(2764)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("DST", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2765: def __init__(self, dstvalue):
									πF.SetLineno(2765)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dstvalue", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdstvalue *πg.Object = πArgs[1]; _ = µdstvalue
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 πg.KWArgs
										_ = πTemp005
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
												continue
											}
											πTemp001[0] = µdstvalue
											if πTemp002, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
												continue
											}
											if πTemp004 {
												goto Label1
											}
											goto Label2
											// line 2766: if isinstance(dstvalue, int):
											πF.SetLineno(2766)
										Label1:
											// line 2767: dstvalue = timedelta(minutes=dstvalue)
											πF.SetLineno(2767)
											if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
												continue
											}
											πTemp005 = πg.KWArgs{
												{"minutes", µdstvalue},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
												continue
											}
											µdstvalue = πTemp003
											goto Label2
										Label2:
											// line 2768: self.dstvalue = dstvalue
											πF.SetLineno(2768)
											if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µdstvalue); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßdstvalue, πTemp002); πE != nil {
												continue
											}
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2769: def dst(self, dt):
									πF.SetLineno(2769)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2770: return self.dstvalue
											πF.SetLineno(2770)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßdstvalue, nil); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("DST").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µDST = πTemp005
							// line 2772: cls = self.theclass
							πF.SetLineno(2772)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp002
							if πTemp006, πE = πg.Neg(πF, πg.NewInt(33).ToObject()); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(πTemp006, πg.NewInt(1).ToObject()).ToObject()
							πTemp006 = πg.NewTuple2(πg.NewInt(33).ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp007 = πg.NewTuple2(πg.NewInt(0).ToObject(), πg.NewInt(0).ToObject()).ToObject()
							if πTemp009, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp008 = πg.NewTuple2(πTemp009, πTemp010).ToObject()
							πTemp004 = πg.NewTuple4(πTemp005, πTemp006, πTemp007, πTemp008).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp011 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp011 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp012 = !isStop
							} else {
								πTemp012 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp004); πE != nil {
									continue
								}
								µdstvalue = πTemp005
								µflag = πTemp006
							}
							if πE != nil || !πTemp012 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2774: d = cls(1, 1, 1, 10, 20, 30, 40, tzinfo=DST(dstvalue))
							πF.SetLineno(2774)
							πTemp003 = πF.MakeArgs(7)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							πTemp003[3] = πg.NewInt(10).ToObject()
							πTemp003[4] = πg.NewInt(20).ToObject()
							πTemp003[5] = πg.NewInt(30).ToObject()
							πTemp003[6] = πg.NewInt(40).ToObject()
							πTemp013 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
								continue
							}
							πTemp013[0] = µdstvalue
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							if πTemp004, πE = µDST.Call(πF, πTemp013, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							πTemp014 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = µcls.Call(πF, πTemp003, πTemp014); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µd = πTemp004
							// line 2775: t = d.timetuple()
							πF.SetLineno(2775)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp005
							// line 2776: self.assertEqual(1, t.tm_year)
							πF.SetLineno(2776)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_year, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2777: self.assertEqual(1, t.tm_mon)
							πF.SetLineno(2777)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_mon, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2778: self.assertEqual(1, t.tm_mday)
							πF.SetLineno(2778)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_mday, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2779: self.assertEqual(10, t.tm_hour)
							πF.SetLineno(2779)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(10).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_hour, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2780: self.assertEqual(20, t.tm_min)
							πF.SetLineno(2780)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(20).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_min, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2781: self.assertEqual(30, t.tm_sec)
							πF.SetLineno(2781)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(30).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_sec, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2782: self.assertEqual(0, t.tm_wday)
							πF.SetLineno(2782)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_wday, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2783: self.assertEqual(1, t.tm_yday)
							πF.SetLineno(2783)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_yday, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2784: self.assertEqual(flag, t.tm_isdst)
							πF.SetLineno(2784)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µflag, "flag"); πE != nil {
								continue
							}
							πTemp003[0] = µflag
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2787: self.assertRaises(TypeError, cls(1, 1, 1, tzinfo=DST("x")).timetuple)
							πF.SetLineno(2787)
							πTemp003 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp013 = πF.MakeArgs(3)
							πTemp013[0] = πg.NewInt(1).ToObject()
							πTemp013[1] = πg.NewInt(1).ToObject()
							πTemp013[2] = πg.NewInt(1).ToObject()
							πTemp015 = πF.MakeArgs(1)
							πTemp015[0] = ßx.ToObject()
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							if πTemp002, πE = µDST.Call(πF, πTemp015, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp015)
							πTemp014 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp013, πTemp014); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtimetuple, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2790: self.assertEqual(cls(1,1,1, tzinfo=DST(1439)).timetuple().tm_isdst, 1)
							πF.SetLineno(2790)
							πTemp003 = πF.MakeArgs(2)
							πTemp013 = πF.MakeArgs(3)
							πTemp013[0] = πg.NewInt(1).ToObject()
							πTemp013[1] = πg.NewInt(1).ToObject()
							πTemp013[2] = πg.NewInt(1).ToObject()
							πTemp015 = πF.MakeArgs(1)
							πTemp015[0] = πg.NewInt(1439).ToObject()
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							if πTemp002, πE = µDST.Call(πF, πTemp015, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp015)
							πTemp014 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp013, πTemp014); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							πTemp003[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2791: self.assertEqual(cls(1,1,1, tzinfo=DST(-1439)).timetuple().tm_isdst, 1)
							πF.SetLineno(2791)
							πTemp003 = πF.MakeArgs(2)
							πTemp013 = πF.MakeArgs(3)
							πTemp013[0] = πg.NewInt(1).ToObject()
							πTemp013[1] = πg.NewInt(1).ToObject()
							πTemp013[2] = πg.NewInt(1).ToObject()
							πTemp015 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp015[0] = πTemp002
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							if πTemp002, πE = µDST.Call(πF, πTemp015, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp015)
							πTemp014 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp013, πTemp014); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtimetuple, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							πTemp003[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2794: self.assertRaises(ValueError, cls(1,1,1, tzinfo=DST(1440)).timetuple)
							πF.SetLineno(2794)
							πTemp003 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp013 = πF.MakeArgs(3)
							πTemp013[0] = πg.NewInt(1).ToObject()
							πTemp013[1] = πg.NewInt(1).ToObject()
							πTemp013[2] = πg.NewInt(1).ToObject()
							πTemp015 = πF.MakeArgs(1)
							πTemp015[0] = πg.NewInt(1440).ToObject()
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							if πTemp002, πE = µDST.Call(πF, πTemp015, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp015)
							πTemp014 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp013, πTemp014); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtimetuple, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2795: self.assertRaises(ValueError, cls(1,1,1, tzinfo=DST(-1440)).timetuple)
							πF.SetLineno(2795)
							πTemp003 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp013 = πF.MakeArgs(3)
							πTemp013[0] = πg.NewInt(1).ToObject()
							πTemp013[1] = πg.NewInt(1).ToObject()
							πTemp013[2] = πg.NewInt(1).ToObject()
							πTemp015 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1440).ToObject()); πE != nil {
								continue
							}
							πTemp015[0] = πTemp002
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							if πTemp002, πE = µDST.Call(πF, πTemp015, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp015)
							πTemp014 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp013, πTemp014); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtimetuple, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tzinfo_timetuple.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 2797: def test_utctimetuple(self):
					πF.SetLineno(2797)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("test_utctimetuple", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µDST *πg.Object = πg.UnboundLocal; _ = µDST
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µUOFS *πg.Object = πg.UnboundLocal; _ = µUOFS
						var µdstvalue *πg.Object = πg.UnboundLocal; _ = µdstvalue
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µt *πg.Object = πg.UnboundLocal; _ = µt
						var µtiny *πg.Object = πg.UnboundLocal; _ = µtiny
						var µhuge *πg.Object = πg.UnboundLocal; _ = µhuge
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πTemp013 *πg.Object
						_ = πTemp013
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2798: class DST(tzinfo):
							πF.SetLineno(2798)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("DST", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2799: def __init__(self, dstvalue):
									πF.SetLineno(2799)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dstvalue", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdstvalue *πg.Object = πArgs[1]; _ = µdstvalue
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 bool
										_ = πTemp004
										var πTemp005 πg.KWArgs
										_ = πTemp005
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
												continue
											}
											πTemp001[0] = µdstvalue
											if πTemp002, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
												continue
											}
											πTemp001[1] = πTemp002
											if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
												continue
											}
											if πTemp004 {
												goto Label1
											}
											goto Label2
											// line 2800: if isinstance(dstvalue, int):
											πF.SetLineno(2800)
										Label1:
											// line 2801: dstvalue = timedelta(minutes=dstvalue)
											πF.SetLineno(2801)
											if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
												continue
											}
											πTemp005 = πg.KWArgs{
												{"minutes", µdstvalue},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp005); πE != nil {
												continue
											}
											µdstvalue = πTemp003
											goto Label2
										Label2:
											// line 2802: self.dstvalue = dstvalue
											πF.SetLineno(2802)
											if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µdstvalue); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßdstvalue, πTemp002); πE != nil {
												continue
											}
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2803: def dst(self, dt):
									πF.SetLineno(2803)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2804: return self.dstvalue
											πF.SetLineno(2804)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßdstvalue, nil); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("DST").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µDST = πTemp005
							// line 2806: cls = self.theclass
							πF.SetLineno(2806)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp002
							// line 2808: self.assertRaises(NotImplementedError,
							πF.SetLineno(2808)
							πTemp003 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp006 = πF.MakeArgs(3)
							πTemp006[0] = πg.NewInt(1).ToObject()
							πTemp006[1] = πg.NewInt(1).ToObject()
							πTemp006[2] = πg.NewInt(1).ToObject()
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							if πTemp002, πE = µDST.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp008 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßutcoffset, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2811: class UOFS(DST):
							πF.SetLineno(2811)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
								continue
							}
							πTemp003[0] = µDST
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("UOFS", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2812: def __init__(self, uofs, dofs=None):
									πF.SetLineno(2812)
									πTemp002 = make([]πg.Param, 3)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "uofs", Def: nil}
									if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
										continue
									}
									πTemp002[2] = πg.Param{Name: "dofs", Def: πTemp003}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µuofs *πg.Object = πArgs[1]; _ = µuofs
										var µdofs *πg.Object = πArgs[2]; _ = µdofs
										var πTemp001 []*πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 πg.KWArgs
										_ = πTemp004
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2813: DST.__init__(self, dofs)
											πF.SetLineno(2813)
											πTemp001 = πF.MakeArgs(2)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											πTemp001[0] = µself
											if πE = πg.CheckLocal(πF, µdofs, "dofs"); πE != nil {
												continue
											}
											πTemp001[1] = µdofs
											if πE = πg.CheckLocal(πF, µDST, "DST"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µDST, ß__init__, nil); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp001)
											// line 2814: self.uofs = timedelta(minutes=uofs)
											πF.SetLineno(2814)
											if πE = πg.CheckLocal(πF, µuofs, "uofs"); πE != nil {
												continue
											}
											πTemp004 = πg.KWArgs{
												{"minutes", µuofs},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßuofs, πTemp002); πE != nil {
												continue
											}
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 2815: def utcoffset(self, dt):
									πF.SetLineno(2815)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 2816: return self.uofs
											πF.SetLineno(2816)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßuofs, nil); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("UOFS").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µUOFS = πTemp005
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(33).ToObject()); πE != nil {
								continue
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple4(πTemp005, πg.NewInt(33).ToObject(), πg.NewInt(0).ToObject(), πTemp009).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp010 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp010 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp011 = !isStop
							} else {
								πTemp011 = true
								µdstvalue = πTemp004
							}
							if πE != nil || !πTemp011 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2821: d = cls(1, 2, 3, 10, 20, 30, 40, tzinfo=UOFS(-53, dstvalue))
							πF.SetLineno(2821)
							πTemp003 = πF.MakeArgs(7)
							πTemp003[0] = πg.NewInt(1).ToObject()
							πTemp003[1] = πg.NewInt(2).ToObject()
							πTemp003[2] = πg.NewInt(3).ToObject()
							πTemp003[3] = πg.NewInt(10).ToObject()
							πTemp003[4] = πg.NewInt(20).ToObject()
							πTemp003[5] = πg.NewInt(30).ToObject()
							πTemp003[6] = πg.NewInt(40).ToObject()
							πTemp006 = πF.MakeArgs(2)
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(53).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdstvalue, "dstvalue"); πE != nil {
								continue
							}
							πTemp006[1] = µdstvalue
							if πE = πg.CheckLocal(πF, µUOFS, "UOFS"); πE != nil {
								continue
							}
							if πTemp004, πE = µUOFS.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp008 = πg.KWArgs{
								{"tzinfo", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = µcls.Call(πF, πTemp003, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µd = πTemp004
							// line 2822: t = d.utctimetuple()
							πF.SetLineno(2822)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßutctimetuple, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp005
							// line 2823: self.assertEqual(d.year, t.tm_year)
							πF.SetLineno(2823)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßyear, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_year, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2824: self.assertEqual(d.month, t.tm_mon)
							πF.SetLineno(2824)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßmonth, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_mon, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2825: self.assertEqual(d.day, t.tm_mday)
							πF.SetLineno(2825)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßday, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_mday, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2826: self.assertEqual(11, t.tm_hour) # 20mm + 53mm = 1hn + 13mm
							πF.SetLineno(2826)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(11).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_hour, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2827: self.assertEqual(13, t.tm_min)
							πF.SetLineno(2827)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(13).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_min, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2828: self.assertEqual(d.second, t.tm_sec)
							πF.SetLineno(2828)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßsecond, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_sec, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2829: self.assertEqual(d.weekday(), t.tm_wday)
							πF.SetLineno(2829)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßweekday, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_wday, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2830: self.assertEqual(d.toordinal() - date(1, 1, 1).toordinal() + 1,
							πF.SetLineno(2830)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µd, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp012, πE = πTemp009.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πF.MakeArgs(3)
							πTemp006[0] = πg.NewInt(1).ToObject()
							πTemp006[1] = πg.NewInt(1).ToObject()
							πTemp006[2] = πg.NewInt(1).ToObject()
							if πTemp009, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp013, πE = πTemp009.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp009, πE = πg.GetAttr(πF, πTemp013, ßtoordinal, nil); πE != nil {
								continue
							}
							if πTemp013, πE = πTemp009.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, πTemp012, πTemp013); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_yday, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2832: self.assertEqual(0, t.tm_isdst)
							πF.SetLineno(2832)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µt, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2837: tiny = cls(MINYEAR, 1, 1, 0, 0, 37, tzinfo=UOFS(1439))
							πF.SetLineno(2837)
							πTemp003 = πF.MakeArgs(6)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMINYEAR); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(1).ToObject()
							πTemp003[2] = πg.NewInt(1).ToObject()
							πTemp003[3] = πg.NewInt(0).ToObject()
							πTemp003[4] = πg.NewInt(0).ToObject()
							πTemp003[5] = πg.NewInt(37).ToObject()
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewInt(1439).ToObject()
							if πE = πg.CheckLocal(πF, µUOFS, "UOFS"); πE != nil {
								continue
							}
							if πTemp002, πE = µUOFS.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp008 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp003, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µtiny = πTemp002
							// line 2839: t = tiny.utctimetuple()
							πF.SetLineno(2839)
							if πE = πg.CheckLocal(πF, µtiny, "tiny"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtiny, ßutctimetuple, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp004
							// line 2840: self.assertEqual(t.tm_year, MINYEAR-1)
							πF.SetLineno(2840)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_year, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πTemp004, πE = πg.ResolveGlobal(πF, ßMINYEAR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp004, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2841: self.assertEqual(t.tm_mon, 12)
							πF.SetLineno(2841)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_mon, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(12).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2842: self.assertEqual(t.tm_mday, 31)
							πF.SetLineno(2842)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_mday, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(31).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2843: self.assertEqual(t.tm_hour, 0)
							πF.SetLineno(2843)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_hour, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2844: self.assertEqual(t.tm_min, 1)
							πF.SetLineno(2844)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_min, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2845: self.assertEqual(t.tm_sec, 37)
							πF.SetLineno(2845)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_sec, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(37).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2846: self.assertEqual(t.tm_yday, 366)    # "year 0" is a leap year
							πF.SetLineno(2846)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_yday, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(366).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2847: self.assertEqual(t.tm_isdst, 0)
							πF.SetLineno(2847)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2849: huge = cls(MAXYEAR, 12, 31, 23, 59, 37, 999999, tzinfo=UOFS(-1439))
							πF.SetLineno(2849)
							πTemp003 = πF.MakeArgs(7)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(12).ToObject()
							πTemp003[2] = πg.NewInt(31).ToObject()
							πTemp003[3] = πg.NewInt(23).ToObject()
							πTemp003[4] = πg.NewInt(59).ToObject()
							πTemp003[5] = πg.NewInt(37).ToObject()
							πTemp003[6] = πg.NewInt(999999).ToObject()
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1439).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µUOFS, "UOFS"); πE != nil {
								continue
							}
							if πTemp002, πE = µUOFS.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp008 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = µcls.Call(πF, πTemp003, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µhuge = πTemp002
							// line 2851: t = huge.utctimetuple()
							πF.SetLineno(2851)
							if πE = πg.CheckLocal(πF, µhuge, "huge"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µhuge, ßutctimetuple, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µt = πTemp004
							// line 2852: self.assertEqual(t.tm_year, MAXYEAR+1)
							πF.SetLineno(2852)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_year, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πTemp004, πE = πg.ResolveGlobal(πF, ßMAXYEAR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp004, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2853: self.assertEqual(t.tm_mon, 1)
							πF.SetLineno(2853)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_mon, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2854: self.assertEqual(t.tm_mday, 1)
							πF.SetLineno(2854)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_mday, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2855: self.assertEqual(t.tm_hour, 23)
							πF.SetLineno(2855)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_hour, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(23).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2856: self.assertEqual(t.tm_min, 58)
							πF.SetLineno(2856)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_min, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(58).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2857: self.assertEqual(t.tm_sec, 37)
							πF.SetLineno(2857)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_sec, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(37).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2858: self.assertEqual(t.tm_yday, 1)
							πF.SetLineno(2858)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_yday, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2859: self.assertEqual(t.tm_isdst, 0)
							πF.SetLineno(2859)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt, ßtm_isdst, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_utctimetuple.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 2862: def test_tzinfo_isoformat(self):
					πF.SetLineno(2862)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("test_tzinfo_isoformat", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µzero *πg.Object = πg.UnboundLocal; _ = µzero
						var µplus *πg.Object = πg.UnboundLocal; _ = µplus
						var µminus *πg.Object = πg.UnboundLocal; _ = µminus
						var µunknown *πg.Object = πg.UnboundLocal; _ = µunknown
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µdatestr *πg.Object = πg.UnboundLocal; _ = µdatestr
						var µofs *πg.Object = πg.UnboundLocal; _ = µofs
						var µus *πg.Object = πg.UnboundLocal; _ = µus
						var µd *πg.Object = πg.UnboundLocal; _ = µd
						var µtimestr *πg.Object = πg.UnboundLocal; _ = µtimestr
						var µofsstr *πg.Object = πg.UnboundLocal; _ = µofsstr
						var µtailstr *πg.Object = πg.UnboundLocal; _ = µtailstr
						var µiso *πg.Object = πg.UnboundLocal; _ = µiso
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πTemp013 []*πg.Object
						_ = πTemp013
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							default: panic("unexpected function state")
							}
							// line 2863: zero = FixedOffset(0, "+00:00")
							πF.SetLineno(2863)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = πg.NewStr("+00:00").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µzero = πTemp003
							// line 2864: plus = FixedOffset(220, "+03:40")
							πF.SetLineno(2864)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(220).ToObject()
							πTemp001[1] = πg.NewStr("+03:40").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µplus = πTemp003
							// line 2865: minus = FixedOffset(-231, "-03:51")
							πF.SetLineno(2865)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(231).ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("-03:51").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µminus = πTemp003
							// line 2866: unknown = FixedOffset(None, "")
							πF.SetLineno(2866)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µunknown = πTemp003
							// line 2868: cls = self.theclass
							πF.SetLineno(2868)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp002
							// line 2869: datestr = '0001-02-03'
							πF.SetLineno(2869)
							µdatestr = πg.NewStr("0001-02-03").ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µzero, "zero"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µplus, "plus"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µminus, "minus"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µunknown, "unknown"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple5(πTemp004, µzero, µplus, µminus, µunknown).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µofs = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)            
							πTemp004 = πg.NewTuple2(πg.NewInt(0).ToObject(), πg.NewInt(987001).ToObject()).ToObject()
							if πTemp003, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp006 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp004, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µus = πTemp004
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 2872: d = cls(1, 2, 3, 4, 5, 59, us, tzinfo=ofs)
							πF.SetLineno(2872)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(59).ToObject()
							if πE = πg.CheckLocal(πF, µus, "us"); πE != nil {
								continue
							}
							πTemp001[6] = µus
							if πE = πg.CheckLocal(πF, µofs, "ofs"); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"tzinfo", µofs},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = µcls.Call(πF, πTemp001, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µd = πTemp004
							// line 2873: timestr = '04:05:59' + (us and '.987001' or '')
							πF.SetLineno(2873)
							if πE = πg.CheckLocal(πF, µus, "us"); πE != nil {
								continue
							}
							πTemp010 = µus
							if πTemp011, πE = πg.IsTrue(πF, πTemp010); πE != nil {
								continue
							}
							if !πTemp011 {
								goto Label8
							}
							πTemp010 = πg.NewStr(".987001").ToObject()
						Label8:
							πTemp009 = πTemp010
							if πTemp007, πE = πg.IsTrue(πF, πTemp009); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label7
							}
							πTemp009 = ß.ToObject()
						Label7:
							if πTemp004, πE = πg.Add(πF, πg.NewStr("04:05:59").ToObject(), πTemp009); πE != nil {
								continue
							}
							µtimestr = πTemp004
							// line 2874: ofsstr = ofs is not None and d.tzname() or ''
							πF.SetLineno(2874)
							if πE = πg.CheckLocal(πF, µofs, "ofs"); πE != nil {
								continue
							}
							if πTemp012, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp010 = πg.GetBool(µofs != πTemp012).ToObject()
							πTemp009 = πTemp010
							if πTemp011, πE = πg.IsTrue(πF, πTemp009); πE != nil {
								continue
							}
							if !πTemp011 {
								goto Label10
							}
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetAttr(πF, µd, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp012, πE = πTemp010.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp009 = πTemp012
						Label10:
							πTemp004 = πTemp009
							if πTemp007, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label9
							}
							πTemp004 = ß.ToObject()
						Label9:
							µofsstr = πTemp004
							// line 2875: tailstr = timestr + ofsstr
							πF.SetLineno(2875)
							if πE = πg.CheckLocal(πF, µtimestr, "timestr"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µofsstr, "ofsstr"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, µtimestr, µofsstr); πE != nil {
								continue
							}
							µtailstr = πTemp004
							// line 2876: iso = d.isoformat()
							πF.SetLineno(2876)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µiso = πTemp009
							// line 2877: self.assertEqual(iso, datestr + 'T' + tailstr)
							πF.SetLineno(2877)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µiso, "iso"); πE != nil {
								continue
							}
							πTemp001[0] = µiso
							if πE = πg.CheckLocal(πF, µdatestr, "datestr"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Add(πF, µdatestr, ßT.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtailstr, "tailstr"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp009, µtailstr); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2878: self.assertEqual(iso, d.isoformat('T'))
							πF.SetLineno(2878)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µiso, "iso"); πE != nil {
								continue
							}
							πTemp001[0] = µiso
							πTemp013 = πF.MakeArgs(1)
							πTemp013[0] = ßT.ToObject()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp013, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							πTemp001[1] = πTemp009
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2879: self.assertEqual(d.isoformat('k'), datestr + 'k' + tailstr)
							πF.SetLineno(2879)
							πTemp001 = πF.MakeArgs(2)
							πTemp013 = πF.MakeArgs(1)
							πTemp013[0] = ßk.ToObject()
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µd, ßisoformat, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp013, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							πTemp001[0] = πTemp009
							if πE = πg.CheckLocal(πF, µdatestr, "datestr"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Add(πF, µdatestr, ßk.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtailstr, "tailstr"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp009, µtailstr); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2880: self.assertEqual(str(d), datestr + ' ' + tailstr)
							πF.SetLineno(2880)
							πTemp001 = πF.MakeArgs(2)
							πTemp013 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µd, "d"); πE != nil {
								continue
							}
							πTemp013[0] = µd
							if πTemp004, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp013, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp013)
							πTemp001[0] = πTemp009
							if πE = πg.CheckLocal(πF, µdatestr, "datestr"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Add(πF, µdatestr, πg.NewStr(" ").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtailstr, "tailstr"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp009, µtailstr); πE != nil {
								continue
							}
							πTemp001[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tzinfo_isoformat.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 2861: @unittest.expectedFailure
					πF.SetLineno(2861)
					πTemp006 = πF.MakeArgs(1)
					if πTemp017, πE = πg.ResolveClass(πF, πClass, nil, ßtest_tzinfo_isoformat); πE != nil {
						continue
					}
					πTemp006[0] = πTemp017
					if πTemp017, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp018, πE = πg.GetAttr(πF, πTemp017, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp017, πE = πTemp018.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_tzinfo_isoformat.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 2883: def test_replace(self):
					πF.SetLineno(2883)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("test_replace", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µz100 *πg.Object = πg.UnboundLocal; _ = µz100
						var µzm200 *πg.Object = πg.UnboundLocal; _ = µzm200
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µi *πg.Object = πg.UnboundLocal; _ = µi
						var µname *πg.Object = πg.UnboundLocal; _ = µname
						var µnewval *πg.Object = πg.UnboundLocal; _ = µnewval
						var µnewargs *πg.Object = πg.UnboundLocal; _ = µnewargs
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var µbase2 *πg.Object = πg.UnboundLocal; _ = µbase2
						var µbase3 *πg.Object = πg.UnboundLocal; _ = µbase3
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Dict
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							default: panic("unexpected function state")
							}
							// line 2884: cls = self.theclass
							πF.SetLineno(2884)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2885: z100 = FixedOffset(100, "+100")
							πF.SetLineno(2885)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(100).ToObject()
							πTemp002[1] = πg.NewStr("+100").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µz100 = πTemp003
							// line 2886: zm200 = FixedOffset(timedelta(minutes=-200), "-200")
							πF.SetLineno(2886)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.Neg(πF, πg.NewInt(200).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"minutes", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewStr("-200").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µzm200 = πTemp003
							// line 2887: args = [1, 2, 3, 4, 5, 6, 7, z100]
							πF.SetLineno(2887)
							πTemp002 = make([]*πg.Object, 8)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(3).ToObject()
							πTemp002[3] = πg.NewInt(4).ToObject()
							πTemp002[4] = πg.NewInt(5).ToObject()
							πTemp002[5] = πg.NewInt(6).ToObject()
							πTemp002[6] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µz100, "z100"); πE != nil {
								continue
							}
							πTemp002[7] = µz100
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µargs = πTemp001
							// line 2888: base = cls(*args)
							πF.SetLineno(2888)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Invoke(πF, µcls, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µbase = πTemp001
							// line 2889: self.assertEqual(base, base.replace())
							πF.SetLineno(2889)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							πTemp002[0] = µbase
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2891: i = 0
							πF.SetLineno(2891)
							µi = πg.NewInt(0).ToObject()
							πTemp002 = make([]*πg.Object, 8)
							πTemp005 = πg.NewTuple2(ßyear.ToObject(), πg.NewInt(2).ToObject()).ToObject()
							πTemp002[0] = πTemp005
							πTemp005 = πg.NewTuple2(ßmonth.ToObject(), πg.NewInt(3).ToObject()).ToObject()
							πTemp002[1] = πTemp005
							πTemp005 = πg.NewTuple2(ßday.ToObject(), πg.NewInt(4).ToObject()).ToObject()
							πTemp002[2] = πTemp005
							πTemp005 = πg.NewTuple2(ßhour.ToObject(), πg.NewInt(5).ToObject()).ToObject()
							πTemp002[3] = πTemp005
							πTemp005 = πg.NewTuple2(ßminute.ToObject(), πg.NewInt(6).ToObject()).ToObject()
							πTemp002[4] = πTemp005
							πTemp005 = πg.NewTuple2(ßsecond.ToObject(), πg.NewInt(7).ToObject()).ToObject()
							πTemp002[5] = πTemp005
							πTemp005 = πg.NewTuple2(ßmicrosecond.ToObject(), πg.NewInt(8).ToObject()).ToObject()
							πTemp002[6] = πTemp005
							if πE = πg.CheckLocal(πF, µzm200, "zm200"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(ßtzinfo.ToObject(), µzm200).ToObject()
							πTemp002[7] = πTemp005
							πTemp003 = πg.NewTuple(πTemp002...).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp008}}}, πTemp003); πE != nil {
									continue
								}
								µname = πTemp005
								µnewval = πTemp008
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 2900: newargs = args[:]
							πF.SetLineno(2900)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µargs, πTemp003); πE != nil {
								continue
							}
							µnewargs = πTemp005
							// line 2901: newargs[i] = newval
							πF.SetLineno(2901)
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µnewval); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp005 = µi
							if πE = πg.SetItem(πF, µnewargs, πTemp005, πTemp003); πE != nil {
								continue
							}
							// line 2902: expected = cls(*newargs)
							πF.SetLineno(2902)
							if πE = πg.CheckLocal(πF, µnewargs, "newargs"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Invoke(πF, µcls, nil, µnewargs, nil, nil); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 2903: got = base.replace(**{name: newval})
							πF.SetLineno(2903)
							πTemp009 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnewval, "newval"); πE != nil {
								continue
							}
							if πE = πTemp009.SetItem(πF, µname, µnewval); πE != nil {
								continue
							}
							πTemp003 = πTemp009.ToObject()
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.Invoke(πF, πTemp005, nil, nil, nil, πTemp003); πE != nil {
								continue
							}
							µgot = πTemp008
							// line 2904: self.assertEqual(expected, got)
							πF.SetLineno(2904)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp002[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp002[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2905: i += 1
							πF.SetLineno(2905)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µi = πTemp003
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2908: self.assertEqual(base.tzname(), "+100")
							πF.SetLineno(2908)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							πTemp002[1] = πg.NewStr("+100").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2909: base2 = base.replace(tzinfo=None)
							πF.SetLineno(2909)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µbase2 = πTemp003
							// line 2910: self.assertIsNone(base2.tzinfo)
							πF.SetLineno(2910)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µbase2, "base2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase2, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2911: self.assertIsNone(base2.tzname())
							πF.SetLineno(2911)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µbase2, "base2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase2, ßtzname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIsNone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2914: base3 = base2.replace(tzinfo=z100)
							πF.SetLineno(2914)
							if πE = πg.CheckLocal(πF, µz100, "z100"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µz100},
							}
							if πE = πg.CheckLocal(πF, µbase2, "base2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µbase3 = πTemp003
							// line 2915: self.assertEqual(base, base3)
							πF.SetLineno(2915)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							πTemp002[0] = µbase
							if πE = πg.CheckLocal(πF, µbase3, "base3"); πE != nil {
								continue
							}
							πTemp002[1] = µbase3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2916: self.assertIs(base.tzinfo, base3.tzinfo)
							πF.SetLineno(2916)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase3, "base3"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase3, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2919: base = cls(2000, 2, 29)
							πF.SetLineno(2919)
							πTemp002 = πF.MakeArgs(3)
							πTemp002[0] = πg.NewInt(2000).ToObject()
							πTemp002[1] = πg.NewInt(2).ToObject()
							πTemp002[2] = πg.NewInt(29).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µbase = πTemp001
							// line 2920: self.assertRaises(ValueError, base.replace, year=2001)
							πF.SetLineno(2920)
							πTemp002 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							πTemp004 = πg.KWArgs{
								{"year", πg.NewInt(2001).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 2882: @unittest.expectedFailure
					πF.SetLineno(2882)
					πTemp006 = πF.MakeArgs(1)
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßtest_replace); πE != nil {
						continue
					}
					πTemp006[0] = πTemp018
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp019, πE = πg.GetAttr(πF, πTemp018, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp018, πE = πTemp019.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_replace.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 2923: def test_more_astimezone(self):
					πF.SetLineno(2923)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("test_more_astimezone", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µfnone *πg.Object = πg.UnboundLocal; _ = µfnone
						var µf44m *πg.Object = πg.UnboundLocal; _ = µf44m
						var µfm5h *πg.Object = πg.UnboundLocal; _ = µfm5h
						var µdt *πg.Object = πg.UnboundLocal; _ = µdt
						var µx *πg.Object = πg.UnboundLocal; _ = µx
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 2925: fnone = FixedOffset(None, "None")
							πF.SetLineno(2925)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ßNone.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfnone = πTemp003
							// line 2926: f44m = FixedOffset(44, "44")
							πF.SetLineno(2926)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(44).ToObject()
							πTemp001[1] = ß44.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µf44m = πTemp003
							// line 2927: fm5h = FixedOffset(-timedelta(hours=5), "m300")
							πF.SetLineno(2927)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πg.KWArgs{
								{"hours", πg.NewInt(5).ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Neg(πF, πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ßm300.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfm5h = πTemp003
							// line 2929: dt = self.theclass.now(tz=f44m)
							πF.SetLineno(2929)
							if πE = πg.CheckLocal(πF, µf44m, "f44m"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tz", µf44m},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnow, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µdt = πTemp002
							// line 2930: self.assertIs(dt.tzinfo, f44m)
							πF.SetLineno(2930)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µf44m, "f44m"); πE != nil {
								continue
							}
							πTemp001[1] = µf44m
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2932: self.assertRaises(ValueError, dt.astimezone, fnone)
							πF.SetLineno(2932)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µfnone, "fnone"); πE != nil {
								continue
							}
							πTemp001[2] = µfnone
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2934: self.assertRaises(TypeError, dt.astimezone, None)
							πF.SetLineno(2934)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2936: x = dt.astimezone(dt.tzinfo)
							πF.SetLineno(2936)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µx = πTemp003
							// line 2937: self.assertIs(x.tzinfo, f44m)
							πF.SetLineno(2937)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µx, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µf44m, "f44m"); πE != nil {
								continue
							}
							πTemp001[1] = µf44m
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2938: self.assertEqual(x.date(), dt.date())
							πF.SetLineno(2938)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µx, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2939: self.assertEqual(x.time(), dt.time())
							πF.SetLineno(2939)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µx, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2942: got = dt.astimezone(fm5h)
							πF.SetLineno(2942)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfm5h, "fm5h"); πE != nil {
								continue
							}
							πTemp001[0] = µfm5h
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µgot = πTemp003
							// line 2943: self.assertIs(got.tzinfo, fm5h)
							πF.SetLineno(2943)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µfm5h, "fm5h"); πE != nil {
								continue
							}
							πTemp001[1] = µfm5h
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2944: self.assertEqual(got.utcoffset(), timedelta(hours=-5))
							πF.SetLineno(2944)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(5).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"hours", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2945: expected = dt - dt.utcoffset()  # in effect, convert to UTC
							πF.SetLineno(2945)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µdt, πTemp005); πE != nil {
								continue
							}
							µexpected = πTemp002
							// line 2946: expected += fm5h.utcoffset(dt)  # and from there to local time
							πF.SetLineno(2946)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							if πE = πg.CheckLocal(πF, µfm5h, "fm5h"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µfm5h, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.IAdd(πF, µexpected, πTemp003); πE != nil {
								continue
							}
							µexpected = πTemp002
							// line 2947: expected = expected.replace(tzinfo=fm5h) # and attach new tzinfo
							πF.SetLineno(2947)
							if πE = πg.CheckLocal(πF, µfm5h, "fm5h"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µfm5h},
							}
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 2948: self.assertEqual(got.date(), expected.date())
							πF.SetLineno(2948)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2949: self.assertEqual(got.time(), expected.time())
							πF.SetLineno(2949)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtime, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2950: self.assertEqual(got.timetz(), expected.timetz())
							πF.SetLineno(2950)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßtimetz, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtimetz, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2951: self.assertIs(got.tzinfo, expected.tzinfo)
							πF.SetLineno(2951)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µgot, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µexpected, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertIs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2952: self.assertEqual(got, expected)
							πF.SetLineno(2952)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp001[0] = µgot
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_more_astimezone.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 2922: @unittest.expectedFailure
					πF.SetLineno(2922)
					πTemp006 = πF.MakeArgs(1)
					if πTemp019, πE = πg.ResolveClass(πF, πClass, nil, ßtest_more_astimezone); πE != nil {
						continue
					}
					πTemp006[0] = πTemp019
					if πTemp019, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp020, πE = πg.GetAttr(πF, πTemp019, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp019, πE = πTemp020.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_more_astimezone.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 2955: def test_aware_subtract(self):
					πF.SetLineno(2955)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("test_aware_subtract", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µcls *πg.Object = πg.UnboundLocal; _ = µcls
						var µOperandDependentOffset *πg.Object = πg.UnboundLocal; _ = µOperandDependentOffset
						var µbase *πg.Object = πg.UnboundLocal; _ = µbase
						var µd0 *πg.Object = πg.UnboundLocal; _ = µd0
						var µd1 *πg.Object = πg.UnboundLocal; _ = µd1
						var µd2 *πg.Object = πg.UnboundLocal; _ = µd2
						var µx *πg.Object = πg.UnboundLocal; _ = µx
						var µy *πg.Object = πg.UnboundLocal; _ = µy
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 bool
						_ = πTemp012
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							case 7: goto Label7
							case 8: goto Label8
							case 10: goto Label10
							case 11: goto Label11
							default: panic("unexpected function state")
							}
							// line 2956: cls = self.theclass
							πF.SetLineno(2956)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							µcls = πTemp001
							// line 2960: class OperandDependentOffset(tzinfo):
							πF.SetLineno(2960)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp002 = πg.NewDict()
							if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
								continue
							}
							_, πE = πg.NewCode("OperandDependentOffset", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp002
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 2961: def utcoffset(self, t):
									πF.SetLineno(2961)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "t", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µt *πg.Object = πArgs[1]; _ = µt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 bool
										_ = πTemp003
										var πTemp004 πg.KWArgs
										_ = πTemp004
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.LT(πF, πTemp002, πg.NewInt(10).ToObject()); πE != nil {
												continue
											}
											if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
												continue
											}
											if πTemp003 {
												goto Label1
											}
											goto Label2
											// line 2962: if t.minute < 10:
											πF.SetLineno(2962)
										Label1:
											// line 2964: return timedelta(minutes=t.minute)
											πF.SetLineno(2964)
											if πE = πg.CheckLocal(πF, µt, "t"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µt, ßminute, nil); πE != nil {
												continue
											}
											πTemp004 = πg.KWArgs{
												{"minutes", πTemp001},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
												continue
											}
											πR = πTemp002
											continue
											goto Label3
										Label2:
											// line 2967: return timedelta(minutes=59)
											πF.SetLineno(2967)
											πTemp004 = πg.KWArgs{
												{"minutes", πg.NewInt(59).ToObject()},
											}
											if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
												continue
											}
											πR = πTemp002
											continue
											goto Label3
										Label3:
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("OperandDependentOffset").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp002.ToObject()}, nil); πE != nil {
								continue
							}
							µOperandDependentOffset = πTemp005
							// line 2969: base = cls(8, 9, 10, 11, 12, 13, 14, tzinfo=OperandDependentOffset())
							πF.SetLineno(2969)
							πTemp003 = πF.MakeArgs(7)
							πTemp003[0] = πg.NewInt(8).ToObject()
							πTemp003[1] = πg.NewInt(9).ToObject()
							πTemp003[2] = πg.NewInt(10).ToObject()
							πTemp003[3] = πg.NewInt(11).ToObject()
							πTemp003[4] = πg.NewInt(12).ToObject()
							πTemp003[5] = πg.NewInt(13).ToObject()
							πTemp003[6] = πg.NewInt(14).ToObject()
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µbase = πTemp001
							// line 2970: d0 = base.replace(minute=3)
							πF.SetLineno(2970)
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(3).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd0 = πTemp004
							// line 2971: d1 = base.replace(minute=9)
							πF.SetLineno(2971)
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(9).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd1 = πTemp004
							// line 2972: d2 = base.replace(minute=11)
							πF.SetLineno(2972)
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(11).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd2 = πTemp004
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µx = πTemp004
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp004, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp008 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp005, πE = πg.Next(πF, πTemp004); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µy = πTemp005
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 2975: got = x - y
							πF.SetLineno(2975)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, µx, µy); πE != nil {
								continue
							}
							µgot = πTemp005
							// line 2976: expected = timedelta(minutes=x.minute - y.minute)
							πF.SetLineno(2976)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetAttr(πF, µx, ßminute, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, µy, ßminute, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, πTemp010, πTemp011); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minutes", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µexpected = πTemp010
							// line 2977: self.assertEqual(got, expected)
							πF.SetLineno(2977)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp003[0] = µgot
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2981: base = cls(8, 9, 10, 11, 12, 13, 14)
							πF.SetLineno(2981)
							πTemp003 = πF.MakeArgs(7)
							πTemp003[0] = πg.NewInt(8).ToObject()
							πTemp003[1] = πg.NewInt(9).ToObject()
							πTemp003[2] = πg.NewInt(10).ToObject()
							πTemp003[3] = πg.NewInt(11).ToObject()
							πTemp003[4] = πg.NewInt(12).ToObject()
							πTemp003[5] = πg.NewInt(13).ToObject()
							πTemp003[6] = πg.NewInt(14).ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp001, πE = µcls.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µbase = πTemp001
							// line 2982: d0 = base.replace(minute=3, tzinfo=OperandDependentOffset())
							πF.SetLineno(2982)
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(3).ToObject()},
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd0 = πTemp004
							// line 2983: d1 = base.replace(minute=9, tzinfo=OperandDependentOffset())
							πF.SetLineno(2983)
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(9).ToObject()},
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd1 = πTemp004
							// line 2984: d2 = base.replace(minute=11, tzinfo=OperandDependentOffset())
							πF.SetLineno(2984)
							if πE = πg.CheckLocal(πF, µOperandDependentOffset, "OperandDependentOffset"); πE != nil {
								continue
							}
							if πTemp001, πE = µOperandDependentOffset.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minute", πg.NewInt(11).ToObject()},
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µd2 = πTemp004
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(8)
							πTemp007 = false
						Label7:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label9
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µx = πTemp004
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(7)            
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple3(µd0, µd1, µd2).ToObject()
							if πTemp004, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(11)
							πTemp008 = false
						Label10:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label12
							}
							if πTemp005, πE = πg.Next(πF, πTemp004); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µy = πTemp005
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(10)            
							// line 2987: got = x - y
							πF.SetLineno(2987)
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, µx, µy); πE != nil {
								continue
							}
							µgot = πTemp005
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							πTemp011 = πg.GetBool(µx == µd0).ToObject()
							πTemp010 = πTemp011
							if πTemp012, πE = πg.IsTrue(πF, πTemp010); πE != nil {
								continue
							}
							if πTemp012 {
								goto Label14
							}
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							πTemp011 = πg.GetBool(µx == µd1).ToObject()
							πTemp010 = πTemp011
						Label14:
							πTemp005 = πTemp010
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if !πTemp009 {
								goto Label13
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd0, "d0"); πE != nil {
								continue
							}
							πTemp011 = πg.GetBool(µy == µd0).ToObject()
							πTemp010 = πTemp011
							if πTemp012, πE = πg.IsTrue(πF, πTemp010); πE != nil {
								continue
							}
							if πTemp012 {
								goto Label15
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd1, "d1"); πE != nil {
								continue
							}
							πTemp011 = πg.GetBool(µy == µd1).ToObject()
							πTemp010 = πTemp011
						Label15:
							πTemp005 = πTemp010
						Label13:
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label16
							}
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µx == µy).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if !πTemp009 {
								goto Label17
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µy == µd2).ToObject()
						Label17:
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label18
							}
							if πE = πg.CheckLocal(πF, µx, "x"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µx == µd2).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label19
							}
							goto Label20
							// line 2988: if (x is d0 or x is d1) and (y is d0 or y is d1):
							πF.SetLineno(2988)
						Label16:
							// line 2989: expected = timedelta(0)
							πF.SetLineno(2989)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewInt(0).ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µexpected = πTemp010
							goto Label21
							// line 2990: elif x is y is d2:
							πF.SetLineno(2990)
						Label18:
							// line 2991: expected = timedelta(0)
							πF.SetLineno(2991)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewInt(0).ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µexpected = πTemp010
							goto Label21
							// line 2992: elif x is d2:
							πF.SetLineno(2992)
						Label19:
							// line 2993: expected = timedelta(minutes=(11-59)-0)
							πF.SetLineno(2993)
							if πTemp010, πE = πg.Sub(πF, πg.NewInt(11).ToObject(), πg.NewInt(59).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, πTemp010, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minutes", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µexpected = πTemp010
							goto Label21
						Label20:
							// line 2995: assert y is d2
							πF.SetLineno(2995)
							if πE = πg.CheckLocal(πF, µy, "y"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µd2, "d2"); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µy == µd2).ToObject()
							if πE = πg.Assert(πF, πTemp005, nil); πE != nil {
								continue
							}
							// line 2996: expected = timedelta(minutes=0-(11-59))
							πF.SetLineno(2996)
							if πTemp010, πE = πg.Sub(πF, πg.NewInt(11).ToObject(), πg.NewInt(59).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, πg.NewInt(0).ToObject(), πTemp010); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"minutes", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µexpected = πTemp010
							goto Label21
						Label21:
							// line 2997: self.assertEqual(got, expected)
							πF.SetLineno(2997)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp003[0] = µgot
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp003[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							continue
						Label11:
							if πE != nil || πR != nil {
								continue
							}
						Label12:
							continue
						Label8:
							if πE != nil || πR != nil {
								continue
							}
						Label9:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_aware_subtract.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 2954: @unittest.expectedFailure
					πF.SetLineno(2954)
					πTemp006 = πF.MakeArgs(1)
					if πTemp020, πE = πg.ResolveClass(πF, πClass, nil, ßtest_aware_subtract); πE != nil {
						continue
					}
					πTemp006[0] = πTemp020
					if πTemp020, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp021, πE = πg.GetAttr(πF, πTemp020, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp020, πE = πTemp021.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_aware_subtract.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 3000: def test_mixed_compare(self):
					πF.SetLineno(3000)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp020 = πg.NewFunction(πg.NewCode("test_mixed_compare", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µt1 *πg.Object = πg.UnboundLocal; _ = µt1
						var µt2 *πg.Object = πg.UnboundLocal; _ = µt2
						var µVaries *πg.Object = πg.UnboundLocal; _ = µVaries
						var µv *πg.Object = πg.UnboundLocal; _ = µv
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []πg.Param
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3001: t1 = datetime(1, 2, 3, 4, 5, 6, 7)
							πF.SetLineno(3001)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(6).ToObject()
							πTemp001[6] = πg.NewInt(7).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt1 = πTemp003
							// line 3002: t2 = datetime(1, 2, 3, 4, 5, 6, 7)
							πF.SetLineno(3002)
							πTemp001 = πF.MakeArgs(7)
							πTemp001[0] = πg.NewInt(1).ToObject()
							πTemp001[1] = πg.NewInt(2).ToObject()
							πTemp001[2] = πg.NewInt(3).ToObject()
							πTemp001[3] = πg.NewInt(4).ToObject()
							πTemp001[4] = πg.NewInt(5).ToObject()
							πTemp001[5] = πg.NewInt(6).ToObject()
							πTemp001[6] = πg.NewInt(7).ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µt2 = πTemp003
							// line 3003: self.assertEqual(t1, t2)
							πF.SetLineno(3003)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3004: t2 = t2.replace(tzinfo=None)
							πF.SetLineno(3004)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 3005: self.assertEqual(t1, t2)
							πF.SetLineno(3005)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3006: t2 = t2.replace(tzinfo=FixedOffset(None, ""))
							πF.SetLineno(3006)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 3007: self.assertEqual(t1, t2)
							πF.SetLineno(3007)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3008: t2 = t2.replace(tzinfo=FixedOffset(0, ""))
							πF.SetLineno(3008)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 3009: self.assertRaises(TypeError, lambda: t1 == t2)
							πF.SetLineno(3009)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp005 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3009: self.assertRaises(TypeError, lambda: t1 == t2)
									πF.SetLineno(3009)
									if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Eq(πF, µt1, µt2); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3012: class Varies(tzinfo):
							πF.SetLineno(3012)
							πTemp001 = make([]*πg.Object, 1)
							if πTemp007, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp001[0] = πTemp007
							πTemp006 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("Varies", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp006
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3013: def __init__(self):
									πF.SetLineno(3013)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var πTemp001 πg.KWArgs
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3014: self.offset = timedelta(minutes=22)
											πF.SetLineno(3014)
											πTemp001 = πg.KWArgs{
												{"minutes", πg.NewInt(22).ToObject()},
											}
											if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßoffset, πTemp002); πE != nil {
												continue
											}
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 3015: def utcoffset(self, t):
									πF.SetLineno(3015)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "t", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µt *πg.Object = πArgs[1]; _ = µt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 πg.KWArgs
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πTemp004 *πg.Object
										_ = πTemp004
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3016: self.offset += timedelta(minutes=1)
											πF.SetLineno(3016)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßoffset, nil); πE != nil {
												continue
											}
											πTemp002 = πg.KWArgs{
												{"minutes", πg.NewInt(1).ToObject()},
											}
											if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
												continue
											}
											if πTemp004, πE = πTemp003.Call(πF, nil, πTemp002); πE != nil {
												continue
											}
											if πTemp003, πE = πg.IAdd(πF, πTemp001, πTemp004); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µself, ßoffset, πTemp003); πE != nil {
												continue
											}
											// line 3017: return self.offset
											πF.SetLineno(3017)
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßoffset, nil); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp007, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("Varies").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp006.ToObject()}, nil); πE != nil {
								continue
							}
							µVaries = πTemp007
							// line 3019: v = Varies()
							πF.SetLineno(3019)
							if πE = πg.CheckLocal(πF, µVaries, "Varies"); πE != nil {
								continue
							}
							if πTemp002, πE = µVaries.Call(πF, nil, nil); πE != nil {
								continue
							}
							µv = πTemp002
							// line 3020: t1 = t2.replace(tzinfo=v)
							πF.SetLineno(3020)
							if πE = πg.CheckLocal(πF, µv, "v"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µv},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt1 = πTemp003
							// line 3021: t2 = t2.replace(tzinfo=v)
							πF.SetLineno(3021)
							if πE = πg.CheckLocal(πF, µv, "v"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µv},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 3022: self.assertEqual(t1.utcoffset(), timedelta(minutes=23))
							πF.SetLineno(3022)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt1, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(23).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3023: self.assertEqual(t2.utcoffset(), timedelta(minutes=24))
							πF.SetLineno(3023)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp004 = πg.KWArgs{
								{"minutes", πg.NewInt(24).ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3024: self.assertEqual(t1, t2)
							πF.SetLineno(3024)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							πTemp001[0] = µt1
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							πTemp001[1] = µt2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3027: t2 = t2.replace(tzinfo=Varies())
							πF.SetLineno(3027)
							if πE = πg.CheckLocal(πF, µVaries, "Varies"); πE != nil {
								continue
							}
							if πTemp002, πE = µVaries.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µt2, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µt2 = πTemp003
							// line 3028: self.assertTrue(t1 < t2)  # t1's offset counter still going up
							πF.SetLineno(3028)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µt1, "t1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µt2, "t2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LT(πF, µt1, µt2); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_mixed_compare.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 2999: @unittest.expectedFailure
					πF.SetLineno(2999)
					πTemp006 = πF.MakeArgs(1)
					if πTemp021, πE = πg.ResolveClass(πF, πClass, nil, ßtest_mixed_compare); πE != nil {
						continue
					}
					πTemp006[0] = πTemp021
					if πTemp021, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp022, πE = πg.GetAttr(πF, πTemp021, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp021, πE = πTemp022.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_mixed_compare.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 3031: def test_subclass_datetimetz(self):
					πF.SetLineno(3031)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp021 = πg.NewFunction(πg.NewCode("test_subclass_datetimetz", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µC *πg.Object = πg.UnboundLocal; _ = µC
						var µargs *πg.Object = πg.UnboundLocal; _ = µargs
						var µdt1 *πg.Object = πg.UnboundLocal; _ = µdt1
						var µdt2 *πg.Object = πg.UnboundLocal; _ = µdt2
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3033: class C(self.theclass):
							πF.SetLineno(3033)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("C", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3034: theAnswer = 42
									πF.SetLineno(3034)
									if πE = πClass.SetItem(πF, ßtheAnswer.ToObject(), πg.NewInt(42).ToObject()); πE != nil {
										continue
									}
									// line 3036: def __new__(cls, *args, **kws):
									πF.SetLineno(3036)
									πTemp002 = make([]πg.Param, 1)
									πTemp002[0] = πg.Param{Name: "cls", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("__new__", "build/src/__python__/test/test_datetime.py", πTemp002, πg.CodeFlagVarArg | πg.CodeFlagKWArg, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µcls *πg.Object = πArgs[0]; _ = µcls
										var µargs *πg.Object = πArgs[1]; _ = µargs
										var µkws *πg.Object = πArgs[2]; _ = µkws
										var µtemp *πg.Object = πg.UnboundLocal; _ = µtemp
										var µextra *πg.Object = πg.UnboundLocal; _ = µextra
										var µresult *πg.Object = πg.UnboundLocal; _ = µresult
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 []*πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3037: temp = kws.copy()
											πF.SetLineno(3037)
											if πE = πg.CheckLocal(πF, µkws, "kws"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µkws, ßcopy, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
												continue
											}
											µtemp = πTemp002
											// line 3038: extra = temp.pop('extra')
											πF.SetLineno(3038)
											πTemp003 = πF.MakeArgs(1)
											πTemp003[0] = ßextra.ToObject()
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µtemp, ßpop, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µextra = πTemp002
											// line 3039: result = self.theclass.__new__(cls, *args, **temp)
											πF.SetLineno(3039)
											πTemp003 = πF.MakeArgs(1)
											if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
												continue
											}
											πTemp003[0] = µcls
											if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µtemp, "temp"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp001, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, πTemp001, ß__new__, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Invoke(πF, πTemp002, πTemp003, µargs, nil, µtemp); πE != nil {
												continue
											}
											πF.FreeArgs(πTemp003)
											µresult = πTemp001
											// line 3040: result.extra = extra
											πF.SetLineno(3040)
											if πE = πg.CheckLocal(πF, µextra, "extra"); πE != nil {
												continue
											}
											if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µextra); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											if πE = πg.SetAttr(πF, µresult, ßextra, πTemp001); πE != nil {
												continue
											}
											// line 3041: return result
											πF.SetLineno(3041)
											if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
												continue
											}
											πR = µresult
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ß__new__.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 3043: def newmeth(self, start):
									πF.SetLineno(3043)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "start", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("newmeth", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µstart *πg.Object = πArgs[1]; _ = µstart
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πTemp003 *πg.Object
										_ = πTemp003
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3044: return start + self.hour + self.year
											πF.SetLineno(3044)
											if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßhour, nil); πE != nil {
												continue
											}
											if πTemp002, πE = πg.Add(πF, µstart, πTemp003); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp003, πE = πg.GetAttr(πF, µself, ßyear, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Add(πF, πTemp002, πTemp003); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßnewmeth.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("C").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µC = πTemp005
							// line 3046: args = 2002, 12, 31, 4, 5, 6, 500, FixedOffset(-300, "EST", 1)
							πF.SetLineno(3046)
							πTemp003 = make([]*πg.Object, 8)
							πTemp003[0] = πg.NewInt(2002).ToObject()
							πTemp003[1] = πg.NewInt(12).ToObject()
							πTemp003[2] = πg.NewInt(31).ToObject()
							πTemp003[3] = πg.NewInt(4).ToObject()
							πTemp003[4] = πg.NewInt(5).ToObject()
							πTemp003[5] = πg.NewInt(6).ToObject()
							πTemp003[6] = πg.NewInt(500).ToObject()
							πTemp006 = πF.MakeArgs(3)
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(300).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp004
							πTemp006[1] = ßEST.ToObject()
							πTemp006[2] = πg.NewInt(1).ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[7] = πTemp005
							πTemp002 = πg.NewTuple(πTemp003...).ToObject()
							µargs = πTemp002
							// line 3048: dt1 = self.theclass(*args)
							πF.SetLineno(3048)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, πTemp002, nil, µargs, nil, nil); πE != nil {
								continue
							}
							µdt1 = πTemp004
							// line 3049: dt2 = C(*args, **{'extra': 7})
							πF.SetLineno(3049)
							if πE = πg.CheckLocal(πF, µargs, "args"); πE != nil {
								continue
							}
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ßextra.ToObject(), πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Invoke(πF, µC, nil, µargs, nil, πTemp002); πE != nil {
								continue
							}
							µdt2 = πTemp004
							// line 3051: self.assertEqual(dt2.__class__, C)
							πF.SetLineno(3051)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ß__class__, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µC, "C"); πE != nil {
								continue
							}
							πTemp003[1] = µC
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3052: self.assertEqual(dt2.theAnswer, 42)
							πF.SetLineno(3052)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßtheAnswer, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(42).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3053: self.assertEqual(dt2.extra, 7)
							πF.SetLineno(3053)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßextra, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp003[1] = πg.NewInt(7).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3054: self.assertEqual(dt1.utcoffset(), dt2.utcoffset())
							πF.SetLineno(3054)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt1, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3055: self.assertEqual(dt2.newmeth(-7), dt1.hour + dt1.year - 7)
							πF.SetLineno(3055)
							πTemp003 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt2, "dt2"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt2, ßnewmeth, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µdt1, ßhour, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt1, "dt1"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µdt1, ßyear, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp004, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_subclass_datetimetz.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 3030: @unittest.expectedFailure
					πF.SetLineno(3030)
					πTemp006 = πF.MakeArgs(1)
					if πTemp022, πE = πg.ResolveClass(πF, πClass, nil, ßtest_subclass_datetimetz); πE != nil {
						continue
					}
					πTemp006[0] = πTemp022
					if πTemp022, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp023, πE = πg.GetAttr(πF, πTemp022, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp022, πE = πTemp023.Call(πF, πTemp006, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp006)
					if πE = πClass.SetItem(πF, ßtest_subclass_datetimetz.ToObject(), πTemp022); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp003, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp003 == nil {
				πTemp003 = πg.TypeType.ToObject()
			}
			if πTemp004, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("TestDateTimeTZ").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestDateTimeTZ.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3059: def first_sunday_on_or_after(dt):
			πF.SetLineno(3059)
			πTemp012 = make([]πg.Param, 1)
			πTemp012[0] = πg.Param{Name: "dt", Def: nil}
			πTemp001 = πg.NewFunction(πg.NewCode("first_sunday_on_or_after", "build/src/__python__/test/test_datetime.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µdt *πg.Object = πArgs[0]; _ = µdt
				var µdays_to_go *πg.Object = πg.UnboundLocal; _ = µdays_to_go
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 bool
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πR *πg.Object; _ = πR
				var πE *πg.BaseException; _ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3060: days_to_go = 6 - dt.weekday()
					πF.SetLineno(3060)
					if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, µdt, ßweekday, nil); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Sub(πF, πg.NewInt(6).ToObject(), πTemp003); πE != nil {
						continue
					}
					µdays_to_go = πTemp001
					if πE = πg.CheckLocal(πF, µdays_to_go, "days_to_go"); πE != nil {
						continue
					}
					if πTemp004, πE = πg.IsTrue(πF, µdays_to_go); πE != nil {
						continue
					}
					if πTemp004 {
						goto Label1
					}
					goto Label2
					// line 3061: if days_to_go:
					πF.SetLineno(3061)
				Label1:
					// line 3062: dt += timedelta(days_to_go)
					πF.SetLineno(3062)
					if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
						continue
					}
					πTemp005 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µdays_to_go, "days_to_go"); πE != nil {
						continue
					}
					πTemp005[0] = µdays_to_go
					if πTemp001, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πTemp001, πE = πg.IAdd(πF, µdt, πTemp002); πE != nil {
						continue
					}
					µdt = πTemp001
					goto Label2
				Label2:
					// line 3063: return dt
					πF.SetLineno(3063)
					if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
						continue
					}
					πR = µdt
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßfirst_sunday_on_or_after.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 3065: ZERO = timedelta(0)
			πF.SetLineno(3065)
			πTemp002 = πF.MakeArgs(1)
			πTemp002[0] = πg.NewInt(0).ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßZERO.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3066: HOUR = timedelta(hours=1)
			πF.SetLineno(3066)
			πTemp013 = πg.KWArgs{
				{"hours", πg.NewInt(1).ToObject()},
			}
			if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, nil, πTemp013); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßHOUR.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3067: DAY = timedelta(days=1)
			πF.SetLineno(3067)
			πTemp013 = πg.KWArgs{
				{"days", πg.NewInt(1).ToObject()},
			}
			if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, nil, πTemp013); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßDAY.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3069: DSTSTART = datetime(1, 4, 1, 2)
			πF.SetLineno(3069)
			πTemp002 = πF.MakeArgs(4)
			πTemp002[0] = πg.NewInt(1).ToObject()
			πTemp002[1] = πg.NewInt(4).ToObject()
			πTemp002[2] = πg.NewInt(1).ToObject()
			πTemp002[3] = πg.NewInt(2).ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßDSTSTART.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3074: DSTEND = datetime(1, 10, 25, 1)
			πF.SetLineno(3074)
			πTemp002 = πF.MakeArgs(4)
			πTemp002[0] = πg.NewInt(1).ToObject()
			πTemp002[1] = πg.NewInt(10).ToObject()
			πTemp002[2] = πg.NewInt(25).ToObject()
			πTemp002[3] = πg.NewInt(1).ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßDSTEND.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3076: class USTimeZone(tzinfo):
			πF.SetLineno(3076)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
				continue
			}
			πTemp002[0] = πTemp005
			πTemp010 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("USTimeZone", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3078: def __init__(self, hours, reprname, stdname, dstname):
					πF.SetLineno(3078)
					πTemp002 = make([]πg.Param, 5)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "hours", Def: nil}
					πTemp002[2] = πg.Param{Name: "reprname", Def: nil}
					πTemp002[3] = πg.Param{Name: "stdname", Def: nil}
					πTemp002[4] = πg.Param{Name: "dstname", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µhours *πg.Object = πArgs[1]; _ = µhours
						var µreprname *πg.Object = πArgs[2]; _ = µreprname
						var µstdname *πg.Object = πArgs[3]; _ = µstdname
						var µdstname *πg.Object = πArgs[4]; _ = µdstname
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3079: self.stdoffset = timedelta(hours=hours)
							πF.SetLineno(3079)
							if πE = πg.CheckLocal(πF, µhours, "hours"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"hours", µhours},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstdoffset, πTemp002); πE != nil {
								continue
							}
							// line 3080: self.reprname = reprname
							πF.SetLineno(3080)
							if πE = πg.CheckLocal(πF, µreprname, "reprname"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µreprname); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßreprname, πTemp002); πE != nil {
								continue
							}
							// line 3081: self.stdname = stdname
							πF.SetLineno(3081)
							if πE = πg.CheckLocal(πF, µstdname, "stdname"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µstdname); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstdname, πTemp002); πE != nil {
								continue
							}
							// line 3082: self.dstname = dstname
							πF.SetLineno(3082)
							if πE = πg.CheckLocal(πF, µdstname, "dstname"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µdstname); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdstname, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3084: def __repr__(self):
					πF.SetLineno(3084)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("__repr__", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3085: return self.reprname
							πF.SetLineno(3085)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßreprname, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__repr__.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3087: def tzname(self, dt):
					πF.SetLineno(3087)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "dt", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("tzname", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 3088: if self.dst(dt):
							πF.SetLineno(3088)
						Label1:
							// line 3089: return self.dstname
							πF.SetLineno(3089)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdstname, nil); πE != nil {
								continue
							}
							πR = πTemp002
							continue
							goto Label3
						Label2:
							// line 3091: return self.stdname
							πF.SetLineno(3091)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßstdname, nil); πE != nil {
								continue
							}
							πR = πTemp002
							continue
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtzname.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 3093: def utcoffset(self, dt):
					πF.SetLineno(3093)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "dt", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3094: return self.stdoffset + self.dst(dt)
							πF.SetLineno(3094)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßstdoffset, nil); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp003[0] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßdst, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Add(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 3096: def dst(self, dt):
					πF.SetLineno(3096)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "dt", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var µstart *πg.Object = πg.UnboundLocal; _ = µstart
						var µend *πg.Object = πg.UnboundLocal; _ = µend
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µdt == πTemp004).ToObject()
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µdt, ßtzinfo, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp004 == πTemp005).ToObject()
							πTemp001 = πTemp003
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 3097: if dt is None or dt.tzinfo is None:
							πF.SetLineno(3097)
						Label2:
							// line 3100: return ZERO
							πF.SetLineno(3100)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßZERO); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label3
						Label3:
							// line 3101: assert dt.tzinfo is self
							πF.SetLineno(3101)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ßtzinfo, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003 == µself).ToObject()
							if πE = πg.Assert(πF, πTemp001, nil); πE != nil {
								continue
							}
							// line 3104: start = first_sunday_on_or_after(DSTSTART.replace(year=dt.year))
							πF.SetLineno(3104)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"year", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßDSTSTART); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßfirst_sunday_on_or_after); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µstart = πTemp003
							// line 3105: assert start.weekday() == 6 and start.month == 4 and start.day <= 7
							πF.SetLineno(3105)
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µstart, ßweekday, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp005, πg.NewInt(6).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µstart, ßmonth, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp004, πg.NewInt(4).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µstart, ßday, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.LE(πF, πTemp004, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
						Label4:
							if πE = πg.Assert(πF, πTemp001, nil); πE != nil {
								continue
							}
							// line 3108: end = first_sunday_on_or_after(DSTEND.replace(year=dt.year))
							πF.SetLineno(3108)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µdt, ßyear, nil); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"year", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßDSTEND); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßfirst_sunday_on_or_after); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µend = πTemp003
							// line 3109: assert end.weekday() == 6 and end.month == 10 and end.day >= 25
							πF.SetLineno(3109)
							if πE = πg.CheckLocal(πF, µend, "end"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µend, ßweekday, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp005, πg.NewInt(6).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label5
							}
							if πE = πg.CheckLocal(πF, µend, "end"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µend, ßmonth, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp004, πg.NewInt(10).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label5
							}
							if πE = πg.CheckLocal(πF, µend, "end"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µend, ßday, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GE(πF, πTemp004, πg.NewInt(25).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
						Label5:
							if πE = πg.Assert(πF, πTemp001, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µdt, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, πTemp007); πE != nil {
								continue
							}
							if πTemp001, πE = πg.LE(πF, µstart, πTemp004); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µend, "end"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.LT(πF, πTemp004, µend); πE != nil {
								continue
							}
						Label6:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label7
							}
							goto Label8
							// line 3113: if start <= dt.replace(tzinfo=None) < end:
							πF.SetLineno(3113)
						Label7:
							// line 3114: return HOUR
							πF.SetLineno(3114)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label9
						Label8:
							// line 3116: return ZERO
							πF.SetLineno(3116)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßZERO); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label9
						Label9:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp006); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp004, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp004 == nil {
				πTemp004 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("USTimeZone").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßUSTimeZone.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 3118: Eastern  = USTimeZone(-5, "Eastern",  "EST", "EDT")
			πF.SetLineno(3118)
			πTemp002 = πF.MakeArgs(4)
			if πTemp003, πE = πg.Neg(πF, πg.NewInt(5).ToObject()); πE != nil {
				continue
			}
			πTemp002[0] = πTemp003
			πTemp002[1] = ßEastern.ToObject()
			πTemp002[2] = ßEST.ToObject()
			πTemp002[3] = ßEDT.ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßUSTimeZone); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßEastern.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3119: Central  = USTimeZone(-6, "Central",  "CST", "CDT")
			πF.SetLineno(3119)
			πTemp002 = πF.MakeArgs(4)
			if πTemp003, πE = πg.Neg(πF, πg.NewInt(6).ToObject()); πE != nil {
				continue
			}
			πTemp002[0] = πTemp003
			πTemp002[1] = ßCentral.ToObject()
			πTemp002[2] = ßCST.ToObject()
			πTemp002[3] = ßCDT.ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßUSTimeZone); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßCentral.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3120: Mountain = USTimeZone(-7, "Mountain", "MST", "MDT")
			πF.SetLineno(3120)
			πTemp002 = πF.MakeArgs(4)
			if πTemp003, πE = πg.Neg(πF, πg.NewInt(7).ToObject()); πE != nil {
				continue
			}
			πTemp002[0] = πTemp003
			πTemp002[1] = ßMountain.ToObject()
			πTemp002[2] = ßMST.ToObject()
			πTemp002[3] = ßMDT.ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßUSTimeZone); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßMountain.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3121: Pacific  = USTimeZone(-8, "Pacific",  "PST", "PDT")
			πF.SetLineno(3121)
			πTemp002 = πF.MakeArgs(4)
			if πTemp003, πE = πg.Neg(πF, πg.NewInt(8).ToObject()); πE != nil {
				continue
			}
			πTemp002[0] = πTemp003
			πTemp002[1] = ßPacific.ToObject()
			πTemp002[2] = ßPST.ToObject()
			πTemp002[3] = ßPDT.ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßUSTimeZone); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßPacific.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3122: utc_real = FixedOffset(0, "UTC", 0)
			πF.SetLineno(3122)
			πTemp002 = πF.MakeArgs(3)
			πTemp002[0] = πg.NewInt(0).ToObject()
			πTemp002[1] = ßUTC.ToObject()
			πTemp002[2] = πg.NewInt(0).ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßutc_real.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3125: utc_fake = FixedOffset(-12*60, "UTCfake", 0)
			πF.SetLineno(3125)
			πTemp002 = πF.MakeArgs(3)
			if πTemp004, πE = πg.Neg(πF, πg.NewInt(12).ToObject()); πE != nil {
				continue
			}
			if πTemp003, πE = πg.Mul(πF, πTemp004, πg.NewInt(60).ToObject()); πE != nil {
				continue
			}
			πTemp002[0] = πTemp003
			πTemp002[1] = ßUTCfake.ToObject()
			πTemp002[2] = πg.NewInt(0).ToObject()
			if πTemp003, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
				continue
			}
			if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßutc_fake.ToObject(), πTemp004); πE != nil {
				continue
			}
			// line 3127: class TestTimezoneConversions(unittest.TestCase):
			πF.SetLineno(3127)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp010 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TestTimezoneConversions", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 []πg.Param
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3129: dston = datetime(2002, 4, 7, 2)
					πF.SetLineno(3129)
					πTemp001 = πF.MakeArgs(4)
					πTemp001[0] = πg.NewInt(2002).ToObject()
					πTemp001[1] = πg.NewInt(4).ToObject()
					πTemp001[2] = πg.NewInt(7).ToObject()
					πTemp001[3] = πg.NewInt(2).ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßdatetime); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πE = πClass.SetItem(πF, ßdston.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3130: dstoff = datetime(2002, 10, 27, 1)
					πF.SetLineno(3130)
					πTemp001 = πF.MakeArgs(4)
					πTemp001[0] = πg.NewInt(2002).ToObject()
					πTemp001[1] = πg.NewInt(10).ToObject()
					πTemp001[2] = πg.NewInt(27).ToObject()
					πTemp001[3] = πg.NewInt(1).ToObject()
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßdatetime); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πE = πClass.SetItem(πF, ßdstoff.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3132: theclass = datetime
					πF.SetLineno(3132)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßdatetime); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßtheclass.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3135: def checkinside(self, dt, tz, utc, dston, dstoff):
					πF.SetLineno(3135)
					πTemp004 = make([]πg.Param, 6)
					πTemp004[0] = πg.Param{Name: "self", Def: nil}
					πTemp004[1] = πg.Param{Name: "dt", Def: nil}
					πTemp004[2] = πg.Param{Name: "tz", Def: nil}
					πTemp004[3] = πg.Param{Name: "utc", Def: nil}
					πTemp004[4] = πg.Param{Name: "dston", Def: nil}
					πTemp004[5] = πg.Param{Name: "dstoff", Def: nil}
					πTemp002 = πg.NewFunction(πg.NewCode("checkinside", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var µtz *πg.Object = πArgs[2]; _ = µtz
						var µutc *πg.Object = πArgs[3]; _ = µutc
						var µdston *πg.Object = πArgs[4]; _ = µdston
						var µdstoff *πg.Object = πArgs[5]; _ = µdstoff
						var µasutc *πg.Object = πg.UnboundLocal; _ = µasutc
						var µthere_and_back *πg.Object = πg.UnboundLocal; _ = µthere_and_back
						var µnexthour_utc *πg.Object = πg.UnboundLocal; _ = µnexthour_utc
						var µnexthour_tz *πg.Object = πg.UnboundLocal; _ = µnexthour_tz
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3136: self.assertEqual(dt.dst(), HOUR)
							πF.SetLineno(3136)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3139: self.assertEqual(dt.astimezone(tz), dt)
							πF.SetLineno(3139)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp004[0] = µtz
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[1] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3141: asutc = dt.astimezone(utc)
							πF.SetLineno(3141)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp001[0] = µutc
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µasutc = πTemp003
							// line 3142: there_and_back = asutc.astimezone(tz)
							πF.SetLineno(3142)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp001[0] = µtz
							if πE = πg.CheckLocal(πF, µasutc, "asutc"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µasutc, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µthere_and_back = πTemp003
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µdt, ßdate, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdston, "dston"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µdston, ßdate, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp007, πTemp008); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µdt, ßhour, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp006, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
						Label1:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label2
							}
							goto Label3
							// line 3152: if dt.date() == dston.date() and dt.hour == 2:
							πF.SetLineno(3152)
						Label2:
							// line 3155: self.assertEqual(there_and_back + HOUR, dt)
							πF.SetLineno(3155)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µthere_and_back, "there_and_back"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µthere_and_back, πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[1] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3158: self.assertEqual(there_and_back.dst(), ZERO)
							πF.SetLineno(3158)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µthere_and_back, "there_and_back"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µthere_and_back, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßZERO); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3160: self.assertEqual(there_and_back.astimezone(utc),
							πF.SetLineno(3160)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp004[0] = µutc
							if πE = πg.CheckLocal(πF, µthere_and_back, "there_and_back"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µthere_and_back, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp004[0] = µutc
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label4
						Label3:
							// line 3164: self.assertEqual(dt, there_and_back)
							πF.SetLineno(3164)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							if πE = πg.CheckLocal(πF, µthere_and_back, "there_and_back"); πE != nil {
								continue
							}
							πTemp001[1] = µthere_and_back
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label4
						Label4:
							// line 3174: nexthour_utc = asutc + HOUR
							πF.SetLineno(3174)
							if πE = πg.CheckLocal(πF, µasutc, "asutc"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µasutc, πTemp003); πE != nil {
								continue
							}
							µnexthour_utc = πTemp002
							// line 3175: nexthour_tz = nexthour_utc.astimezone(tz)
							πF.SetLineno(3175)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp001[0] = µtz
							if πE = πg.CheckLocal(πF, µnexthour_utc, "nexthour_utc"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnexthour_utc, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µnexthour_tz = πTemp003
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µdt, ßdate, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdstoff, "dstoff"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µdstoff, ßdate, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp007, πTemp008); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label5
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µdt, ßhour, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp006, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
						Label5:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label6
							}
							goto Label7
							// line 3176: if dt.date() == dstoff.date() and dt.hour == 0:
							πF.SetLineno(3176)
						Label6:
							// line 3179: self.assertEqual(nexthour_tz, dt.replace(hour=1))
							πF.SetLineno(3179)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnexthour_tz, "nexthour_tz"); πE != nil {
								continue
							}
							πTemp001[0] = µnexthour_tz
							πTemp009 = πg.KWArgs{
								{"hour", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp009); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3180: nexthour_utc += HOUR
							πF.SetLineno(3180)
							if πE = πg.CheckLocal(πF, µnexthour_utc, "nexthour_utc"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µnexthour_utc, πTemp002); πE != nil {
								continue
							}
							µnexthour_utc = πTemp003
							// line 3181: nexthour_tz = nexthour_utc.astimezone(tz)
							πF.SetLineno(3181)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp001[0] = µtz
							if πE = πg.CheckLocal(πF, µnexthour_utc, "nexthour_utc"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnexthour_utc, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µnexthour_tz = πTemp003
							// line 3182: self.assertEqual(nexthour_tz, dt.replace(hour=1))
							πF.SetLineno(3182)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnexthour_tz, "nexthour_tz"); πE != nil {
								continue
							}
							πTemp001[0] = µnexthour_tz
							πTemp009 = πg.KWArgs{
								{"hour", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp009); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label8
						Label7:
							// line 3184: self.assertEqual(nexthour_tz - dt, HOUR)
							πF.SetLineno(3184)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnexthour_tz, "nexthour_tz"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, µnexthour_tz, µdt); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label8
						Label8:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcheckinside.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 3187: def checkoutside(self, dt, tz, utc):
					πF.SetLineno(3187)
					πTemp004 = make([]πg.Param, 4)
					πTemp004[0] = πg.Param{Name: "self", Def: nil}
					πTemp004[1] = πg.Param{Name: "dt", Def: nil}
					πTemp004[2] = πg.Param{Name: "tz", Def: nil}
					πTemp004[3] = πg.Param{Name: "utc", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("checkoutside", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µdt *πg.Object = πArgs[1]; _ = µdt
						var µtz *πg.Object = πArgs[2]; _ = µtz
						var µutc *πg.Object = πArgs[3]; _ = µutc
						var µasutc *πg.Object = πg.UnboundLocal; _ = µasutc
						var µthere_and_back *πg.Object = πg.UnboundLocal; _ = µthere_and_back
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3188: self.assertEqual(dt.dst(), ZERO)
							πF.SetLineno(3188)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßdst, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßZERO); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3191: self.assertEqual(dt.astimezone(tz), dt)
							πF.SetLineno(3191)
							πTemp001 = πF.MakeArgs(2)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp004[0] = µtz
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[1] = µdt
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3194: asutc = dt.astimezone(utc)
							πF.SetLineno(3194)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp001[0] = µutc
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdt, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µasutc = πTemp003
							// line 3195: there_and_back = asutc.astimezone(tz)
							πF.SetLineno(3195)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp001[0] = µtz
							if πE = πg.CheckLocal(πF, µasutc, "asutc"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µasutc, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µthere_and_back = πTemp003
							// line 3196: self.assertEqual(dt, there_and_back)
							πF.SetLineno(3196)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
								continue
							}
							πTemp001[0] = µdt
							if πE = πg.CheckLocal(πF, µthere_and_back, "there_and_back"); πE != nil {
								continue
							}
							πTemp001[1] = µthere_and_back
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcheckoutside.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 3198: def convert_between_tz_and_utc(self, tz, utc):
					πF.SetLineno(3198)
					πTemp004 = make([]πg.Param, 3)
					πTemp004[0] = πg.Param{Name: "self", Def: nil}
					πTemp004[1] = πg.Param{Name: "tz", Def: nil}
					πTemp004[2] = πg.Param{Name: "utc", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("convert_between_tz_and_utc", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µtz *πg.Object = πArgs[1]; _ = µtz
						var µutc *πg.Object = πArgs[2]; _ = µutc
						var µdston *πg.Object = πg.UnboundLocal; _ = µdston
						var µdstoff *πg.Object = πg.UnboundLocal; _ = µdstoff
						var µdelta *πg.Object = πg.UnboundLocal; _ = µdelta
						var µduring *πg.Object = πg.UnboundLocal; _ = µduring
						var µoutside *πg.Object = πg.UnboundLocal; _ = µoutside
						var πTemp001 πg.KWArgs
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πTemp011 bool
						_ = πTemp011
						var πTemp012 []*πg.Object
						_ = πTemp012
						var πTemp013 bool
						_ = πTemp013
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							case 7: goto Label7
							case 8: goto Label8
							default: panic("unexpected function state")
							}
							// line 3199: dston = self.dston.replace(tzinfo=tz)
							πF.SetLineno(3199)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"tzinfo", µtz},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdston, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µdston = πTemp002
							// line 3205: dstoff = self.dstoff.replace(tzinfo=tz)
							πF.SetLineno(3205)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"tzinfo", µtz},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdstoff, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							µdstoff = πTemp002
							πTemp001 = πg.KWArgs{
								{"weeks", πg.NewInt(13).ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßDAY); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"minutes", πg.NewInt(1).ToObject()},
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							πTemp001 = πg.KWArgs{
								{"microseconds", πg.NewInt(1).ToObject()},
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp007.Call(πF, nil, πTemp001); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple5(πTemp005, πTemp004, πTemp006, πTemp008, πTemp009).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp010 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp010 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp011 = !isStop
							} else {
								πTemp011 = true
								µdelta = πTemp003
							}
							if πE != nil || !πTemp011 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 3212: self.checkinside(dston, tz, utc, dston, dstoff)
							πF.SetLineno(3212)
							πTemp012 = πF.MakeArgs(5)
							if πE = πg.CheckLocal(πF, µdston, "dston"); πE != nil {
								continue
							}
							πTemp012[0] = µdston
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp012[1] = µtz
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp012[2] = µutc
							if πE = πg.CheckLocal(πF, µdston, "dston"); πE != nil {
								continue
							}
							πTemp012[3] = µdston
							if πE = πg.CheckLocal(πF, µdstoff, "dstoff"); πE != nil {
								continue
							}
							πTemp012[4] = µdstoff
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcheckinside, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							if πE = πg.CheckLocal(πF, µdston, "dston"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Add(πF, µdston, µdelta); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdstoff, "dstoff"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, µdstoff, µdelta); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(πTemp005, πTemp006).ToObject()
							if πTemp003, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp011 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp011 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp004, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp013 = !isStop
							} else {
								πTemp013 = true
								µduring = πTemp004
							}
							if πE != nil || !πTemp013 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 3214: self.checkinside(during, tz, utc, dston, dstoff)
							πF.SetLineno(3214)
							πTemp012 = πF.MakeArgs(5)
							if πE = πg.CheckLocal(πF, µduring, "during"); πE != nil {
								continue
							}
							πTemp012[0] = µduring
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp012[1] = µtz
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp012[2] = µutc
							if πE = πg.CheckLocal(πF, µdston, "dston"); πE != nil {
								continue
							}
							πTemp012[3] = µdston
							if πE = πg.CheckLocal(πF, µdstoff, "dstoff"); πE != nil {
								continue
							}
							πTemp012[4] = µdstoff
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßcheckinside, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							// line 3216: self.checkoutside(dstoff, tz, utc)
							πF.SetLineno(3216)
							πTemp012 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µdstoff, "dstoff"); πE != nil {
								continue
							}
							πTemp012[0] = µdstoff
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp012[1] = µtz
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp012[2] = µutc
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcheckoutside, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							if πE = πg.CheckLocal(πF, µdston, "dston"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Sub(πF, µdston, µdelta); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdstoff, "dstoff"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdelta, "delta"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, µdstoff, µdelta); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(πTemp005, πTemp006).ToObject()
							if πTemp003, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(8)
							πTemp011 = false
						Label7:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp011 {
								πF.PopCheckpoint()
								goto Label9
							}
							if πTemp004, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp013 = !isStop
							} else {
								πTemp013 = true
								µoutside = πTemp004
							}
							if πE != nil || !πTemp013 {
								continue
							}
							πF.PushCheckpoint(7)            
							// line 3218: self.checkoutside(outside, tz, utc)
							πF.SetLineno(3218)
							πTemp012 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µoutside, "outside"); πE != nil {
								continue
							}
							πTemp012[0] = µoutside
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp012[1] = µtz
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp012[2] = µutc
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßcheckoutside, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp012, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp012)
							continue
						Label8:
							if πE != nil || πR != nil {
								continue
							}
						Label9:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßconvert_between_tz_and_utc.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 3221: def test_easy(self):
					πF.SetLineno(3221)
					πTemp004 = make([]πg.Param, 1)
					πTemp004[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("test_easy", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3223: self.convert_between_tz_and_utc(Eastern, utc_real)
							πF.SetLineno(3223)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_between_tz_and_utc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3224: self.convert_between_tz_and_utc(Pacific, utc_real)
							πF.SetLineno(3224)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPacific); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_between_tz_and_utc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3225: self.convert_between_tz_and_utc(Eastern, utc_fake)
							πF.SetLineno(3225)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßutc_fake); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_between_tz_and_utc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3226: self.convert_between_tz_and_utc(Pacific, utc_fake)
							πF.SetLineno(3226)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPacific); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßutc_fake); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_between_tz_and_utc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3230: self.convert_between_tz_and_utc(Eastern, Pacific)
							πF.SetLineno(3230)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPacific); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_between_tz_and_utc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3231: self.convert_between_tz_and_utc(Pacific, Eastern)
							πF.SetLineno(3231)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPacific); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_between_tz_and_utc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_easy.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 3220: @unittest.expectedFailure
					πF.SetLineno(3220)
					πTemp001 = πF.MakeArgs(1)
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßtest_easy); πE != nil {
						continue
					}
					πTemp001[0] = πTemp007
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp008.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πE = πClass.SetItem(πF, ßtest_easy.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 3246: def test_tricky(self):
					πF.SetLineno(3246)
					πTemp004 = make([]πg.Param, 1)
					πTemp004[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("test_tricky", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µfourback *πg.Object = πg.UnboundLocal; _ = µfourback
						var µninewest *πg.Object = πg.UnboundLocal; _ = µninewest
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var µsixutc *πg.Object = πg.UnboundLocal; _ = µsixutc
						var µutc *πg.Object = πg.UnboundLocal; _ = µutc
						var µtz *πg.Object = πg.UnboundLocal; _ = µtz
						var µfirst_std_hour *πg.Object = πg.UnboundLocal; _ = µfirst_std_hour
						var µasutc *πg.Object = πg.UnboundLocal; _ = µasutc
						var µasutcbase *πg.Object = πg.UnboundLocal; _ = µasutcbase
						var µtzhour *πg.Object = πg.UnboundLocal; _ = µtzhour
						var µexpectedbase *πg.Object = πg.UnboundLocal; _ = µexpectedbase
						var µminute *πg.Object = πg.UnboundLocal; _ = µminute
						var µastz *πg.Object = πg.UnboundLocal; _ = µastz
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 bool
						_ = πTemp012
						var πTemp013 bool
						_ = πTemp013
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 4: goto Label4
							case 5: goto Label5
							case 7: goto Label7
							case 8: goto Label8
							case 10: goto Label10
							case 11: goto Label11
							default: panic("unexpected function state")
							}
							// line 3248: fourback = self.dston - timedelta(hours=4)
							πF.SetLineno(3248)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdston, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"hours", πg.NewInt(4).ToObject()},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Sub(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							µfourback = πTemp001
							// line 3249: ninewest = FixedOffset(-9*60, "-0900", 0)
							πF.SetLineno(3249)
							πTemp006 = πF.MakeArgs(3)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(9).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πTemp002, πg.NewInt(60).ToObject()); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp006[1] = πg.NewStr("-0900").ToObject()
							πTemp006[2] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFixedOffset); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µninewest = πTemp002
							// line 3250: fourback = fourback.replace(tzinfo=ninewest)
							πF.SetLineno(3250)
							if πE = πg.CheckLocal(πF, µninewest, "ninewest"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"tzinfo", µninewest},
							}
							if πE = πg.CheckLocal(πF, µfourback, "fourback"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µfourback, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µfourback = πTemp002
							// line 3258: expected = self.dston.replace(hour=3)
							πF.SetLineno(3258)
							πTemp003 = πg.KWArgs{
								{"hour", πg.NewInt(3).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdston, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µexpected = πTemp001
							// line 3259: got = fourback.astimezone(Eastern).replace(tzinfo=None)
							πF.SetLineno(3259)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							πTemp006 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µfourback, "fourback"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µfourback, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µgot = πTemp002
							// line 3260: self.assertEqual(expected, got)
							πF.SetLineno(3260)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp006[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp006[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 3264: sixutc = self.dston.replace(hour=6, tzinfo=utc_real)
							πF.SetLineno(3264)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"hour", πg.NewInt(6).ToObject()},
								{"tzinfo", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdston, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µsixutc = πTemp001
							// line 3268: expected = self.dston.replace(hour=1)
							πF.SetLineno(3268)
							πTemp003 = πg.KWArgs{
								{"hour", πg.NewInt(1).ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdston, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µexpected = πTemp001
							// line 3269: got = sixutc.astimezone(Eastern).replace(tzinfo=None)
							πF.SetLineno(3269)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"tzinfo", πTemp001},
							}
							πTemp006 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µsixutc, "sixutc"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsixutc, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µgot = πTemp002
							// line 3270: self.assertEqual(expected, got)
							πF.SetLineno(3270)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp006[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp006[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßutc_fake); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(πTemp004, πTemp005).ToObject()
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µutc = πTemp002
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							if πTemp005, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßPacific); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(πTemp005, πTemp009).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp008 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp004, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp010 = !isStop
							} else {
								πTemp010 = true
								µtz = πTemp004
							}
							if πE != nil || !πTemp010 {
								continue
							}
							πF.PushCheckpoint(4)            
							// line 3279: first_std_hour = self.dstoff - timedelta(hours=2) # 23:MM
							πF.SetLineno(3279)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßdstoff, nil); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"hours", πg.NewInt(2).ToObject()},
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp009.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Sub(πF, πTemp005, πTemp011); πE != nil {
								continue
							}
							µfirst_std_hour = πTemp004
							// line 3281: first_std_hour -= tz.utcoffset(None)
							πF.SetLineno(3281)
							if πE = πg.CheckLocal(πF, µfirst_std_hour, "first_std_hour"); πE != nil {
								continue
							}
							πTemp006 = πF.MakeArgs(1)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp006[0] = πTemp004
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µtz, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp004, πE = πg.ISub(πF, µfirst_std_hour, πTemp005); πE != nil {
								continue
							}
							µfirst_std_hour = πTemp004
							// line 3283: asutc = first_std_hour + utc.utcoffset(None)
							πF.SetLineno(3283)
							if πE = πg.CheckLocal(πF, µfirst_std_hour, "first_std_hour"); πE != nil {
								continue
							}
							πTemp006 = πF.MakeArgs(1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp006[0] = πTemp005
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µutc, ßutcoffset, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp004, πE = πg.Add(πF, µfirst_std_hour, πTemp009); πE != nil {
								continue
							}
							µasutc = πTemp004
							// line 3286: asutcbase = asutc.replace(tzinfo=utc)
							πF.SetLineno(3286)
							if πE = πg.CheckLocal(πF, µutc, "utc"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"tzinfo", µutc},
							}
							if πE = πg.CheckLocal(πF, µasutc, "asutc"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µasutc, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µasutcbase = πTemp005
							πTemp005 = πg.NewTuple4(πg.NewInt(0).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(2).ToObject()).ToObject()
							if πTemp004, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(8)
							πTemp010 = false
						Label7:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp010 {
								πF.PopCheckpoint()
								goto Label9
							}
							if πTemp005, πE = πg.Next(πF, πTemp004); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp012 = !isStop
							} else {
								πTemp012 = true
								µtzhour = πTemp005
							}
							if πE != nil || !πTemp012 {
								continue
							}
							πF.PushCheckpoint(7)            
							// line 3288: expectedbase = self.dstoff.replace(hour=tzhour)
							πF.SetLineno(3288)
							if πE = πg.CheckLocal(πF, µtzhour, "tzhour"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"hour", µtzhour},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßdstoff, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, πTemp005, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp009.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µexpectedbase = πTemp005
							πTemp009 = πg.NewTuple3(πg.NewInt(0).ToObject(), πg.NewInt(30).ToObject(), πg.NewInt(59).ToObject()).ToObject()
							if πTemp005, πE = πg.Iter(πF, πTemp009); πE != nil {
								continue
							}
							πF.PushCheckpoint(11)
							πTemp012 = false
						Label10:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp012 {
								πF.PopCheckpoint()
								goto Label12
							}
							if πTemp009, πE = πg.Next(πF, πTemp005); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp013 = !isStop
							} else {
								πTemp013 = true
								µminute = πTemp009
							}
							if πE != nil || !πTemp013 {
								continue
							}
							πF.PushCheckpoint(10)            
							// line 3290: expected = expectedbase.replace(minute=minute)
							πF.SetLineno(3290)
							if πE = πg.CheckLocal(πF, µminute, "minute"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"minute", µminute},
							}
							if πE = πg.CheckLocal(πF, µexpectedbase, "expectedbase"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µexpectedbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp009.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µexpected = πTemp011
							// line 3291: asutc = asutcbase.replace(minute=minute)
							πF.SetLineno(3291)
							if πE = πg.CheckLocal(πF, µminute, "minute"); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"minute", µminute},
							}
							if πE = πg.CheckLocal(πF, µasutcbase, "asutcbase"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µasutcbase, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp009.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							µasutc = πTemp011
							// line 3292: astz = asutc.astimezone(tz)
							πF.SetLineno(3292)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtz, "tz"); πE != nil {
								continue
							}
							πTemp006[0] = µtz
							if πE = πg.CheckLocal(πF, µasutc, "asutc"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µasutc, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp009.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µastz = πTemp011
							// line 3293: self.assertEqual(astz.replace(tzinfo=None), expected)
							πF.SetLineno(3293)
							πTemp006 = πF.MakeArgs(2)
							if πTemp009, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"tzinfo", πTemp009},
							}
							if πE = πg.CheckLocal(πF, µastz, "astz"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µastz, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp009.Call(πF, nil, πTemp003); πE != nil {
								continue
							}
							πTemp006[0] = πTemp011
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp006[1] = µexpected
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp009.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							continue
						Label11:
							if πE != nil || πR != nil {
								continue
							}
						Label12:
							// line 3294: asutcbase += HOUR
							πF.SetLineno(3294)
							if πE = πg.CheckLocal(πF, µasutcbase, "asutcbase"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IAdd(πF, µasutcbase, πTemp005); πE != nil {
								continue
							}
							µasutcbase = πTemp009
							continue
						Label8:
							if πE != nil || πR != nil {
								continue
							}
						Label9:
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_tricky.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 3245: @unittest.expectedFailure
					πF.SetLineno(3245)
					πTemp001 = πF.MakeArgs(1)
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßtest_tricky); πE != nil {
						continue
					}
					πTemp001[0] = πTemp008
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp009, πE = πg.GetAttr(πF, πTemp008, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp009.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πE = πClass.SetItem(πF, ßtest_tricky.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 3298: def test_bogus_dst(self):
					πF.SetLineno(3298)
					πTemp004 = make([]πg.Param, 1)
					πTemp004[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("test_bogus_dst", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µok *πg.Object = πg.UnboundLocal; _ = µok
						var µnow *πg.Object = πg.UnboundLocal; _ = µnow
						var µnotok *πg.Object = πg.UnboundLocal; _ = µnotok
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3299: class ok(tzinfo):
							πF.SetLineno(3299)
							πTemp003 = make([]*πg.Object, 1)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßtzinfo); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("ok", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3300: def utcoffset(self, dt): return HOUR
									πF.SetLineno(3300)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("utcoffset", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3300: def utcoffset(self, dt): return HOUR
											πF.SetLineno(3300)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßutcoffset.ToObject(), πTemp001); πE != nil {
										continue
									}
									// line 3301: def dst(self, dt): return HOUR
									πF.SetLineno(3301)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp003 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3301: def dst(self, dt): return HOUR
											πF.SetLineno(3301)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp003); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("ok").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µok = πTemp005
							// line 3303: now = self.theclass.now().replace(tzinfo=utc_real)
							πF.SetLineno(3303)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtheclass, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßnow, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							µnow = πTemp002
							// line 3305: now.astimezone(ok())
							πF.SetLineno(3305)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µok, "ok"); πE != nil {
								continue
							}
							if πTemp002, πE = µok.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnow, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3308: class notok(ok):
							πF.SetLineno(3308)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µok, "ok"); πE != nil {
								continue
							}
							πTemp003[0] = µok
							πTemp001 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("notok", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp001
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3309: def dst(self, dt): return None
									πF.SetLineno(3309)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("dst", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3309: def dst(self, dt): return None
											πF.SetLineno(3309)
											if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßdst.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp004 == nil {
								πTemp004 = πg.TypeType.ToObject()
							}
							if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("notok").ToObject(), πg.NewTuple(πTemp003...).ToObject(), πTemp001.ToObject()}, nil); πE != nil {
								continue
							}
							µnotok = πTemp005
							// line 3310: self.assertRaises(ValueError, now.astimezone, notok())
							πF.SetLineno(3310)
							πTemp003 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnow, ßastimezone, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µnotok, "notok"); πE != nil {
								continue
							}
							if πTemp002, πE = µnotok.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bogus_dst.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 3297: @unittest.expectedFailure
					πF.SetLineno(3297)
					πTemp001 = πF.MakeArgs(1)
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßtest_bogus_dst); πE != nil {
						continue
					}
					πTemp001[0] = πTemp009
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp010.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πE = πClass.SetItem(πF, ßtest_bogus_dst.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 3313: def test_fromutc(self):
					πF.SetLineno(3313)
					πTemp004 = make([]πg.Param, 1)
					πTemp004[0] = πg.Param{Name: "self", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("test_fromutc", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µnow *πg.Object = πg.UnboundLocal; _ = µnow
						var µenow *πg.Object = πg.UnboundLocal; _ = µenow
						var µFauxUSTimeZone *πg.Object = πg.UnboundLocal; _ = µFauxUSTimeZone
						var µFEastern *πg.Object = πg.UnboundLocal; _ = µFEastern
						var µstart *πg.Object = πg.UnboundLocal; _ = µstart
						var µfstart *πg.Object = πg.UnboundLocal; _ = µfstart
						var µwall *πg.Object = πg.UnboundLocal; _ = µwall
						var µexpected *πg.Object = πg.UnboundLocal; _ = µexpected
						var µgot *πg.Object = πg.UnboundLocal; _ = µgot
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1: goto Label1
							case 2: goto Label2
							case 6: goto Label6
							case 7: goto Label7
							default: panic("unexpected function state")
							}
							// line 3314: self.assertRaises(TypeError, Eastern.fromutc)   # not enough args
							πF.SetLineno(3314)
							πTemp001 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromutc, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3315: now = datetime.utcnow().replace(tzinfo=utc_real)
							πF.SetLineno(3315)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßutcnow, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µnow = πTemp002
							// line 3316: self.assertRaises(ValueError, Eastern.fromutc, now) # wrong tzinfo
							πF.SetLineno(3316)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromutc, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							πTemp001[2] = µnow
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3317: now = now.replace(tzinfo=Eastern)   # insert correct tzinfo
							πF.SetLineno(3317)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnow, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µnow = πTemp003
							// line 3318: enow = Eastern.fromutc(now)         # doesn't blow up
							πF.SetLineno(3318)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							πTemp001[0] = µnow
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromutc, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µenow = πTemp002
							// line 3319: self.assertEqual(enow.tzinfo, Eastern) # has right tzinfo member
							πF.SetLineno(3319)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µenow, "enow"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µenow, ßtzinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3320: self.assertRaises(TypeError, Eastern.fromutc, now, now) # too many args
							πF.SetLineno(3320)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromutc, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							πTemp001[2] = µnow
							if πE = πg.CheckLocal(πF, µnow, "now"); πE != nil {
								continue
							}
							πTemp001[3] = µnow
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3321: self.assertRaises(TypeError, Eastern.fromutc, date.today()) # wrong type
							πF.SetLineno(3321)
							πTemp001 = πF.MakeArgs(3)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromutc, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtoday, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3324: class FauxUSTimeZone(USTimeZone):
							πF.SetLineno(3324)
							πTemp001 = make([]*πg.Object, 1)
							if πTemp006, πE = πg.ResolveGlobal(πF, ßUSTimeZone); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							πTemp005 = πg.NewDict()
							if πTemp002, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, ß__module__.ToObject(), πTemp002); πE != nil {
								continue
							}
							_, πE = πg.NewCode("FauxUSTimeZone", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
								πClass := πTemp005
								_ = πClass
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []πg.Param
								_ = πTemp002
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3325: def fromutc(self, dt):
									πF.SetLineno(3325)
									πTemp002 = make([]πg.Param, 2)
									πTemp002[0] = πg.Param{Name: "self", Def: nil}
									πTemp002[1] = πg.Param{Name: "dt", Def: nil}
									πTemp001 = πg.NewFunction(πg.NewCode("fromutc", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
										var µself *πg.Object = πArgs[0]; _ = µself
										var µdt *πg.Object = πArgs[1]; _ = µdt
										var πTemp001 *πg.Object
										_ = πTemp001
										var πTemp002 *πg.Object
										_ = πTemp002
										var πR *πg.Object; _ = πR
										var πE *πg.BaseException; _ = πE
										for ; πF.State() >= 0; πF.PopCheckpoint() {
											switch πF.State() {
											case 0:
											default: panic("unexpected function state")
											}
											// line 3326: return dt + self.stdoffset
											πF.SetLineno(3326)
											if πE = πg.CheckLocal(πF, µdt, "dt"); πE != nil {
												continue
											}
											if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
												continue
											}
											if πTemp002, πE = πg.GetAttr(πF, µself, ßstdoffset, nil); πE != nil {
												continue
											}
											if πTemp001, πE = πg.Add(πF, µdt, πTemp002); πE != nil {
												continue
											}
											πR = πTemp001
											continue
										}
										if πE != nil {
											πR = nil
										} else if πR == nil {
											πR = πg.None
										}
										return πR, πE
									}), πF.Globals()).ToObject()
									if πE = πClass.SetItem(πF, ßfromutc.ToObject(), πTemp001); πE != nil {
										continue
									}
								}
								return nil, nil
							}).Eval(πF, πF.Globals(), nil, nil)
							if πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
								continue
							}
							if πTemp003 == nil {
								πTemp003 = πg.TypeType.ToObject()
							}
							if πTemp006, πE = πTemp003.Call(πF, []*πg.Object{πg.NewStr("FauxUSTimeZone").ToObject(), πg.NewTuple(πTemp001...).ToObject(), πTemp005.ToObject()}, nil); πE != nil {
								continue
							}
							µFauxUSTimeZone = πTemp006
							// line 3327: FEastern  = FauxUSTimeZone(-5, "FEastern",  "FEST", "FEDT")
							πF.SetLineno(3327)
							πTemp001 = πF.MakeArgs(4)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(5).ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ßFEastern.ToObject()
							πTemp001[2] = ßFEST.ToObject()
							πTemp001[3] = ßFEDT.ToObject()
							if πE = πg.CheckLocal(πF, µFauxUSTimeZone, "FauxUSTimeZone"); πE != nil {
								continue
							}
							if πTemp002, πE = µFauxUSTimeZone.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µFEastern = πTemp002
							// line 3334: start = self.dston.replace(hour=4, tzinfo=Eastern)
							πF.SetLineno(3334)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"hour", πg.NewInt(4).ToObject()},
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdston, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µstart = πTemp002
							// line 3335: fstart = start.replace(tzinfo=FEastern)
							πF.SetLineno(3335)
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µFEastern},
							}
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µstart, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µfstart = πTemp003
							πTemp003 = πg.NewTuple6(πg.NewInt(23).ToObject(), πg.NewInt(0).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(3).ToObject(), πg.NewInt(4).ToObject(), πg.NewInt(5).ToObject()).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µwall = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)            
							// line 3337: expected = start.replace(hour=wall)
							πF.SetLineno(3337)
							if πE = πg.CheckLocal(πF, µwall, "wall"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"hour", µwall},
							}
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µstart, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µexpected = πTemp006
							if πE = πg.CheckLocal(πF, µwall, "wall"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µwall, πg.NewInt(23).ToObject()); πE != nil {
								continue
							}
							if πTemp008, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label4
							}
							goto Label5
							// line 3338: if wall == 23:
							πF.SetLineno(3338)
						Label4:
							// line 3339: expected -= timedelta(days=1)
							πF.SetLineno(3339)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"days", πg.NewInt(1).ToObject()},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßtimedelta); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ISub(πF, µexpected, πTemp006); πE != nil {
								continue
							}
							µexpected = πTemp003
							goto Label5
						Label5:
							// line 3340: got = Eastern.fromutc(start)
							πF.SetLineno(3340)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							πTemp001[0] = µstart
							if πTemp003, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßfromutc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µgot = πTemp003
							// line 3341: self.assertEqual(expected, got)
							πF.SetLineno(3341)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp001[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3343: expected = fstart + FEastern.stdoffset
							πF.SetLineno(3343)
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µFEastern, ßstdoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µfstart, πTemp006); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 3344: got = FEastern.fromutc(fstart)
							πF.SetLineno(3344)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							πTemp001[0] = µfstart
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µFEastern, ßfromutc, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µgot = πTemp006
							// line 3345: self.assertEqual(expected, got)
							πF.SetLineno(3345)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp001[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3348: got = fstart.replace(tzinfo=utc_real).astimezone(FEastern)
							πF.SetLineno(3348)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							πTemp001[0] = µFEastern
							if πTemp003, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfstart, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp006, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µgot = πTemp006
							// line 3349: self.assertEqual(expected, got)
							πF.SetLineno(3349)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp001[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3351: start += HOUR
							πF.SetLineno(3351)
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, µstart, πTemp003); πE != nil {
								continue
							}
							µstart = πTemp006
							// line 3352: fstart += HOUR
							πF.SetLineno(3352)
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, µfstart, πTemp003); πE != nil {
								continue
							}
							µfstart = πTemp006
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 3355: start = self.dstoff.replace(hour=4, tzinfo=Eastern)
							πF.SetLineno(3355)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"hour", πg.NewInt(4).ToObject()},
								{"tzinfo", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdstoff, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µstart = πTemp002
							// line 3356: fstart = start.replace(tzinfo=FEastern)
							πF.SetLineno(3356)
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", µFEastern},
							}
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µstart, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µfstart = πTemp003
							πTemp003 = πg.NewTuple6(πg.NewInt(0).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(1).ToObject(), πg.NewInt(2).ToObject(), πg.NewInt(3).ToObject(), πg.NewInt(4).ToObject()).ToObject()
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(7)
							πTemp007 = false
						Label6:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label8
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µwall = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(6)            
							// line 3358: expected = start.replace(hour=wall)
							πF.SetLineno(3358)
							if πE = πg.CheckLocal(πF, µwall, "wall"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"hour", µwall},
							}
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µstart, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µexpected = πTemp006
							// line 3359: got = Eastern.fromutc(start)
							πF.SetLineno(3359)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							πTemp001[0] = µstart
							if πTemp003, πE = πg.ResolveGlobal(πF, ßEastern); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßfromutc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µgot = πTemp003
							// line 3360: self.assertEqual(expected, got)
							πF.SetLineno(3360)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp001[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3362: expected = fstart + FEastern.stdoffset
							πF.SetLineno(3362)
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µFEastern, ßstdoffset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µfstart, πTemp006); πE != nil {
								continue
							}
							µexpected = πTemp003
							// line 3363: got = FEastern.fromutc(fstart)
							πF.SetLineno(3363)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							πTemp001[0] = µfstart
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µFEastern, ßfromutc, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µgot = πTemp006
							// line 3364: self.assertEqual(expected, got)
							πF.SetLineno(3364)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp001[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3367: got = fstart.replace(tzinfo=utc_real).astimezone(FEastern)
							πF.SetLineno(3367)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µFEastern, "FEastern"); πE != nil {
								continue
							}
							πTemp001[0] = µFEastern
							if πTemp003, πE = πg.ResolveGlobal(πF, ßutc_real); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"tzinfo", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfstart, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp006, ßastimezone, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µgot = πTemp006
							// line 3368: self.assertEqual(expected, got)
							πF.SetLineno(3368)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µexpected, "expected"); πE != nil {
								continue
							}
							πTemp001[0] = µexpected
							if πE = πg.CheckLocal(πF, µgot, "got"); πE != nil {
								continue
							}
							πTemp001[1] = µgot
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3370: start += HOUR
							πF.SetLineno(3370)
							if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, µstart, πTemp003); πE != nil {
								continue
							}
							µstart = πTemp006
							// line 3371: fstart += HOUR
							πF.SetLineno(3371)
							if πE = πg.CheckLocal(πF, µfstart, "fstart"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßHOUR); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, µfstart, πTemp003); πE != nil {
								continue
							}
							µfstart = πTemp006
							continue
						Label7:
							if πE != nil || πR != nil {
								continue
							}
						Label8:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_fromutc.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 3312: @unittest.expectedFailure
					πF.SetLineno(3312)
					πTemp001 = πF.MakeArgs(1)
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßtest_fromutc); πE != nil {
						continue
					}
					πTemp001[0] = πTemp010
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp010, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp010, πE = πTemp011.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πE = πClass.SetItem(πF, ßtest_fromutc.ToObject(), πTemp010); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp004, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp004 == nil {
				πTemp004 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("TestTimezoneConversions").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTestTimezoneConversions.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 3377: class Oddballs(unittest.TestCase):
			πF.SetLineno(3377)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp005, πE = πg.ResolveGlobal(πF, ßunittest); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßTestCase, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			πTemp010 = πg.NewDict()
			if πTemp003, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp010.SetItem(πF, ß__module__.ToObject(), πTemp003); πE != nil {
				continue
			}
			_, πE = πg.NewCode("Oddballs", "build/src/__python__/test/test_datetime.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp010
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3380: def test_bug_1028306(self):
					πF.SetLineno(3380)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("test_bug_1028306", "build/src/__python__/test/test_datetime.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]; _ = µself
						var µas_date *πg.Object = πg.UnboundLocal; _ = µas_date
						var µas_datetime *πg.Object = πg.UnboundLocal; _ = µas_datetime
						var µdifferent_day *πg.Object = πg.UnboundLocal; _ = µdifferent_day
						var µdate_sc *πg.Object = πg.UnboundLocal; _ = µdate_sc
						var µdatetime_sc *πg.Object = πg.UnboundLocal; _ = µdatetime_sc
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []πg.Param
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πR *πg.Object; _ = πR
						var πE *πg.BaseException; _ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default: panic("unexpected function state")
							}
							// line 3383: as_date = date.today()
							πF.SetLineno(3383)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdate); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtoday, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µas_date = πTemp001
							// line 3384: as_datetime = datetime.combine(as_date, time())
							πF.SetLineno(3384)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							πTemp003[0] = µas_date
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdatetime); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcombine, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µas_datetime = πTemp001
							// line 3385: self.assertTrue(as_date != as_datetime)
							πF.SetLineno(3385)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.NE(πF, µas_date, µas_datetime); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3386: self.assertTrue(as_datetime != as_date)
							πF.SetLineno(3386)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.NE(πF, µas_datetime, µas_date); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3387: self.assertFalse(as_date == as_datetime)
							πF.SetLineno(3387)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µas_date, µas_datetime); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3388: self.assertFalse(as_datetime == as_date)
							πF.SetLineno(3388)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µas_datetime, µas_date); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3389: self.assertRaises(TypeError, lambda: as_date < as_datetime)
							πF.SetLineno(3389)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3389: self.assertRaises(TypeError, lambda: as_date < as_datetime)
									πF.SetLineno(3389)
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µas_date, µas_datetime); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3390: self.assertRaises(TypeError, lambda: as_datetime < as_date)
							πF.SetLineno(3390)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3390: self.assertRaises(TypeError, lambda: as_datetime < as_date)
									πF.SetLineno(3390)
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LT(πF, µas_datetime, µas_date); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3391: self.assertRaises(TypeError, lambda: as_date <= as_datetime)
							πF.SetLineno(3391)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3391: self.assertRaises(TypeError, lambda: as_date <= as_datetime)
									πF.SetLineno(3391)
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, µas_date, µas_datetime); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3392: self.assertRaises(TypeError, lambda: as_datetime <= as_date)
							πF.SetLineno(3392)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3392: self.assertRaises(TypeError, lambda: as_datetime <= as_date)
									πF.SetLineno(3392)
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.LE(πF, µas_datetime, µas_date); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3393: self.assertRaises(TypeError, lambda: as_date > as_datetime)
							πF.SetLineno(3393)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3393: self.assertRaises(TypeError, lambda: as_date > as_datetime)
									πF.SetLineno(3393)
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µas_date, µas_datetime); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3394: self.assertRaises(TypeError, lambda: as_datetime > as_date)
							πF.SetLineno(3394)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3394: self.assertRaises(TypeError, lambda: as_datetime > as_date)
									πF.SetLineno(3394)
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GT(πF, µas_datetime, µas_date); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3395: self.assertRaises(TypeError, lambda: as_date >= as_datetime)
							πF.SetLineno(3395)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3395: self.assertRaises(TypeError, lambda: as_date >= as_datetime)
									πF.SetLineno(3395)
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µas_date, µas_datetime); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3396: self.assertRaises(TypeError, lambda: as_datetime >= as_date)
							πF.SetLineno(3396)
							πTemp003 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp004 = make([]πg.Param, 0)
							πTemp001 = πg.NewFunction(πg.NewCode("<lambda>", "build/src/__python__/test/test_datetime.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var πTemp001 *πg.Object
								_ = πTemp001
								var πR *πg.Object; _ = πR
								var πE *πg.BaseException; _ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default: panic("unexpected function state")
									}
									// line 3396: self.assertRaises(TypeError, lambda: as_datetime >= as_date)
									πF.SetLineno(3396)
									if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.GE(πF, µas_datetime, µas_date); πE != nil {
										continue
									}
									πR = πTemp001
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertRaises, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3400: self.assertTrue(as_date.__eq__(as_datetime))
							πF.SetLineno(3400)
							πTemp003 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							πTemp005[0] = µas_datetime
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_date, ß__eq__, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertTrue, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3401: different_day = (as_date.day + 1) % 20 + 1
							πF.SetLineno(3401)
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µas_date, ßday, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, πTemp007, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πTemp006, πg.NewInt(20).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µdifferent_day = πTemp001
							// line 3402: self.assertFalse(as_date.__eq__(as_datetime.replace(day=different_day)))
							πF.SetLineno(3402)
							πTemp003 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdifferent_day, "different_day"); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"day", µdifferent_day},
							}
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_datetime, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, πTemp008); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_date, ß__eq__, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertFalse, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3406: date_sc = SubclassDate(as_date.year, as_date.month, as_date.day)
							πF.SetLineno(3406)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_date, ßyear, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_date, ßmonth, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_date, ßday, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubclassDate); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µdate_sc = πTemp002
							// line 3407: self.assertEqual(as_date, date_sc)
							πF.SetLineno(3407)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							πTemp003[0] = µas_date
							if πE = πg.CheckLocal(πF, µdate_sc, "date_sc"); πE != nil {
								continue
							}
							πTemp003[1] = µdate_sc
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3408: self.assertEqual(date_sc, as_date)
							πF.SetLineno(3408)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdate_sc, "date_sc"); πE != nil {
								continue
							}
							πTemp003[0] = µdate_sc
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							πTemp003[1] = µas_date
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3411: datetime_sc = SubclassDatetime(as_datetime.year, as_datetime.month,
							πF.SetLineno(3411)
							πTemp003 = πF.MakeArgs(6)
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_datetime, ßyear, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_datetime, ßmonth, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µas_date, "as_date"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µas_date, ßday, nil); πE != nil {
								continue
							}
							πTemp003[2] = πTemp001
							πTemp003[3] = πg.NewInt(0).ToObject()
							πTemp003[4] = πg.NewInt(0).ToObject()
							πTemp003[5] = πg.NewInt(0).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubclassDatetime); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µdatetime_sc = πTemp002
							// line 3413: self.assertEqual(as_datetime, datetime_sc)
							πF.SetLineno(3413)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							πTemp003[0] = µas_datetime
							if πE = πg.CheckLocal(πF, µdatetime_sc, "datetime_sc"); πE != nil {
								continue
							}
							πTemp003[1] = µdatetime_sc
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3414: self.assertEqual(datetime_sc, as_datetime)
							πF.SetLineno(3414)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µdatetime_sc, "datetime_sc"); πE != nil {
								continue
							}
							πTemp003[0] = µdatetime_sc
							if πE = πg.CheckLocal(πF, µas_datetime, "as_datetime"); πE != nil {
								continue
							}
							πTemp003[1] = µas_datetime
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassertEqual, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtest_bug_1028306.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 3379: @unittest.expectedFailure
					πF.SetLineno(3379)
					πTemp003 = πF.MakeArgs(1)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßtest_bug_1028306); πE != nil {
						continue
					}
					πTemp003[0] = πTemp004
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßunittest); πE != nil {
						continue
					}
					if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßexpectedFailure, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πE = πClass.SetItem(πF, ßtest_bug_1028306.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp004, πE = πTemp010.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp004 == nil {
				πTemp004 = πg.TypeType.ToObject()
			}
			if πTemp005, πE = πTemp004.Call(πF, []*πg.Object{πg.NewStr("Oddballs").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp010.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßOddballs.ToObject(), πTemp005); πE != nil {
				continue
			}
			// line 3416: def test_main():
			πF.SetLineno(3416)
			πTemp012 = make([]πg.Param, 0)
			πTemp003 = πg.NewFunction(πg.NewCode("test_main", "build/src/__python__/test/test_datetime.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πR *πg.Object; _ = πR
				var πE *πg.BaseException; _ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default: panic("unexpected function state")
					}
					// line 3417: test_support.run_unittest(__name__)
					πF.SetLineno(3417)
					πTemp001 = πF.MakeArgs(1)
					if πTemp002, πE = πg.ResolveGlobal(πF, ß__name__); πE != nil {
						continue
					}
					πTemp001[0] = πTemp002
					if πTemp002, πE = πg.ResolveGlobal(πF, ßtest_support); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßrun_unittest, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßtest_main.ToObject(), πTemp003); πE != nil {
				continue
			}
			if πTemp005, πE = πg.ResolveGlobal(πF, ß__name__); πE != nil {
				continue
			}
			if πTemp004, πE = πg.Eq(πF, πTemp005, ß__main__.ToObject()); πE != nil {
				continue
			}
			if πTemp014, πE = πg.IsTrue(πF, πTemp004); πE != nil {
				continue
			}
			if πTemp014 {
				goto Label1
			}
			goto Label2
			// line 3419: if __name__ == "__main__":
			πF.SetLineno(3419)
		Label1:
			// line 3420: test_main()
			πF.SetLineno(3420)
			if πTemp004, πE = πg.ResolveGlobal(πF, ßtest_main); πE != nil {
				continue
			}
			if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
				continue
			}
			goto Label2
		Label2:
		}
		return nil, πE
	})
	πg.RegisterModule("test.test_datetime", Code)
}
